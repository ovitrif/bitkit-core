// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.synonym.bitkitcore;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_bitkitcore_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_bitkitcore_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "bitkitcore"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}




































































































































































// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "bitkitcore")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
        
    }

    fun uniffi_bitkitcore_fn_func_add_tags(`activityId`: RustBuffer.ByValue,`tags`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_create_channel_request_url(`k1`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,`localNodeId`: RustBuffer.ByValue,`isPrivate`: Byte,`cancel`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_create_cjit_entry(`channelSizeSat`: Long,`invoiceSat`: Long,`invoiceDescription`: RustBuffer.ByValue,`nodeId`: RustBuffer.ByValue,`channelExpiryWeeks`: Int,`options`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_create_order(`lspBalanceSat`: Long,`channelExpiryWeeks`: Int,`options`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_create_withdraw_callback_url(`k1`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,`paymentRequest`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_decode(`invoice`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_delete_activity_by_id(`activityId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_bitkitcore_fn_func_derive_bitcoin_address(`mnemonicPhrase`: RustBuffer.ByValue,`derivationPathStr`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`bip39Passphrase`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_derive_bitcoin_addresses(`mnemonicPhrase`: RustBuffer.ByValue,`derivationPathStr`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`bip39Passphrase`: RustBuffer.ByValue,`isChange`: RustBuffer.ByValue,`startIndex`: RustBuffer.ByValue,`count`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_derive_private_key(`mnemonicPhrase`: RustBuffer.ByValue,`derivationPathStr`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`bip39Passphrase`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_estimate_order_fee(`lspBalanceSat`: Long,`channelExpiryWeeks`: Int,`options`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_estimate_order_fee_full(`lspBalanceSat`: Long,`channelExpiryWeeks`: Int,`options`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_generate_mnemonic(`wordCount`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_activities(`filter`: RustBuffer.ByValue,`txType`: RustBuffer.ByValue,`tags`: RustBuffer.ByValue,`search`: RustBuffer.ByValue,`minDate`: RustBuffer.ByValue,`maxDate`: RustBuffer.ByValue,`limit`: RustBuffer.ByValue,`sortDirection`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_activities_by_tag(`tag`: RustBuffer.ByValue,`limit`: RustBuffer.ByValue,`sortDirection`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_activity_by_id(`activityId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_all_unique_tags(uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_get_cjit_entries(`entryIds`: RustBuffer.ByValue,`filter`: RustBuffer.ByValue,`refresh`: Byte,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_gift(`giftId`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_info(`refresh`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_lnurl_invoice(`address`: RustBuffer.ByValue,`amountSatoshis`: Long,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_min_zero_conf_tx_fee(`orderId`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_orders(`orderIds`: RustBuffer.ByValue,`filter`: RustBuffer.ByValue,`refresh`: Byte,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_payment(`paymentId`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_get_tags(`activityId`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_gift_order(`clientNodeId`: RustBuffer.ByValue,`code`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_gift_pay(`invoice`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_init_db(`basePath`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_insert_activity(`activity`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_lnurl_auth(`domain`: RustBuffer.ByValue,`k1`: RustBuffer.ByValue,`callback`: RustBuffer.ByValue,`bip32Mnemonic`: RustBuffer.ByValue,`network`: RustBuffer.ByValue,`bip39Passphrase`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_open_channel(`orderId`: RustBuffer.ByValue,`connectionString`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_refresh_active_cjit_entries(
    ): Long
    fun uniffi_bitkitcore_fn_func_refresh_active_orders(
    ): Long
    fun uniffi_bitkitcore_fn_func_register_device(`deviceToken`: RustBuffer.ByValue,`publicKey`: RustBuffer.ByValue,`features`: RustBuffer.ByValue,`nodeId`: RustBuffer.ByValue,`isoTimestamp`: RustBuffer.ByValue,`signature`: RustBuffer.ByValue,`isProduction`: RustBuffer.ByValue,`customUrl`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_regtest_close_channel(`fundingTxId`: RustBuffer.ByValue,`vout`: Int,`forceCloseAfterS`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_regtest_deposit(`address`: RustBuffer.ByValue,`amountSat`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_regtest_get_payment(`paymentId`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_regtest_mine(`count`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_regtest_pay(`invoice`: RustBuffer.ByValue,`amountSat`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_remove_tags(`activityId`: RustBuffer.ByValue,`tags`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_test_notification(`deviceToken`: RustBuffer.ByValue,`secretMessage`: RustBuffer.ByValue,`notificationType`: RustBuffer.ByValue,`customUrl`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_trezor_compose_transaction(`outputs`: RustBuffer.ByValue,`coin`: RustBuffer.ByValue,`callbackUrl`: RustBuffer.ByValue,`requestId`: RustBuffer.ByValue,`trezorEnvironment`: RustBuffer.ByValue,`push`: RustBuffer.ByValue,`sequence`: RustBuffer.ByValue,`account`: RustBuffer.ByValue,`feeLevels`: RustBuffer.ByValue,`skipPermutation`: RustBuffer.ByValue,`common`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_trezor_get_account_info(`coin`: RustBuffer.ByValue,`callbackUrl`: RustBuffer.ByValue,`requestId`: RustBuffer.ByValue,`trezorEnvironment`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`descriptor`: RustBuffer.ByValue,`details`: RustBuffer.ByValue,`tokens`: RustBuffer.ByValue,`page`: RustBuffer.ByValue,`pageSize`: RustBuffer.ByValue,`from`: RustBuffer.ByValue,`to`: RustBuffer.ByValue,`gap`: RustBuffer.ByValue,`contractFilter`: RustBuffer.ByValue,`marker`: RustBuffer.ByValue,`defaultAccountType`: RustBuffer.ByValue,`suppressBackupWarning`: RustBuffer.ByValue,`common`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_trezor_get_address(`path`: RustBuffer.ByValue,`callbackUrl`: RustBuffer.ByValue,`requestId`: RustBuffer.ByValue,`trezorEnvironment`: RustBuffer.ByValue,`address`: RustBuffer.ByValue,`showOnTrezor`: RustBuffer.ByValue,`chunkify`: RustBuffer.ByValue,`useEventListener`: RustBuffer.ByValue,`coin`: RustBuffer.ByValue,`crossChain`: RustBuffer.ByValue,`multisig`: RustBuffer.ByValue,`scriptType`: RustBuffer.ByValue,`unlockPath`: RustBuffer.ByValue,`common`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_trezor_get_features(`callbackUrl`: RustBuffer.ByValue,`requestId`: RustBuffer.ByValue,`trezorEnvironment`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_trezor_handle_deep_link(`callbackUrl`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_trezor_sign_message(`path`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`callbackUrl`: RustBuffer.ByValue,`requestId`: RustBuffer.ByValue,`trezorEnvironment`: RustBuffer.ByValue,`coin`: RustBuffer.ByValue,`hex`: RustBuffer.ByValue,`noScriptType`: RustBuffer.ByValue,`common`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_trezor_sign_transaction(`coin`: RustBuffer.ByValue,`inputs`: RustBuffer.ByValue,`outputs`: RustBuffer.ByValue,`callbackUrl`: RustBuffer.ByValue,`requestId`: RustBuffer.ByValue,`trezorEnvironment`: RustBuffer.ByValue,`refTxs`: RustBuffer.ByValue,`paymentRequests`: RustBuffer.ByValue,`locktime`: RustBuffer.ByValue,`version`: RustBuffer.ByValue,`expiry`: RustBuffer.ByValue,`versionGroupId`: RustBuffer.ByValue,`overwintered`: RustBuffer.ByValue,`timestamp`: RustBuffer.ByValue,`branchId`: RustBuffer.ByValue,`push`: RustBuffer.ByValue,`amountUnit`: RustBuffer.ByValue,`unlockPath`: RustBuffer.ByValue,`serialize`: RustBuffer.ByValue,`chunkify`: RustBuffer.ByValue,`common`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_trezor_verify_message(`address`: RustBuffer.ByValue,`signature`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`coin`: RustBuffer.ByValue,`callbackUrl`: RustBuffer.ByValue,`requestId`: RustBuffer.ByValue,`trezorEnvironment`: RustBuffer.ByValue,`hex`: RustBuffer.ByValue,`common`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_bitkitcore_fn_func_update_activity(`activityId`: RustBuffer.ByValue,`activity`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_update_blocktank_url(`newUrl`: RustBuffer.ByValue,
    ): Long
    fun uniffi_bitkitcore_fn_func_upsert_activity(`activity`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_fn_func_validate_bitcoin_address(`address`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_bitkitcore_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_bitkitcore_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i8(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_bitkitcore_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_bitkitcore_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i16(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_bitkitcore_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_bitkitcore_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_bitkitcore_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_u64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_bitkitcore_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_i64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_bitkitcore_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_f32(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_bitkitcore_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_f64(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_bitkitcore_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_pointer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_pointer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_bitkitcore_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_bitkitcore_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_cancel_void(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_free_void(`handle`: Long,
    ): Unit
    fun ffi_bitkitcore_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_bitkitcore_checksum_func_add_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_create_channel_request_url(
    ): Short
    fun uniffi_bitkitcore_checksum_func_create_cjit_entry(
    ): Short
    fun uniffi_bitkitcore_checksum_func_create_order(
    ): Short
    fun uniffi_bitkitcore_checksum_func_create_withdraw_callback_url(
    ): Short
    fun uniffi_bitkitcore_checksum_func_decode(
    ): Short
    fun uniffi_bitkitcore_checksum_func_delete_activity_by_id(
    ): Short
    fun uniffi_bitkitcore_checksum_func_derive_bitcoin_address(
    ): Short
    fun uniffi_bitkitcore_checksum_func_derive_bitcoin_addresses(
    ): Short
    fun uniffi_bitkitcore_checksum_func_derive_private_key(
    ): Short
    fun uniffi_bitkitcore_checksum_func_estimate_order_fee(
    ): Short
    fun uniffi_bitkitcore_checksum_func_estimate_order_fee_full(
    ): Short
    fun uniffi_bitkitcore_checksum_func_generate_mnemonic(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_activities(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_activities_by_tag(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_activity_by_id(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_all_unique_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_cjit_entries(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_gift(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_info(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_lnurl_invoice(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_min_zero_conf_tx_fee(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_orders(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_payment(
    ): Short
    fun uniffi_bitkitcore_checksum_func_get_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_gift_order(
    ): Short
    fun uniffi_bitkitcore_checksum_func_gift_pay(
    ): Short
    fun uniffi_bitkitcore_checksum_func_init_db(
    ): Short
    fun uniffi_bitkitcore_checksum_func_insert_activity(
    ): Short
    fun uniffi_bitkitcore_checksum_func_lnurl_auth(
    ): Short
    fun uniffi_bitkitcore_checksum_func_open_channel(
    ): Short
    fun uniffi_bitkitcore_checksum_func_refresh_active_cjit_entries(
    ): Short
    fun uniffi_bitkitcore_checksum_func_refresh_active_orders(
    ): Short
    fun uniffi_bitkitcore_checksum_func_register_device(
    ): Short
    fun uniffi_bitkitcore_checksum_func_regtest_close_channel(
    ): Short
    fun uniffi_bitkitcore_checksum_func_regtest_deposit(
    ): Short
    fun uniffi_bitkitcore_checksum_func_regtest_get_payment(
    ): Short
    fun uniffi_bitkitcore_checksum_func_regtest_mine(
    ): Short
    fun uniffi_bitkitcore_checksum_func_regtest_pay(
    ): Short
    fun uniffi_bitkitcore_checksum_func_remove_tags(
    ): Short
    fun uniffi_bitkitcore_checksum_func_test_notification(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_compose_transaction(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_get_account_info(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_get_address(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_get_features(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_handle_deep_link(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_sign_message(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_sign_transaction(
    ): Short
    fun uniffi_bitkitcore_checksum_func_trezor_verify_message(
    ): Short
    fun uniffi_bitkitcore_checksum_func_update_activity(
    ): Short
    fun uniffi_bitkitcore_checksum_func_update_blocktank_url(
    ): Short
    fun uniffi_bitkitcore_checksum_func_upsert_activity(
    ): Short
    fun uniffi_bitkitcore_checksum_func_validate_bitcoin_address(
    ): Short
    fun ffi_bitkitcore_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_bitkitcore_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_bitkitcore_checksum_func_add_tags() != 63739.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_create_channel_request_url() != 9305.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_create_cjit_entry() != 51504.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_create_order() != 33461.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_create_withdraw_callback_url() != 39350.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_decode() != 28437.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_delete_activity_by_id() != 29867.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_derive_bitcoin_address() != 35090.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_derive_bitcoin_addresses() != 34371.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_derive_private_key() != 25155.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_estimate_order_fee() != 9548.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_estimate_order_fee_full() != 13361.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_generate_mnemonic() != 19292.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_activities() != 21347.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_activities_by_tag() != 52823.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_activity_by_id() != 44227.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_all_unique_tags() != 25431.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_cjit_entries() != 29342.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_gift() != 386.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_info() != 43607.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice() != 5475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_min_zero_conf_tx_fee() != 6427.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_orders() != 47460.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_payment() != 29170.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_get_tags() != 11308.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_gift_order() != 22040.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_gift_pay() != 22142.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_init_db() != 9643.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_insert_activity() != 1510.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_lnurl_auth() != 58593.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_open_channel() != 21402.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_refresh_active_cjit_entries() != 5324.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_refresh_active_orders() != 50661.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_register_device() != 14576.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_regtest_close_channel() != 48652.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_regtest_deposit() != 30356.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_regtest_get_payment() != 56623.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_regtest_mine() != 58685.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_regtest_pay() != 48342.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_remove_tags() != 58873.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_test_notification() != 32857.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_compose_transaction() != 25990.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_get_account_info() != 14813.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_get_address() != 42202.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_get_features() != 52582.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_handle_deep_link() != 32721.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_sign_message() != 18023.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_sign_transaction() != 59932.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_trezor_verify_message() != 44040.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_update_activity() != 42510.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_update_blocktank_url() != 52161.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_upsert_activity() != 32175.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address() != 56003.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl: UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun<T, F, E: Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterDouble: FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8UL

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}



/**
 * Account addresses
 */
data class AccountAddresses (
    /**
     * Used addresses
     */
    var `used`: List<AddressInfo>, 
    /**
     * Unused addresses
     */
    var `unused`: List<AddressInfo>, 
    /**
     * Change addresses
     */
    var `change`: List<AddressInfo>
) {
    
    companion object
}

public object FfiConverterTypeAccountAddresses: FfiConverterRustBuffer<AccountAddresses> {
    override fun read(buf: ByteBuffer): AccountAddresses {
        return AccountAddresses(
            FfiConverterSequenceTypeAddressInfo.read(buf),
            FfiConverterSequenceTypeAddressInfo.read(buf),
            FfiConverterSequenceTypeAddressInfo.read(buf),
        )
    }

    override fun allocationSize(value: AccountAddresses) = (
            FfiConverterSequenceTypeAddressInfo.allocationSize(value.`used`) +
            FfiConverterSequenceTypeAddressInfo.allocationSize(value.`unused`) +
            FfiConverterSequenceTypeAddressInfo.allocationSize(value.`change`)
    )

    override fun write(value: AccountAddresses, buf: ByteBuffer) {
            FfiConverterSequenceTypeAddressInfo.write(value.`used`, buf)
            FfiConverterSequenceTypeAddressInfo.write(value.`unused`, buf)
            FfiConverterSequenceTypeAddressInfo.write(value.`change`, buf)
    }
}



/**
 * Account info response
 */
data class AccountInfoResponse (
    var `id`: kotlin.UInt, 
    var `path`: kotlin.String, 
    var `descriptor`: kotlin.String, 
    var `legacyXpub`: kotlin.String?, 
    var `balance`: kotlin.String, 
    var `availableBalance`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeAccountInfoResponse: FfiConverterRustBuffer<AccountInfoResponse> {
    override fun read(buf: ByteBuffer): AccountInfoResponse {
        return AccountInfoResponse(
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: AccountInfoResponse) = (
            FfiConverterUInt.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterString.allocationSize(value.`descriptor`) +
            FfiConverterOptionalString.allocationSize(value.`legacyXpub`) +
            FfiConverterString.allocationSize(value.`balance`) +
            FfiConverterString.allocationSize(value.`availableBalance`)
    )

    override fun write(value: AccountInfoResponse, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`id`, buf)
            FfiConverterString.write(value.`path`, buf)
            FfiConverterString.write(value.`descriptor`, buf)
            FfiConverterOptionalString.write(value.`legacyXpub`, buf)
            FfiConverterString.write(value.`balance`, buf)
            FfiConverterString.write(value.`availableBalance`, buf)
    }
}



/**
 * UTXO information for account
 */
data class AccountUtxo (
    /**
     * Transaction ID
     */
    var `txid`: kotlin.String, 
    /**
     * Output index
     */
    var `vout`: kotlin.UInt, 
    /**
     * Amount in satoshis
     */
    var `amount`: kotlin.String, 
    /**
     * Block height
     */
    var `blockHeight`: kotlin.UInt?, 
    /**
     * Address
     */
    var `address`: kotlin.String, 
    /**
     * Derivation path
     */
    var `path`: kotlin.String, 
    /**
     * Number of confirmations
     */
    var `confirmations`: kotlin.UInt?
) {
    
    companion object
}

public object FfiConverterTypeAccountUtxo: FfiConverterRustBuffer<AccountUtxo> {
    override fun read(buf: ByteBuffer): AccountUtxo {
        return AccountUtxo(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalUInt.read(buf),
        )
    }

    override fun allocationSize(value: AccountUtxo) = (
            FfiConverterString.allocationSize(value.`txid`) +
            FfiConverterUInt.allocationSize(value.`vout`) +
            FfiConverterString.allocationSize(value.`amount`) +
            FfiConverterOptionalUInt.allocationSize(value.`blockHeight`) +
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterOptionalUInt.allocationSize(value.`confirmations`)
    )

    override fun write(value: AccountUtxo, buf: ByteBuffer) {
            FfiConverterString.write(value.`txid`, buf)
            FfiConverterUInt.write(value.`vout`, buf)
            FfiConverterString.write(value.`amount`, buf)
            FfiConverterOptionalUInt.write(value.`blockHeight`, buf)
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`path`, buf)
            FfiConverterOptionalUInt.write(value.`confirmations`, buf)
    }
}



/**
 * Address information
 */
data class AddressInfo (
    /**
     * Address string
     */
    var `address`: kotlin.String, 
    /**
     * Derivation path
     */
    var `path`: kotlin.String, 
    /**
     * Number of transfers
     */
    var `transfers`: kotlin.UInt
) {
    
    companion object
}

public object FfiConverterTypeAddressInfo: FfiConverterRustBuffer<AddressInfo> {
    override fun read(buf: ByteBuffer): AddressInfo {
        return AddressInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: AddressInfo) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterUInt.allocationSize(value.`transfers`)
    )

    override fun write(value: AddressInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`path`, buf)
            FfiConverterUInt.write(value.`transfers`, buf)
    }
}



/**
 * Address response containing the derived address information
 */
data class AddressResponse (
    var `address`: kotlin.String, 
    var `path`: List<kotlin.UInt>, 
    var `serializedPath`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeAddressResponse: FfiConverterRustBuffer<AddressResponse> {
    override fun read(buf: ByteBuffer): AddressResponse {
        return AddressResponse(
            FfiConverterString.read(buf),
            FfiConverterSequenceUInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: AddressResponse) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterSequenceUInt.allocationSize(value.`path`) +
            FfiConverterString.allocationSize(value.`serializedPath`)
    )

    override fun write(value: AddressResponse, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterSequenceUInt.write(value.`path`, buf)
            FfiConverterString.write(value.`serializedPath`, buf)
    }
}



/**
 * Coin purchase memo
 */
data class CoinPurchaseMemo (
    /**
     * Coin type
     */
    var `coinType`: kotlin.UInt, 
    /**
     * Amount
     */
    var `amount`: kotlin.ULong, 
    /**
     * Address
     */
    var `address`: kotlin.String, 
    /**
     * MAC
     */
    var `mac`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeCoinPurchaseMemo: FfiConverterRustBuffer<CoinPurchaseMemo> {
    override fun read(buf: ByteBuffer): CoinPurchaseMemo {
        return CoinPurchaseMemo(
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: CoinPurchaseMemo) = (
            FfiConverterUInt.allocationSize(value.`coinType`) +
            FfiConverterULong.allocationSize(value.`amount`) +
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`mac`)
    )

    override fun write(value: CoinPurchaseMemo, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`coinType`, buf)
            FfiConverterULong.write(value.`amount`, buf)
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`mac`, buf)
    }
}



/**
 * Common parameters for all Trezor Connect methods
 */
data class CommonParams (
    /**
     * Specific device instance to use
     */
    var `device`: DeviceParams?, 
    /**
     * Set to true if method should use empty passphrase
     */
    var `useEmptyPassphrase`: kotlin.Boolean?, 
    /**
     * Allow seedless device
     */
    var `allowSeedlessDevice`: kotlin.Boolean?, 
    /**
     * Skip final reload
     */
    var `skipFinalReload`: kotlin.Boolean?
) {
    
    companion object
}

public object FfiConverterTypeCommonParams: FfiConverterRustBuffer<CommonParams> {
    override fun read(buf: ByteBuffer): CommonParams {
        return CommonParams(
            FfiConverterOptionalTypeDeviceParams.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CommonParams) = (
            FfiConverterOptionalTypeDeviceParams.allocationSize(value.`device`) +
            FfiConverterOptionalBoolean.allocationSize(value.`useEmptyPassphrase`) +
            FfiConverterOptionalBoolean.allocationSize(value.`allowSeedlessDevice`) +
            FfiConverterOptionalBoolean.allocationSize(value.`skipFinalReload`)
    )

    override fun write(value: CommonParams, buf: ByteBuffer) {
            FfiConverterOptionalTypeDeviceParams.write(value.`device`, buf)
            FfiConverterOptionalBoolean.write(value.`useEmptyPassphrase`, buf)
            FfiConverterOptionalBoolean.write(value.`allowSeedlessDevice`, buf)
            FfiConverterOptionalBoolean.write(value.`skipFinalReload`, buf)
    }
}



/**
 * Account information for compose transaction
 */
data class ComposeAccount (
    /**
     * Derivation path
     */
    var `path`: kotlin.String, 
    /**
     * Account addresses
     */
    var `addresses`: AccountAddresses, 
    /**
     * UTXOs
     */
    var `utxo`: List<AccountUtxo>
) {
    
    companion object
}

public object FfiConverterTypeComposeAccount: FfiConverterRustBuffer<ComposeAccount> {
    override fun read(buf: ByteBuffer): ComposeAccount {
        return ComposeAccount(
            FfiConverterString.read(buf),
            FfiConverterTypeAccountAddresses.read(buf),
            FfiConverterSequenceTypeAccountUtxo.read(buf),
        )
    }

    override fun allocationSize(value: ComposeAccount) = (
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterTypeAccountAddresses.allocationSize(value.`addresses`) +
            FfiConverterSequenceTypeAccountUtxo.allocationSize(value.`utxo`)
    )

    override fun write(value: ComposeAccount, buf: ByteBuffer) {
            FfiConverterString.write(value.`path`, buf)
            FfiConverterTypeAccountAddresses.write(value.`addresses`, buf)
            FfiConverterSequenceTypeAccountUtxo.write(value.`utxo`, buf)
    }
}



data class CreateCjitOptions (
    var `source`: kotlin.String?, 
    var `discountCode`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeCreateCjitOptions: FfiConverterRustBuffer<CreateCjitOptions> {
    override fun read(buf: ByteBuffer): CreateCjitOptions {
        return CreateCjitOptions(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: CreateCjitOptions) = (
            FfiConverterOptionalString.allocationSize(value.`source`) +
            FfiConverterOptionalString.allocationSize(value.`discountCode`)
    )

    override fun write(value: CreateCjitOptions, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`source`, buf)
            FfiConverterOptionalString.write(value.`discountCode`, buf)
    }
}



data class CreateOrderOptions (
    var `clientBalanceSat`: kotlin.ULong, 
    var `lspNodeId`: kotlin.String?, 
    var `couponCode`: kotlin.String, 
    var `source`: kotlin.String?, 
    var `discountCode`: kotlin.String?, 
    var `zeroConf`: kotlin.Boolean, 
    var `zeroConfPayment`: kotlin.Boolean?, 
    var `zeroReserve`: kotlin.Boolean, 
    var `clientNodeId`: kotlin.String?, 
    var `signature`: kotlin.String?, 
    var `timestamp`: kotlin.String?, 
    var `refundOnchainAddress`: kotlin.String?, 
    var `announceChannel`: kotlin.Boolean
) {
    
    companion object
}

public object FfiConverterTypeCreateOrderOptions: FfiConverterRustBuffer<CreateOrderOptions> {
    override fun read(buf: ByteBuffer): CreateOrderOptions {
        return CreateOrderOptions(
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CreateOrderOptions) = (
            FfiConverterULong.allocationSize(value.`clientBalanceSat`) +
            FfiConverterOptionalString.allocationSize(value.`lspNodeId`) +
            FfiConverterString.allocationSize(value.`couponCode`) +
            FfiConverterOptionalString.allocationSize(value.`source`) +
            FfiConverterOptionalString.allocationSize(value.`discountCode`) +
            FfiConverterBoolean.allocationSize(value.`zeroConf`) +
            FfiConverterOptionalBoolean.allocationSize(value.`zeroConfPayment`) +
            FfiConverterBoolean.allocationSize(value.`zeroReserve`) +
            FfiConverterOptionalString.allocationSize(value.`clientNodeId`) +
            FfiConverterOptionalString.allocationSize(value.`signature`) +
            FfiConverterOptionalString.allocationSize(value.`timestamp`) +
            FfiConverterOptionalString.allocationSize(value.`refundOnchainAddress`) +
            FfiConverterBoolean.allocationSize(value.`announceChannel`)
    )

    override fun write(value: CreateOrderOptions, buf: ByteBuffer) {
            FfiConverterULong.write(value.`clientBalanceSat`, buf)
            FfiConverterOptionalString.write(value.`lspNodeId`, buf)
            FfiConverterString.write(value.`couponCode`, buf)
            FfiConverterOptionalString.write(value.`source`, buf)
            FfiConverterOptionalString.write(value.`discountCode`, buf)
            FfiConverterBoolean.write(value.`zeroConf`, buf)
            FfiConverterOptionalBoolean.write(value.`zeroConfPayment`, buf)
            FfiConverterBoolean.write(value.`zeroReserve`, buf)
            FfiConverterOptionalString.write(value.`clientNodeId`, buf)
            FfiConverterOptionalString.write(value.`signature`, buf)
            FfiConverterOptionalString.write(value.`timestamp`, buf)
            FfiConverterOptionalString.write(value.`refundOnchainAddress`, buf)
            FfiConverterBoolean.write(value.`announceChannel`, buf)
    }
}



/**
 * Result type for deep link generation, including the URL and the ID used
 */
data class DeepLinkResult (
    /**
     * The generated deep link URL
     */
    var `url`: kotlin.String, 
    /**
     * The request ID used (either provided or auto-generated)
     */
    var `requestId`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeDeepLinkResult: FfiConverterRustBuffer<DeepLinkResult> {
    override fun read(buf: ByteBuffer): DeepLinkResult {
        return DeepLinkResult(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: DeepLinkResult) = (
            FfiConverterString.allocationSize(value.`url`) +
            FfiConverterString.allocationSize(value.`requestId`)
    )

    override fun write(value: DeepLinkResult, buf: ByteBuffer) {
            FfiConverterString.write(value.`url`, buf)
            FfiConverterString.write(value.`requestId`, buf)
    }
}



/**
 * Parameters for specifying a particular device
 */
data class DeviceParams (
    /**
     * Device instance path
     */
    var `path`: kotlin.String?, 
    /**
     * Device instance ID
     */
    var `instance`: kotlin.UInt?
) {
    
    companion object
}

public object FfiConverterTypeDeviceParams: FfiConverterRustBuffer<DeviceParams> {
    override fun read(buf: ByteBuffer): DeviceParams {
        return DeviceParams(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
        )
    }

    override fun allocationSize(value: DeviceParams) = (
            FfiConverterOptionalString.allocationSize(value.`path`) +
            FfiConverterOptionalUInt.allocationSize(value.`instance`)
    )

    override fun write(value: DeviceParams, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`path`, buf)
            FfiConverterOptionalUInt.write(value.`instance`, buf)
    }
}



data class ErrorData (
    var `errorDetails`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeErrorData: FfiConverterRustBuffer<ErrorData> {
    override fun read(buf: ByteBuffer): ErrorData {
        return ErrorData(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ErrorData) = (
            FfiConverterString.allocationSize(value.`errorDetails`)
    )

    override fun write(value: ErrorData, buf: ByteBuffer) {
            FfiConverterString.write(value.`errorDetails`, buf)
    }
}



/**
 * Feature response containing device capabilities and information
 */
data class FeatureResponse (
    var `vendor`: kotlin.String, 
    var `majorVersion`: kotlin.UInt, 
    var `minorVersion`: kotlin.UInt, 
    var `patchVersion`: kotlin.UInt, 
    var `deviceId`: kotlin.String, 
    var `capabilities`: List<kotlin.String>?
) {
    
    companion object
}

public object FfiConverterTypeFeatureResponse: FfiConverterRustBuffer<FeatureResponse> {
    override fun read(buf: ByteBuffer): FeatureResponse {
        return FeatureResponse(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: FeatureResponse) = (
            FfiConverterString.allocationSize(value.`vendor`) +
            FfiConverterUInt.allocationSize(value.`majorVersion`) +
            FfiConverterUInt.allocationSize(value.`minorVersion`) +
            FfiConverterUInt.allocationSize(value.`patchVersion`) +
            FfiConverterString.allocationSize(value.`deviceId`) +
            FfiConverterOptionalSequenceString.allocationSize(value.`capabilities`)
    )

    override fun write(value: FeatureResponse, buf: ByteBuffer) {
            FfiConverterString.write(value.`vendor`, buf)
            FfiConverterUInt.write(value.`majorVersion`, buf)
            FfiConverterUInt.write(value.`minorVersion`, buf)
            FfiConverterUInt.write(value.`patchVersion`, buf)
            FfiConverterString.write(value.`deviceId`, buf)
            FfiConverterOptionalSequenceString.write(value.`capabilities`, buf)
    }
}



/**
 * Fee level for compose transaction
 */
data class FeeLevel (
    /**
     * Fee per unit (satoshi/byte or satoshi/vbyte)
     */
    var `feePerUnit`: kotlin.String, 
    /**
     * Base fee in satoshi (optional, used in RBF and DOGE)
     */
    var `baseFee`: kotlin.UInt?, 
    /**
     * Floor base fee (optional, used in DOGE)
     */
    var `floorBaseFee`: kotlin.Boolean?
) {
    
    companion object
}

public object FfiConverterTypeFeeLevel: FfiConverterRustBuffer<FeeLevel> {
    override fun read(buf: ByteBuffer): FeeLevel {
        return FeeLevel(
            FfiConverterString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalBoolean.read(buf),
        )
    }

    override fun allocationSize(value: FeeLevel) = (
            FfiConverterString.allocationSize(value.`feePerUnit`) +
            FfiConverterOptionalUInt.allocationSize(value.`baseFee`) +
            FfiConverterOptionalBoolean.allocationSize(value.`floorBaseFee`)
    )

    override fun write(value: FeeLevel, buf: ByteBuffer) {
            FfiConverterString.write(value.`feePerUnit`, buf)
            FfiConverterOptionalUInt.write(value.`baseFee`, buf)
            FfiConverterOptionalBoolean.write(value.`floorBaseFee`, buf)
    }
}



data class FeeRates (
    var `fast`: kotlin.UInt, 
    var `mid`: kotlin.UInt, 
    var `slow`: kotlin.UInt
) {
    
    companion object
}

public object FfiConverterTypeFeeRates: FfiConverterRustBuffer<FeeRates> {
    override fun read(buf: ByteBuffer): FeeRates {
        return FeeRates(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: FeeRates) = (
            FfiConverterUInt.allocationSize(value.`fast`) +
            FfiConverterUInt.allocationSize(value.`mid`) +
            FfiConverterUInt.allocationSize(value.`slow`)
    )

    override fun write(value: FeeRates, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`fast`, buf)
            FfiConverterUInt.write(value.`mid`, buf)
            FfiConverterUInt.write(value.`slow`, buf)
    }
}



data class FundingTx (
    var `id`: kotlin.String, 
    var `vout`: kotlin.ULong
) {
    
    companion object
}

public object FfiConverterTypeFundingTx: FfiConverterRustBuffer<FundingTx> {
    override fun read(buf: ByteBuffer): FundingTx {
        return FundingTx(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: FundingTx) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterULong.allocationSize(value.`vout`)
    )

    override fun write(value: FundingTx, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterULong.write(value.`vout`, buf)
    }
}



data class GetAddressResponse (
    /**
     * The generated Bitcoin address as a string
     */
    var `address`: kotlin.String, 
    /**
     * The derivation path used to generate the address
     */
    var `path`: kotlin.String, 
    /**
     * The hexadecimal representation of the public key
     */
    var `publicKey`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeGetAddressResponse: FfiConverterRustBuffer<GetAddressResponse> {
    override fun read(buf: ByteBuffer): GetAddressResponse {
        return GetAddressResponse(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: GetAddressResponse) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterString.allocationSize(value.`publicKey`)
    )

    override fun write(value: GetAddressResponse, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`path`, buf)
            FfiConverterString.write(value.`publicKey`, buf)
    }
}



data class GetAddressesResponse (
    /**
     * Vector of generated Bitcoin addresses
     */
    var `addresses`: List<GetAddressResponse>
) {
    
    companion object
}

public object FfiConverterTypeGetAddressesResponse: FfiConverterRustBuffer<GetAddressesResponse> {
    override fun read(buf: ByteBuffer): GetAddressesResponse {
        return GetAddressesResponse(
            FfiConverterSequenceTypeGetAddressResponse.read(buf),
        )
    }

    override fun allocationSize(value: GetAddressesResponse) = (
            FfiConverterSequenceTypeGetAddressResponse.allocationSize(value.`addresses`)
    )

    override fun write(value: GetAddressesResponse, buf: ByteBuffer) {
            FfiConverterSequenceTypeGetAddressResponse.write(value.`addresses`, buf)
    }
}



/**
 * HD Node Path Type
 */
data class HdNodePathType (
    /**
     * Node data (can be String or HDNodeType)
     */
    var `node`: HdNodeTypeOrString, 
    /**
     * BIP32 derivation path
     */
    var `addressN`: List<kotlin.UInt>
) {
    
    companion object
}

public object FfiConverterTypeHDNodePathType: FfiConverterRustBuffer<HdNodePathType> {
    override fun read(buf: ByteBuffer): HdNodePathType {
        return HdNodePathType(
            FfiConverterTypeHDNodeTypeOrString.read(buf),
            FfiConverterSequenceUInt.read(buf),
        )
    }

    override fun allocationSize(value: HdNodePathType) = (
            FfiConverterTypeHDNodeTypeOrString.allocationSize(value.`node`) +
            FfiConverterSequenceUInt.allocationSize(value.`addressN`)
    )

    override fun write(value: HdNodePathType, buf: ByteBuffer) {
            FfiConverterTypeHDNodeTypeOrString.write(value.`node`, buf)
            FfiConverterSequenceUInt.write(value.`addressN`, buf)
    }
}



/**
 * HD Node Type
 */
data class HdNodeType (
    /**
     * Depth
     */
    var `depth`: kotlin.UInt, 
    /**
     * Fingerprint
     */
    var `fingerprint`: kotlin.UInt, 
    /**
     * Child number
     */
    var `childNum`: kotlin.UInt, 
    /**
     * Chain code
     */
    var `chainCode`: kotlin.String, 
    /**
     * Public key
     */
    var `publicKey`: kotlin.String, 
    /**
     * Private key (optional)
     */
    var `privateKey`: kotlin.String?, 
    /**
     * BIP32 derivation path (optional)
     */
    var `addressN`: List<kotlin.UInt>?
) {
    
    companion object
}

public object FfiConverterTypeHDNodeType: FfiConverterRustBuffer<HdNodeType> {
    override fun read(buf: ByteBuffer): HdNodeType {
        return HdNodeType(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalSequenceUInt.read(buf),
        )
    }

    override fun allocationSize(value: HdNodeType) = (
            FfiConverterUInt.allocationSize(value.`depth`) +
            FfiConverterUInt.allocationSize(value.`fingerprint`) +
            FfiConverterUInt.allocationSize(value.`childNum`) +
            FfiConverterString.allocationSize(value.`chainCode`) +
            FfiConverterString.allocationSize(value.`publicKey`) +
            FfiConverterOptionalString.allocationSize(value.`privateKey`) +
            FfiConverterOptionalSequenceUInt.allocationSize(value.`addressN`)
    )

    override fun write(value: HdNodeType, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`depth`, buf)
            FfiConverterUInt.write(value.`fingerprint`, buf)
            FfiConverterUInt.write(value.`childNum`, buf)
            FfiConverterString.write(value.`chainCode`, buf)
            FfiConverterString.write(value.`publicKey`, buf)
            FfiConverterOptionalString.write(value.`privateKey`, buf)
            FfiConverterOptionalSequenceUInt.write(value.`addressN`, buf)
    }
}



data class IBt0ConfMinTxFeeWindow (
    var `satPerVbyte`: kotlin.Double, 
    var `validityEndsAt`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIBt0ConfMinTxFeeWindow: FfiConverterRustBuffer<IBt0ConfMinTxFeeWindow> {
    override fun read(buf: ByteBuffer): IBt0ConfMinTxFeeWindow {
        return IBt0ConfMinTxFeeWindow(
            FfiConverterDouble.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IBt0ConfMinTxFeeWindow) = (
            FfiConverterDouble.allocationSize(value.`satPerVbyte`) +
            FfiConverterString.allocationSize(value.`validityEndsAt`)
    )

    override fun write(value: IBt0ConfMinTxFeeWindow, buf: ByteBuffer) {
            FfiConverterDouble.write(value.`satPerVbyte`, buf)
            FfiConverterString.write(value.`validityEndsAt`, buf)
    }
}



data class IBtBolt11Invoice (
    var `request`: kotlin.String, 
    var `state`: BtBolt11InvoiceState, 
    var `expiresAt`: kotlin.String, 
    var `updatedAt`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIBtBolt11Invoice: FfiConverterRustBuffer<IBtBolt11Invoice> {
    override fun read(buf: ByteBuffer): IBtBolt11Invoice {
        return IBtBolt11Invoice(
            FfiConverterString.read(buf),
            FfiConverterTypeBtBolt11InvoiceState.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IBtBolt11Invoice) = (
            FfiConverterString.allocationSize(value.`request`) +
            FfiConverterTypeBtBolt11InvoiceState.allocationSize(value.`state`) +
            FfiConverterString.allocationSize(value.`expiresAt`) +
            FfiConverterString.allocationSize(value.`updatedAt`)
    )

    override fun write(value: IBtBolt11Invoice, buf: ByteBuffer) {
            FfiConverterString.write(value.`request`, buf)
            FfiConverterTypeBtBolt11InvoiceState.write(value.`state`, buf)
            FfiConverterString.write(value.`expiresAt`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
    }
}



data class IBtChannel (
    var `state`: BtOpenChannelState, 
    var `lspNodePubkey`: kotlin.String, 
    var `clientNodePubkey`: kotlin.String, 
    var `announceChannel`: kotlin.Boolean, 
    var `fundingTx`: FundingTx, 
    var `closingTxId`: kotlin.String?, 
    var `close`: IBtChannelClose?, 
    var `shortChannelId`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeIBtChannel: FfiConverterRustBuffer<IBtChannel> {
    override fun read(buf: ByteBuffer): IBtChannel {
        return IBtChannel(
            FfiConverterTypeBtOpenChannelState.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterTypeFundingTx.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeIBtChannelClose.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: IBtChannel) = (
            FfiConverterTypeBtOpenChannelState.allocationSize(value.`state`) +
            FfiConverterString.allocationSize(value.`lspNodePubkey`) +
            FfiConverterString.allocationSize(value.`clientNodePubkey`) +
            FfiConverterBoolean.allocationSize(value.`announceChannel`) +
            FfiConverterTypeFundingTx.allocationSize(value.`fundingTx`) +
            FfiConverterOptionalString.allocationSize(value.`closingTxId`) +
            FfiConverterOptionalTypeIBtChannelClose.allocationSize(value.`close`) +
            FfiConverterOptionalString.allocationSize(value.`shortChannelId`)
    )

    override fun write(value: IBtChannel, buf: ByteBuffer) {
            FfiConverterTypeBtOpenChannelState.write(value.`state`, buf)
            FfiConverterString.write(value.`lspNodePubkey`, buf)
            FfiConverterString.write(value.`clientNodePubkey`, buf)
            FfiConverterBoolean.write(value.`announceChannel`, buf)
            FfiConverterTypeFundingTx.write(value.`fundingTx`, buf)
            FfiConverterOptionalString.write(value.`closingTxId`, buf)
            FfiConverterOptionalTypeIBtChannelClose.write(value.`close`, buf)
            FfiConverterOptionalString.write(value.`shortChannelId`, buf)
    }
}



data class IBtChannelClose (
    var `txId`: kotlin.String, 
    var `closeType`: kotlin.String, 
    var `initiator`: kotlin.String, 
    var `registeredAt`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIBtChannelClose: FfiConverterRustBuffer<IBtChannelClose> {
    override fun read(buf: ByteBuffer): IBtChannelClose {
        return IBtChannelClose(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IBtChannelClose) = (
            FfiConverterString.allocationSize(value.`txId`) +
            FfiConverterString.allocationSize(value.`closeType`) +
            FfiConverterString.allocationSize(value.`initiator`) +
            FfiConverterString.allocationSize(value.`registeredAt`)
    )

    override fun write(value: IBtChannelClose, buf: ByteBuffer) {
            FfiConverterString.write(value.`txId`, buf)
            FfiConverterString.write(value.`closeType`, buf)
            FfiConverterString.write(value.`initiator`, buf)
            FfiConverterString.write(value.`registeredAt`, buf)
    }
}



data class IBtEstimateFeeResponse (
    var `feeSat`: kotlin.ULong, 
    var `min0ConfTxFee`: IBt0ConfMinTxFeeWindow
) {
    
    companion object
}

public object FfiConverterTypeIBtEstimateFeeResponse: FfiConverterRustBuffer<IBtEstimateFeeResponse> {
    override fun read(buf: ByteBuffer): IBtEstimateFeeResponse {
        return IBtEstimateFeeResponse(
            FfiConverterULong.read(buf),
            FfiConverterTypeIBt0ConfMinTxFeeWindow.read(buf),
        )
    }

    override fun allocationSize(value: IBtEstimateFeeResponse) = (
            FfiConverterULong.allocationSize(value.`feeSat`) +
            FfiConverterTypeIBt0ConfMinTxFeeWindow.allocationSize(value.`min0ConfTxFee`)
    )

    override fun write(value: IBtEstimateFeeResponse, buf: ByteBuffer) {
            FfiConverterULong.write(value.`feeSat`, buf)
            FfiConverterTypeIBt0ConfMinTxFeeWindow.write(value.`min0ConfTxFee`, buf)
    }
}



data class IBtEstimateFeeResponse2 (
    var `feeSat`: kotlin.ULong, 
    var `networkFeeSat`: kotlin.ULong, 
    var `serviceFeeSat`: kotlin.ULong, 
    var `min0ConfTxFee`: IBt0ConfMinTxFeeWindow
) {
    
    companion object
}

public object FfiConverterTypeIBtEstimateFeeResponse2: FfiConverterRustBuffer<IBtEstimateFeeResponse2> {
    override fun read(buf: ByteBuffer): IBtEstimateFeeResponse2 {
        return IBtEstimateFeeResponse2(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeIBt0ConfMinTxFeeWindow.read(buf),
        )
    }

    override fun allocationSize(value: IBtEstimateFeeResponse2) = (
            FfiConverterULong.allocationSize(value.`feeSat`) +
            FfiConverterULong.allocationSize(value.`networkFeeSat`) +
            FfiConverterULong.allocationSize(value.`serviceFeeSat`) +
            FfiConverterTypeIBt0ConfMinTxFeeWindow.allocationSize(value.`min0ConfTxFee`)
    )

    override fun write(value: IBtEstimateFeeResponse2, buf: ByteBuffer) {
            FfiConverterULong.write(value.`feeSat`, buf)
            FfiConverterULong.write(value.`networkFeeSat`, buf)
            FfiConverterULong.write(value.`serviceFeeSat`, buf)
            FfiConverterTypeIBt0ConfMinTxFeeWindow.write(value.`min0ConfTxFee`, buf)
    }
}



data class IBtInfo (
    var `version`: kotlin.UInt, 
    var `nodes`: List<ILspNode>, 
    var `options`: IBtInfoOptions, 
    var `versions`: IBtInfoVersions, 
    var `onchain`: IBtInfoOnchain
) {
    
    companion object
}

public object FfiConverterTypeIBtInfo: FfiConverterRustBuffer<IBtInfo> {
    override fun read(buf: ByteBuffer): IBtInfo {
        return IBtInfo(
            FfiConverterUInt.read(buf),
            FfiConverterSequenceTypeILspNode.read(buf),
            FfiConverterTypeIBtInfoOptions.read(buf),
            FfiConverterTypeIBtInfoVersions.read(buf),
            FfiConverterTypeIBtInfoOnchain.read(buf),
        )
    }

    override fun allocationSize(value: IBtInfo) = (
            FfiConverterUInt.allocationSize(value.`version`) +
            FfiConverterSequenceTypeILspNode.allocationSize(value.`nodes`) +
            FfiConverterTypeIBtInfoOptions.allocationSize(value.`options`) +
            FfiConverterTypeIBtInfoVersions.allocationSize(value.`versions`) +
            FfiConverterTypeIBtInfoOnchain.allocationSize(value.`onchain`)
    )

    override fun write(value: IBtInfo, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`version`, buf)
            FfiConverterSequenceTypeILspNode.write(value.`nodes`, buf)
            FfiConverterTypeIBtInfoOptions.write(value.`options`, buf)
            FfiConverterTypeIBtInfoVersions.write(value.`versions`, buf)
            FfiConverterTypeIBtInfoOnchain.write(value.`onchain`, buf)
    }
}



data class IBtInfoOnchain (
    var `network`: BitcoinNetworkEnum, 
    var `feeRates`: FeeRates
) {
    
    companion object
}

public object FfiConverterTypeIBtInfoOnchain: FfiConverterRustBuffer<IBtInfoOnchain> {
    override fun read(buf: ByteBuffer): IBtInfoOnchain {
        return IBtInfoOnchain(
            FfiConverterTypeBitcoinNetworkEnum.read(buf),
            FfiConverterTypeFeeRates.read(buf),
        )
    }

    override fun allocationSize(value: IBtInfoOnchain) = (
            FfiConverterTypeBitcoinNetworkEnum.allocationSize(value.`network`) +
            FfiConverterTypeFeeRates.allocationSize(value.`feeRates`)
    )

    override fun write(value: IBtInfoOnchain, buf: ByteBuffer) {
            FfiConverterTypeBitcoinNetworkEnum.write(value.`network`, buf)
            FfiConverterTypeFeeRates.write(value.`feeRates`, buf)
    }
}



data class IBtInfoOptions (
    var `minChannelSizeSat`: kotlin.ULong, 
    var `maxChannelSizeSat`: kotlin.ULong, 
    var `minExpiryWeeks`: kotlin.UInt, 
    var `maxExpiryWeeks`: kotlin.UInt, 
    var `minPaymentConfirmations`: kotlin.UInt, 
    var `minHighRiskPaymentConfirmations`: kotlin.UInt, 
    var `max0ConfClientBalanceSat`: kotlin.ULong, 
    var `maxClientBalanceSat`: kotlin.ULong
) {
    
    companion object
}

public object FfiConverterTypeIBtInfoOptions: FfiConverterRustBuffer<IBtInfoOptions> {
    override fun read(buf: ByteBuffer): IBtInfoOptions {
        return IBtInfoOptions(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: IBtInfoOptions) = (
            FfiConverterULong.allocationSize(value.`minChannelSizeSat`) +
            FfiConverterULong.allocationSize(value.`maxChannelSizeSat`) +
            FfiConverterUInt.allocationSize(value.`minExpiryWeeks`) +
            FfiConverterUInt.allocationSize(value.`maxExpiryWeeks`) +
            FfiConverterUInt.allocationSize(value.`minPaymentConfirmations`) +
            FfiConverterUInt.allocationSize(value.`minHighRiskPaymentConfirmations`) +
            FfiConverterULong.allocationSize(value.`max0ConfClientBalanceSat`) +
            FfiConverterULong.allocationSize(value.`maxClientBalanceSat`)
    )

    override fun write(value: IBtInfoOptions, buf: ByteBuffer) {
            FfiConverterULong.write(value.`minChannelSizeSat`, buf)
            FfiConverterULong.write(value.`maxChannelSizeSat`, buf)
            FfiConverterUInt.write(value.`minExpiryWeeks`, buf)
            FfiConverterUInt.write(value.`maxExpiryWeeks`, buf)
            FfiConverterUInt.write(value.`minPaymentConfirmations`, buf)
            FfiConverterUInt.write(value.`minHighRiskPaymentConfirmations`, buf)
            FfiConverterULong.write(value.`max0ConfClientBalanceSat`, buf)
            FfiConverterULong.write(value.`maxClientBalanceSat`, buf)
    }
}



data class IBtInfoVersions (
    var `http`: kotlin.String, 
    var `btc`: kotlin.String, 
    var `ln2`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIBtInfoVersions: FfiConverterRustBuffer<IBtInfoVersions> {
    override fun read(buf: ByteBuffer): IBtInfoVersions {
        return IBtInfoVersions(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IBtInfoVersions) = (
            FfiConverterString.allocationSize(value.`http`) +
            FfiConverterString.allocationSize(value.`btc`) +
            FfiConverterString.allocationSize(value.`ln2`)
    )

    override fun write(value: IBtInfoVersions, buf: ByteBuffer) {
            FfiConverterString.write(value.`http`, buf)
            FfiConverterString.write(value.`btc`, buf)
            FfiConverterString.write(value.`ln2`, buf)
    }
}



data class IBtOnchainTransaction (
    var `amountSat`: kotlin.ULong, 
    var `txId`: kotlin.String, 
    var `vout`: kotlin.UInt, 
    var `blockHeight`: kotlin.UInt?, 
    var `blockConfirmationCount`: kotlin.UInt, 
    var `feeRateSatPerVbyte`: kotlin.Double, 
    var `confirmed`: kotlin.Boolean, 
    var `suspicious0ConfReason`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIBtOnchainTransaction: FfiConverterRustBuffer<IBtOnchainTransaction> {
    override fun read(buf: ByteBuffer): IBtOnchainTransaction {
        return IBtOnchainTransaction(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IBtOnchainTransaction) = (
            FfiConverterULong.allocationSize(value.`amountSat`) +
            FfiConverterString.allocationSize(value.`txId`) +
            FfiConverterUInt.allocationSize(value.`vout`) +
            FfiConverterOptionalUInt.allocationSize(value.`blockHeight`) +
            FfiConverterUInt.allocationSize(value.`blockConfirmationCount`) +
            FfiConverterDouble.allocationSize(value.`feeRateSatPerVbyte`) +
            FfiConverterBoolean.allocationSize(value.`confirmed`) +
            FfiConverterString.allocationSize(value.`suspicious0ConfReason`)
    )

    override fun write(value: IBtOnchainTransaction, buf: ByteBuffer) {
            FfiConverterULong.write(value.`amountSat`, buf)
            FfiConverterString.write(value.`txId`, buf)
            FfiConverterUInt.write(value.`vout`, buf)
            FfiConverterOptionalUInt.write(value.`blockHeight`, buf)
            FfiConverterUInt.write(value.`blockConfirmationCount`, buf)
            FfiConverterDouble.write(value.`feeRateSatPerVbyte`, buf)
            FfiConverterBoolean.write(value.`confirmed`, buf)
            FfiConverterString.write(value.`suspicious0ConfReason`, buf)
    }
}



data class IBtOnchainTransactions (
    var `address`: kotlin.String, 
    var `confirmedSat`: kotlin.ULong, 
    var `requiredConfirmations`: kotlin.UInt, 
    var `transactions`: List<IBtOnchainTransaction>
) {
    
    companion object
}

public object FfiConverterTypeIBtOnchainTransactions: FfiConverterRustBuffer<IBtOnchainTransactions> {
    override fun read(buf: ByteBuffer): IBtOnchainTransactions {
        return IBtOnchainTransactions(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterSequenceTypeIBtOnchainTransaction.read(buf),
        )
    }

    override fun allocationSize(value: IBtOnchainTransactions) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterULong.allocationSize(value.`confirmedSat`) +
            FfiConverterUInt.allocationSize(value.`requiredConfirmations`) +
            FfiConverterSequenceTypeIBtOnchainTransaction.allocationSize(value.`transactions`)
    )

    override fun write(value: IBtOnchainTransactions, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterULong.write(value.`confirmedSat`, buf)
            FfiConverterUInt.write(value.`requiredConfirmations`, buf)
            FfiConverterSequenceTypeIBtOnchainTransaction.write(value.`transactions`, buf)
    }
}



data class IBtOrder (
    var `id`: kotlin.String, 
    var `state`: BtOrderState, 
    var `state2`: BtOrderState2, 
    var `feeSat`: kotlin.ULong, 
    var `networkFeeSat`: kotlin.ULong, 
    var `serviceFeeSat`: kotlin.ULong, 
    var `lspBalanceSat`: kotlin.ULong, 
    var `clientBalanceSat`: kotlin.ULong, 
    var `zeroConf`: kotlin.Boolean, 
    var `zeroReserve`: kotlin.Boolean, 
    var `clientNodeId`: kotlin.String?, 
    var `channelExpiryWeeks`: kotlin.UInt, 
    var `channelExpiresAt`: kotlin.String, 
    var `orderExpiresAt`: kotlin.String, 
    var `channel`: IBtChannel?, 
    var `lspNode`: ILspNode, 
    var `lnurl`: kotlin.String?, 
    var `payment`: IBtPayment, 
    var `couponCode`: kotlin.String?, 
    var `source`: kotlin.String?, 
    var `discount`: IDiscount?, 
    var `updatedAt`: kotlin.String, 
    var `createdAt`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIBtOrder: FfiConverterRustBuffer<IBtOrder> {
    override fun read(buf: ByteBuffer): IBtOrder {
        return IBtOrder(
            FfiConverterString.read(buf),
            FfiConverterTypeBtOrderState.read(buf),
            FfiConverterTypeBtOrderState2.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeIBtChannel.read(buf),
            FfiConverterTypeILspNode.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeIBtPayment.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeIDiscount.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IBtOrder) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypeBtOrderState.allocationSize(value.`state`) +
            FfiConverterTypeBtOrderState2.allocationSize(value.`state2`) +
            FfiConverterULong.allocationSize(value.`feeSat`) +
            FfiConverterULong.allocationSize(value.`networkFeeSat`) +
            FfiConverterULong.allocationSize(value.`serviceFeeSat`) +
            FfiConverterULong.allocationSize(value.`lspBalanceSat`) +
            FfiConverterULong.allocationSize(value.`clientBalanceSat`) +
            FfiConverterBoolean.allocationSize(value.`zeroConf`) +
            FfiConverterBoolean.allocationSize(value.`zeroReserve`) +
            FfiConverterOptionalString.allocationSize(value.`clientNodeId`) +
            FfiConverterUInt.allocationSize(value.`channelExpiryWeeks`) +
            FfiConverterString.allocationSize(value.`channelExpiresAt`) +
            FfiConverterString.allocationSize(value.`orderExpiresAt`) +
            FfiConverterOptionalTypeIBtChannel.allocationSize(value.`channel`) +
            FfiConverterTypeILspNode.allocationSize(value.`lspNode`) +
            FfiConverterOptionalString.allocationSize(value.`lnurl`) +
            FfiConverterTypeIBtPayment.allocationSize(value.`payment`) +
            FfiConverterOptionalString.allocationSize(value.`couponCode`) +
            FfiConverterOptionalString.allocationSize(value.`source`) +
            FfiConverterOptionalTypeIDiscount.allocationSize(value.`discount`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterString.allocationSize(value.`createdAt`)
    )

    override fun write(value: IBtOrder, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypeBtOrderState.write(value.`state`, buf)
            FfiConverterTypeBtOrderState2.write(value.`state2`, buf)
            FfiConverterULong.write(value.`feeSat`, buf)
            FfiConverterULong.write(value.`networkFeeSat`, buf)
            FfiConverterULong.write(value.`serviceFeeSat`, buf)
            FfiConverterULong.write(value.`lspBalanceSat`, buf)
            FfiConverterULong.write(value.`clientBalanceSat`, buf)
            FfiConverterBoolean.write(value.`zeroConf`, buf)
            FfiConverterBoolean.write(value.`zeroReserve`, buf)
            FfiConverterOptionalString.write(value.`clientNodeId`, buf)
            FfiConverterUInt.write(value.`channelExpiryWeeks`, buf)
            FfiConverterString.write(value.`channelExpiresAt`, buf)
            FfiConverterString.write(value.`orderExpiresAt`, buf)
            FfiConverterOptionalTypeIBtChannel.write(value.`channel`, buf)
            FfiConverterTypeILspNode.write(value.`lspNode`, buf)
            FfiConverterOptionalString.write(value.`lnurl`, buf)
            FfiConverterTypeIBtPayment.write(value.`payment`, buf)
            FfiConverterOptionalString.write(value.`couponCode`, buf)
            FfiConverterOptionalString.write(value.`source`, buf)
            FfiConverterOptionalTypeIDiscount.write(value.`discount`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
    }
}



data class IBtPayment (
    var `state`: BtPaymentState, 
    var `state2`: BtPaymentState2, 
    var `paidSat`: kotlin.ULong, 
    var `bolt11Invoice`: IBtBolt11Invoice, 
    var `onchain`: IBtOnchainTransactions, 
    var `isManuallyPaid`: kotlin.Boolean?, 
    var `manualRefunds`: List<IManualRefund>?
) {
    
    companion object
}

public object FfiConverterTypeIBtPayment: FfiConverterRustBuffer<IBtPayment> {
    override fun read(buf: ByteBuffer): IBtPayment {
        return IBtPayment(
            FfiConverterTypeBtPaymentState.read(buf),
            FfiConverterTypeBtPaymentState2.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeIBtBolt11Invoice.read(buf),
            FfiConverterTypeIBtOnchainTransactions.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalSequenceTypeIManualRefund.read(buf),
        )
    }

    override fun allocationSize(value: IBtPayment) = (
            FfiConverterTypeBtPaymentState.allocationSize(value.`state`) +
            FfiConverterTypeBtPaymentState2.allocationSize(value.`state2`) +
            FfiConverterULong.allocationSize(value.`paidSat`) +
            FfiConverterTypeIBtBolt11Invoice.allocationSize(value.`bolt11Invoice`) +
            FfiConverterTypeIBtOnchainTransactions.allocationSize(value.`onchain`) +
            FfiConverterOptionalBoolean.allocationSize(value.`isManuallyPaid`) +
            FfiConverterOptionalSequenceTypeIManualRefund.allocationSize(value.`manualRefunds`)
    )

    override fun write(value: IBtPayment, buf: ByteBuffer) {
            FfiConverterTypeBtPaymentState.write(value.`state`, buf)
            FfiConverterTypeBtPaymentState2.write(value.`state2`, buf)
            FfiConverterULong.write(value.`paidSat`, buf)
            FfiConverterTypeIBtBolt11Invoice.write(value.`bolt11Invoice`, buf)
            FfiConverterTypeIBtOnchainTransactions.write(value.`onchain`, buf)
            FfiConverterOptionalBoolean.write(value.`isManuallyPaid`, buf)
            FfiConverterOptionalSequenceTypeIManualRefund.write(value.`manualRefunds`, buf)
    }
}



data class IcJitEntry (
    var `id`: kotlin.String, 
    var `state`: CJitStateEnum, 
    var `feeSat`: kotlin.ULong, 
    var `networkFeeSat`: kotlin.ULong, 
    var `serviceFeeSat`: kotlin.ULong, 
    var `channelSizeSat`: kotlin.ULong, 
    var `channelExpiryWeeks`: kotlin.UInt, 
    var `channelOpenError`: kotlin.String?, 
    var `nodeId`: kotlin.String, 
    var `invoice`: IBtBolt11Invoice, 
    var `channel`: IBtChannel?, 
    var `lspNode`: ILspNode, 
    var `couponCode`: kotlin.String, 
    var `source`: kotlin.String?, 
    var `discount`: IDiscount?, 
    var `expiresAt`: kotlin.String, 
    var `updatedAt`: kotlin.String, 
    var `createdAt`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeICJitEntry: FfiConverterRustBuffer<IcJitEntry> {
    override fun read(buf: ByteBuffer): IcJitEntry {
        return IcJitEntry(
            FfiConverterString.read(buf),
            FfiConverterTypeCJitStateEnum.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeIBtBolt11Invoice.read(buf),
            FfiConverterOptionalTypeIBtChannel.read(buf),
            FfiConverterTypeILspNode.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeIDiscount.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IcJitEntry) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypeCJitStateEnum.allocationSize(value.`state`) +
            FfiConverterULong.allocationSize(value.`feeSat`) +
            FfiConverterULong.allocationSize(value.`networkFeeSat`) +
            FfiConverterULong.allocationSize(value.`serviceFeeSat`) +
            FfiConverterULong.allocationSize(value.`channelSizeSat`) +
            FfiConverterUInt.allocationSize(value.`channelExpiryWeeks`) +
            FfiConverterOptionalString.allocationSize(value.`channelOpenError`) +
            FfiConverterString.allocationSize(value.`nodeId`) +
            FfiConverterTypeIBtBolt11Invoice.allocationSize(value.`invoice`) +
            FfiConverterOptionalTypeIBtChannel.allocationSize(value.`channel`) +
            FfiConverterTypeILspNode.allocationSize(value.`lspNode`) +
            FfiConverterString.allocationSize(value.`couponCode`) +
            FfiConverterOptionalString.allocationSize(value.`source`) +
            FfiConverterOptionalTypeIDiscount.allocationSize(value.`discount`) +
            FfiConverterString.allocationSize(value.`expiresAt`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterString.allocationSize(value.`createdAt`)
    )

    override fun write(value: IcJitEntry, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypeCJitStateEnum.write(value.`state`, buf)
            FfiConverterULong.write(value.`feeSat`, buf)
            FfiConverterULong.write(value.`networkFeeSat`, buf)
            FfiConverterULong.write(value.`serviceFeeSat`, buf)
            FfiConverterULong.write(value.`channelSizeSat`, buf)
            FfiConverterUInt.write(value.`channelExpiryWeeks`, buf)
            FfiConverterOptionalString.write(value.`channelOpenError`, buf)
            FfiConverterString.write(value.`nodeId`, buf)
            FfiConverterTypeIBtBolt11Invoice.write(value.`invoice`, buf)
            FfiConverterOptionalTypeIBtChannel.write(value.`channel`, buf)
            FfiConverterTypeILspNode.write(value.`lspNode`, buf)
            FfiConverterString.write(value.`couponCode`, buf)
            FfiConverterOptionalString.write(value.`source`, buf)
            FfiConverterOptionalTypeIDiscount.write(value.`discount`, buf)
            FfiConverterString.write(value.`expiresAt`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
    }
}



data class IDiscount (
    var `code`: kotlin.String, 
    var `absoluteSat`: kotlin.ULong, 
    var `relative`: kotlin.Double, 
    var `overallSat`: kotlin.ULong
) {
    
    companion object
}

public object FfiConverterTypeIDiscount: FfiConverterRustBuffer<IDiscount> {
    override fun read(buf: ByteBuffer): IDiscount {
        return IDiscount(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: IDiscount) = (
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterULong.allocationSize(value.`absoluteSat`) +
            FfiConverterDouble.allocationSize(value.`relative`) +
            FfiConverterULong.allocationSize(value.`overallSat`)
    )

    override fun write(value: IDiscount, buf: ByteBuffer) {
            FfiConverterString.write(value.`code`, buf)
            FfiConverterULong.write(value.`absoluteSat`, buf)
            FfiConverterDouble.write(value.`relative`, buf)
            FfiConverterULong.write(value.`overallSat`, buf)
    }
}



data class IGift (
    var `id`: kotlin.String, 
    var `nodeId`: kotlin.String, 
    var `orderId`: kotlin.String?, 
    var `order`: IBtOrder?, 
    var `bolt11PaymentId`: kotlin.String?, 
    var `bolt11Payment`: IBtPayment?, 
    var `appliedGiftCodeId`: kotlin.String, 
    var `appliedGiftCode`: IGiftCode?
) {
    
    companion object
}

public object FfiConverterTypeIGift: FfiConverterRustBuffer<IGift> {
    override fun read(buf: ByteBuffer): IGift {
        return IGift(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeIBtOrder.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeIBtPayment.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeIGiftCode.read(buf),
        )
    }

    override fun allocationSize(value: IGift) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`nodeId`) +
            FfiConverterOptionalString.allocationSize(value.`orderId`) +
            FfiConverterOptionalTypeIBtOrder.allocationSize(value.`order`) +
            FfiConverterOptionalString.allocationSize(value.`bolt11PaymentId`) +
            FfiConverterOptionalTypeIBtPayment.allocationSize(value.`bolt11Payment`) +
            FfiConverterString.allocationSize(value.`appliedGiftCodeId`) +
            FfiConverterOptionalTypeIGiftCode.allocationSize(value.`appliedGiftCode`)
    )

    override fun write(value: IGift, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`nodeId`, buf)
            FfiConverterOptionalString.write(value.`orderId`, buf)
            FfiConverterOptionalTypeIBtOrder.write(value.`order`, buf)
            FfiConverterOptionalString.write(value.`bolt11PaymentId`, buf)
            FfiConverterOptionalTypeIBtPayment.write(value.`bolt11Payment`, buf)
            FfiConverterString.write(value.`appliedGiftCodeId`, buf)
            FfiConverterOptionalTypeIGiftCode.write(value.`appliedGiftCode`, buf)
    }
}



data class IGiftCode (
    var `id`: kotlin.String, 
    var `code`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIGiftCode: FfiConverterRustBuffer<IGiftCode> {
    override fun read(buf: ByteBuffer): IGiftCode {
        return IGiftCode(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IGiftCode) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`code`)
    )

    override fun write(value: IGiftCode, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`code`, buf)
    }
}



data class ILspNode (
    var `alias`: kotlin.String, 
    var `pubkey`: kotlin.String, 
    var `connectionStrings`: List<kotlin.String>, 
    var `readonly`: kotlin.Boolean?
) {
    
    companion object
}

public object FfiConverterTypeILspNode: FfiConverterRustBuffer<ILspNode> {
    override fun read(buf: ByteBuffer): ILspNode {
        return ILspNode(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
        )
    }

    override fun allocationSize(value: ILspNode) = (
            FfiConverterString.allocationSize(value.`alias`) +
            FfiConverterString.allocationSize(value.`pubkey`) +
            FfiConverterSequenceString.allocationSize(value.`connectionStrings`) +
            FfiConverterOptionalBoolean.allocationSize(value.`readonly`)
    )

    override fun write(value: ILspNode, buf: ByteBuffer) {
            FfiConverterString.write(value.`alias`, buf)
            FfiConverterString.write(value.`pubkey`, buf)
            FfiConverterSequenceString.write(value.`connectionStrings`, buf)
            FfiConverterOptionalBoolean.write(value.`readonly`, buf)
    }
}



data class IManualRefund (
    var `amountSat`: kotlin.ULong, 
    var `target`: kotlin.String, 
    var `state`: ManualRefundStateEnum, 
    var `createdByName`: kotlin.String, 
    var `votedByName`: kotlin.String?, 
    var `reason`: kotlin.String?, 
    var `targetType`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeIManualRefund: FfiConverterRustBuffer<IManualRefund> {
    override fun read(buf: ByteBuffer): IManualRefund {
        return IManualRefund(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeManualRefundStateEnum.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: IManualRefund) = (
            FfiConverterULong.allocationSize(value.`amountSat`) +
            FfiConverterString.allocationSize(value.`target`) +
            FfiConverterTypeManualRefundStateEnum.allocationSize(value.`state`) +
            FfiConverterString.allocationSize(value.`createdByName`) +
            FfiConverterOptionalString.allocationSize(value.`votedByName`) +
            FfiConverterOptionalString.allocationSize(value.`reason`) +
            FfiConverterString.allocationSize(value.`targetType`)
    )

    override fun write(value: IManualRefund, buf: ByteBuffer) {
            FfiConverterULong.write(value.`amountSat`, buf)
            FfiConverterString.write(value.`target`, buf)
            FfiConverterTypeManualRefundStateEnum.write(value.`state`, buf)
            FfiConverterString.write(value.`createdByName`, buf)
            FfiConverterOptionalString.write(value.`votedByName`, buf)
            FfiConverterOptionalString.write(value.`reason`, buf)
            FfiConverterString.write(value.`targetType`, buf)
    }
}



data class LightningActivity (
    var `id`: kotlin.String, 
    var `txType`: PaymentType, 
    var `status`: PaymentState, 
    var `value`: kotlin.ULong, 
    var `fee`: kotlin.ULong?, 
    var `invoice`: kotlin.String, 
    var `message`: kotlin.String, 
    var `timestamp`: kotlin.ULong, 
    var `preimage`: kotlin.String?, 
    var `createdAt`: kotlin.ULong?, 
    var `updatedAt`: kotlin.ULong?
) {
    
    companion object
}

public object FfiConverterTypeLightningActivity: FfiConverterRustBuffer<LightningActivity> {
    override fun read(buf: ByteBuffer): LightningActivity {
        return LightningActivity(
            FfiConverterString.read(buf),
            FfiConverterTypePaymentType.read(buf),
            FfiConverterTypePaymentState.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: LightningActivity) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypePaymentType.allocationSize(value.`txType`) +
            FfiConverterTypePaymentState.allocationSize(value.`status`) +
            FfiConverterULong.allocationSize(value.`value`) +
            FfiConverterOptionalULong.allocationSize(value.`fee`) +
            FfiConverterString.allocationSize(value.`invoice`) +
            FfiConverterString.allocationSize(value.`message`) +
            FfiConverterULong.allocationSize(value.`timestamp`) +
            FfiConverterOptionalString.allocationSize(value.`preimage`) +
            FfiConverterOptionalULong.allocationSize(value.`createdAt`) +
            FfiConverterOptionalULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: LightningActivity, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypePaymentType.write(value.`txType`, buf)
            FfiConverterTypePaymentState.write(value.`status`, buf)
            FfiConverterULong.write(value.`value`, buf)
            FfiConverterOptionalULong.write(value.`fee`, buf)
            FfiConverterString.write(value.`invoice`, buf)
            FfiConverterString.write(value.`message`, buf)
            FfiConverterULong.write(value.`timestamp`, buf)
            FfiConverterOptionalString.write(value.`preimage`, buf)
            FfiConverterOptionalULong.write(value.`createdAt`, buf)
            FfiConverterOptionalULong.write(value.`updatedAt`, buf)
    }
}



data class LightningInvoice (
    var `bolt11`: kotlin.String, 
    var `paymentHash`: kotlin.ByteArray, 
    var `amountSatoshis`: kotlin.ULong, 
    var `timestampSeconds`: kotlin.ULong, 
    var `expirySeconds`: kotlin.ULong, 
    var `isExpired`: kotlin.Boolean, 
    var `description`: kotlin.String?, 
    var `networkType`: NetworkType, 
    var `payeeNodeId`: kotlin.ByteArray?
) {
    
    companion object
}

public object FfiConverterTypeLightningInvoice: FfiConverterRustBuffer<LightningInvoice> {
    override fun read(buf: ByteBuffer): LightningInvoice {
        return LightningInvoice(
            FfiConverterString.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeNetworkType.read(buf),
            FfiConverterOptionalByteArray.read(buf),
        )
    }

    override fun allocationSize(value: LightningInvoice) = (
            FfiConverterString.allocationSize(value.`bolt11`) +
            FfiConverterByteArray.allocationSize(value.`paymentHash`) +
            FfiConverterULong.allocationSize(value.`amountSatoshis`) +
            FfiConverterULong.allocationSize(value.`timestampSeconds`) +
            FfiConverterULong.allocationSize(value.`expirySeconds`) +
            FfiConverterBoolean.allocationSize(value.`isExpired`) +
            FfiConverterOptionalString.allocationSize(value.`description`) +
            FfiConverterTypeNetworkType.allocationSize(value.`networkType`) +
            FfiConverterOptionalByteArray.allocationSize(value.`payeeNodeId`)
    )

    override fun write(value: LightningInvoice, buf: ByteBuffer) {
            FfiConverterString.write(value.`bolt11`, buf)
            FfiConverterByteArray.write(value.`paymentHash`, buf)
            FfiConverterULong.write(value.`amountSatoshis`, buf)
            FfiConverterULong.write(value.`timestampSeconds`, buf)
            FfiConverterULong.write(value.`expirySeconds`, buf)
            FfiConverterBoolean.write(value.`isExpired`, buf)
            FfiConverterOptionalString.write(value.`description`, buf)
            FfiConverterTypeNetworkType.write(value.`networkType`, buf)
            FfiConverterOptionalByteArray.write(value.`payeeNodeId`, buf)
    }
}



data class LnurlAddressData (
    var `uri`: kotlin.String, 
    var `domain`: kotlin.String, 
    var `username`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlAddressData: FfiConverterRustBuffer<LnurlAddressData> {
    override fun read(buf: ByteBuffer): LnurlAddressData {
        return LnurlAddressData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlAddressData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`domain`) +
            FfiConverterString.allocationSize(value.`username`)
    )

    override fun write(value: LnurlAddressData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`domain`, buf)
            FfiConverterString.write(value.`username`, buf)
    }
}



data class LnurlAuthData (
    var `uri`: kotlin.String, 
    var `tag`: kotlin.String, 
    var `k1`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlAuthData: FfiConverterRustBuffer<LnurlAuthData> {
    override fun read(buf: ByteBuffer): LnurlAuthData {
        return LnurlAuthData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlAuthData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`tag`) +
            FfiConverterString.allocationSize(value.`k1`)
    )

    override fun write(value: LnurlAuthData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`tag`, buf)
            FfiConverterString.write(value.`k1`, buf)
    }
}



data class LnurlChannelData (
    var `uri`: kotlin.String, 
    var `callback`: kotlin.String, 
    var `k1`: kotlin.String, 
    var `tag`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlChannelData: FfiConverterRustBuffer<LnurlChannelData> {
    override fun read(buf: ByteBuffer): LnurlChannelData {
        return LnurlChannelData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlChannelData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterString.allocationSize(value.`k1`) +
            FfiConverterString.allocationSize(value.`tag`)
    )

    override fun write(value: LnurlChannelData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterString.write(value.`k1`, buf)
            FfiConverterString.write(value.`tag`, buf)
    }
}



data class LnurlPayData (
    var `uri`: kotlin.String, 
    var `callback`: kotlin.String, 
    var `minSendable`: kotlin.ULong, 
    var `maxSendable`: kotlin.ULong, 
    var `metadataStr`: kotlin.String, 
    var `commentAllowed`: kotlin.UInt?, 
    var `allowsNostr`: kotlin.Boolean, 
    var `nostrPubkey`: kotlin.ByteArray?
) {
    
    companion object
}

public object FfiConverterTypeLnurlPayData: FfiConverterRustBuffer<LnurlPayData> {
    override fun read(buf: ByteBuffer): LnurlPayData {
        return LnurlPayData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalByteArray.read(buf),
        )
    }

    override fun allocationSize(value: LnurlPayData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterULong.allocationSize(value.`minSendable`) +
            FfiConverterULong.allocationSize(value.`maxSendable`) +
            FfiConverterString.allocationSize(value.`metadataStr`) +
            FfiConverterOptionalUInt.allocationSize(value.`commentAllowed`) +
            FfiConverterBoolean.allocationSize(value.`allowsNostr`) +
            FfiConverterOptionalByteArray.allocationSize(value.`nostrPubkey`)
    )

    override fun write(value: LnurlPayData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterULong.write(value.`minSendable`, buf)
            FfiConverterULong.write(value.`maxSendable`, buf)
            FfiConverterString.write(value.`metadataStr`, buf)
            FfiConverterOptionalUInt.write(value.`commentAllowed`, buf)
            FfiConverterBoolean.write(value.`allowsNostr`, buf)
            FfiConverterOptionalByteArray.write(value.`nostrPubkey`, buf)
    }
}



data class LnurlWithdrawData (
    var `uri`: kotlin.String, 
    var `callback`: kotlin.String, 
    var `k1`: kotlin.String, 
    var `defaultDescription`: kotlin.String, 
    var `minWithdrawable`: kotlin.ULong?, 
    var `maxWithdrawable`: kotlin.ULong, 
    var `tag`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeLnurlWithdrawData: FfiConverterRustBuffer<LnurlWithdrawData> {
    override fun read(buf: ByteBuffer): LnurlWithdrawData {
        return LnurlWithdrawData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: LnurlWithdrawData) = (
            FfiConverterString.allocationSize(value.`uri`) +
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterString.allocationSize(value.`k1`) +
            FfiConverterString.allocationSize(value.`defaultDescription`) +
            FfiConverterOptionalULong.allocationSize(value.`minWithdrawable`) +
            FfiConverterULong.allocationSize(value.`maxWithdrawable`) +
            FfiConverterString.allocationSize(value.`tag`)
    )

    override fun write(value: LnurlWithdrawData, buf: ByteBuffer) {
            FfiConverterString.write(value.`uri`, buf)
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterString.write(value.`k1`, buf)
            FfiConverterString.write(value.`defaultDescription`, buf)
            FfiConverterOptionalULong.write(value.`minWithdrawable`, buf)
            FfiConverterULong.write(value.`maxWithdrawable`, buf)
            FfiConverterString.write(value.`tag`, buf)
    }
}



/**
 * Message signature response
 */
data class MessageSignatureResponse (
    /**
     * Signer address
     */
    var `address`: kotlin.String, 
    /**
     * Signature in base64 format
     */
    var `signature`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeMessageSignatureResponse: FfiConverterRustBuffer<MessageSignatureResponse> {
    override fun read(buf: ByteBuffer): MessageSignatureResponse {
        return MessageSignatureResponse(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: MessageSignatureResponse) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`signature`)
    )

    override fun write(value: MessageSignatureResponse, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`signature`, buf)
    }
}



/**
 * Multisig Redeem Script Type
 */
data class MultisigRedeemScriptType (
    /**
     * Public keys
     */
    var `pubkeys`: List<HdNodePathType>, 
    /**
     * Signatures
     */
    var `signatures`: List<kotlin.String>, 
    /**
     * M-of-N threshold
     */
    var `m`: kotlin.UInt, 
    /**
     * Nodes (optional)
     */
    var `nodes`: List<HdNodeType>?, 
    /**
     * Pubkeys order (optional): 0 for PRESERVED, 1 for LEXICOGRAPHIC
     */
    var `pubkeysOrder`: kotlin.UByte?
) {
    
    companion object
}

public object FfiConverterTypeMultisigRedeemScriptType: FfiConverterRustBuffer<MultisigRedeemScriptType> {
    override fun read(buf: ByteBuffer): MultisigRedeemScriptType {
        return MultisigRedeemScriptType(
            FfiConverterSequenceTypeHDNodePathType.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterOptionalSequenceTypeHDNodeType.read(buf),
            FfiConverterOptionalUByte.read(buf),
        )
    }

    override fun allocationSize(value: MultisigRedeemScriptType) = (
            FfiConverterSequenceTypeHDNodePathType.allocationSize(value.`pubkeys`) +
            FfiConverterSequenceString.allocationSize(value.`signatures`) +
            FfiConverterUInt.allocationSize(value.`m`) +
            FfiConverterOptionalSequenceTypeHDNodeType.allocationSize(value.`nodes`) +
            FfiConverterOptionalUByte.allocationSize(value.`pubkeysOrder`)
    )

    override fun write(value: MultisigRedeemScriptType, buf: ByteBuffer) {
            FfiConverterSequenceTypeHDNodePathType.write(value.`pubkeys`, buf)
            FfiConverterSequenceString.write(value.`signatures`, buf)
            FfiConverterUInt.write(value.`m`, buf)
            FfiConverterOptionalSequenceTypeHDNodeType.write(value.`nodes`, buf)
            FfiConverterOptionalUByte.write(value.`pubkeysOrder`, buf)
    }
}



data class OnChainInvoice (
    var `address`: kotlin.String, 
    var `amountSatoshis`: kotlin.ULong, 
    var `label`: kotlin.String?, 
    var `message`: kotlin.String?, 
    var `params`: Map<kotlin.String, kotlin.String>?
) {
    
    companion object
}

public object FfiConverterTypeOnChainInvoice: FfiConverterRustBuffer<OnChainInvoice> {
    override fun read(buf: ByteBuffer): OnChainInvoice {
        return OnChainInvoice(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalMapStringString.read(buf),
        )
    }

    override fun allocationSize(value: OnChainInvoice) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterULong.allocationSize(value.`amountSatoshis`) +
            FfiConverterOptionalString.allocationSize(value.`label`) +
            FfiConverterOptionalString.allocationSize(value.`message`) +
            FfiConverterOptionalMapStringString.allocationSize(value.`params`)
    )

    override fun write(value: OnChainInvoice, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterULong.write(value.`amountSatoshis`, buf)
            FfiConverterOptionalString.write(value.`label`, buf)
            FfiConverterOptionalString.write(value.`message`, buf)
            FfiConverterOptionalMapStringString.write(value.`params`, buf)
    }
}



data class OnchainActivity (
    var `id`: kotlin.String, 
    var `txType`: PaymentType, 
    var `txId`: kotlin.String, 
    var `value`: kotlin.ULong, 
    var `fee`: kotlin.ULong, 
    var `feeRate`: kotlin.ULong, 
    var `address`: kotlin.String, 
    var `confirmed`: kotlin.Boolean, 
    var `timestamp`: kotlin.ULong, 
    var `isBoosted`: kotlin.Boolean, 
    var `isTransfer`: kotlin.Boolean, 
    var `doesExist`: kotlin.Boolean, 
    var `confirmTimestamp`: kotlin.ULong?, 
    var `channelId`: kotlin.String?, 
    var `transferTxId`: kotlin.String?, 
    var `createdAt`: kotlin.ULong?, 
    var `updatedAt`: kotlin.ULong?
) {
    
    companion object
}

public object FfiConverterTypeOnchainActivity: FfiConverterRustBuffer<OnchainActivity> {
    override fun read(buf: ByteBuffer): OnchainActivity {
        return OnchainActivity(
            FfiConverterString.read(buf),
            FfiConverterTypePaymentType.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: OnchainActivity) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypePaymentType.allocationSize(value.`txType`) +
            FfiConverterString.allocationSize(value.`txId`) +
            FfiConverterULong.allocationSize(value.`value`) +
            FfiConverterULong.allocationSize(value.`fee`) +
            FfiConverterULong.allocationSize(value.`feeRate`) +
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterBoolean.allocationSize(value.`confirmed`) +
            FfiConverterULong.allocationSize(value.`timestamp`) +
            FfiConverterBoolean.allocationSize(value.`isBoosted`) +
            FfiConverterBoolean.allocationSize(value.`isTransfer`) +
            FfiConverterBoolean.allocationSize(value.`doesExist`) +
            FfiConverterOptionalULong.allocationSize(value.`confirmTimestamp`) +
            FfiConverterOptionalString.allocationSize(value.`channelId`) +
            FfiConverterOptionalString.allocationSize(value.`transferTxId`) +
            FfiConverterOptionalULong.allocationSize(value.`createdAt`) +
            FfiConverterOptionalULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: OnchainActivity, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypePaymentType.write(value.`txType`, buf)
            FfiConverterString.write(value.`txId`, buf)
            FfiConverterULong.write(value.`value`, buf)
            FfiConverterULong.write(value.`fee`, buf)
            FfiConverterULong.write(value.`feeRate`, buf)
            FfiConverterString.write(value.`address`, buf)
            FfiConverterBoolean.write(value.`confirmed`, buf)
            FfiConverterULong.write(value.`timestamp`, buf)
            FfiConverterBoolean.write(value.`isBoosted`, buf)
            FfiConverterBoolean.write(value.`isTransfer`, buf)
            FfiConverterBoolean.write(value.`doesExist`, buf)
            FfiConverterOptionalULong.write(value.`confirmTimestamp`, buf)
            FfiConverterOptionalString.write(value.`channelId`, buf)
            FfiConverterOptionalString.write(value.`transferTxId`, buf)
            FfiConverterOptionalULong.write(value.`createdAt`, buf)
            FfiConverterOptionalULong.write(value.`updatedAt`, buf)
    }
}



/**
 * Payment request memo types
 */
data class PaymentRequestMemo (
    /**
     * Text memo
     */
    var `textMemo`: TextMemo?, 
    /**
     * Refund memo
     */
    var `refundMemo`: RefundMemo?, 
    /**
     * Coin purchase memo
     */
    var `coinPurchaseMemo`: CoinPurchaseMemo?
) {
    
    companion object
}

public object FfiConverterTypePaymentRequestMemo: FfiConverterRustBuffer<PaymentRequestMemo> {
    override fun read(buf: ByteBuffer): PaymentRequestMemo {
        return PaymentRequestMemo(
            FfiConverterOptionalTypeTextMemo.read(buf),
            FfiConverterOptionalTypeRefundMemo.read(buf),
            FfiConverterOptionalTypeCoinPurchaseMemo.read(buf),
        )
    }

    override fun allocationSize(value: PaymentRequestMemo) = (
            FfiConverterOptionalTypeTextMemo.allocationSize(value.`textMemo`) +
            FfiConverterOptionalTypeRefundMemo.allocationSize(value.`refundMemo`) +
            FfiConverterOptionalTypeCoinPurchaseMemo.allocationSize(value.`coinPurchaseMemo`)
    )

    override fun write(value: PaymentRequestMemo, buf: ByteBuffer) {
            FfiConverterOptionalTypeTextMemo.write(value.`textMemo`, buf)
            FfiConverterOptionalTypeRefundMemo.write(value.`refundMemo`, buf)
            FfiConverterOptionalTypeCoinPurchaseMemo.write(value.`coinPurchaseMemo`, buf)
    }
}



/**
 * Precomposed transaction input
 */
data class PrecomposedInput (
    /**
     * BIP32 derivation path
     */
    var `addressN`: List<kotlin.UInt>, 
    /**
     * Amount in satoshis
     */
    var `amount`: kotlin.String, 
    /**
     * Previous transaction hash
     */
    var `prevHash`: kotlin.String, 
    /**
     * Previous output index
     */
    var `prevIndex`: kotlin.UInt, 
    /**
     * Script type
     */
    var `scriptType`: ScriptType
) {
    
    companion object
}

public object FfiConverterTypePrecomposedInput: FfiConverterRustBuffer<PrecomposedInput> {
    override fun read(buf: ByteBuffer): PrecomposedInput {
        return PrecomposedInput(
            FfiConverterSequenceUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTypeScriptType.read(buf),
        )
    }

    override fun allocationSize(value: PrecomposedInput) = (
            FfiConverterSequenceUInt.allocationSize(value.`addressN`) +
            FfiConverterString.allocationSize(value.`amount`) +
            FfiConverterString.allocationSize(value.`prevHash`) +
            FfiConverterUInt.allocationSize(value.`prevIndex`) +
            FfiConverterTypeScriptType.allocationSize(value.`scriptType`)
    )

    override fun write(value: PrecomposedInput, buf: ByteBuffer) {
            FfiConverterSequenceUInt.write(value.`addressN`, buf)
            FfiConverterString.write(value.`amount`, buf)
            FfiConverterString.write(value.`prevHash`, buf)
            FfiConverterUInt.write(value.`prevIndex`, buf)
            FfiConverterTypeScriptType.write(value.`scriptType`, buf)
    }
}



/**
 * Precomposed transaction output
 */
data class PrecomposedOutput (
    /**
     * BIP32 derivation path (for change outputs)
     */
    var `addressN`: List<kotlin.UInt>?, 
    /**
     * Amount in satoshis
     */
    var `amount`: kotlin.String, 
    /**
     * Address (for regular outputs)
     */
    var `address`: kotlin.String?, 
    /**
     * Script type
     */
    var `scriptType`: ScriptType
) {
    
    companion object
}

public object FfiConverterTypePrecomposedOutput: FfiConverterRustBuffer<PrecomposedOutput> {
    override fun read(buf: ByteBuffer): PrecomposedOutput {
        return PrecomposedOutput(
            FfiConverterOptionalSequenceUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeScriptType.read(buf),
        )
    }

    override fun allocationSize(value: PrecomposedOutput) = (
            FfiConverterOptionalSequenceUInt.allocationSize(value.`addressN`) +
            FfiConverterString.allocationSize(value.`amount`) +
            FfiConverterOptionalString.allocationSize(value.`address`) +
            FfiConverterTypeScriptType.allocationSize(value.`scriptType`)
    )

    override fun write(value: PrecomposedOutput, buf: ByteBuffer) {
            FfiConverterOptionalSequenceUInt.write(value.`addressN`, buf)
            FfiConverterString.write(value.`amount`, buf)
            FfiConverterOptionalString.write(value.`address`, buf)
            FfiConverterTypeScriptType.write(value.`scriptType`, buf)
    }
}



/**
 * Precomposed transaction
 */
data class PrecomposedTransaction (
    /**
     * Transaction type (usually "final" or "error")
     */
    var `txType`: kotlin.String, 
    /**
     * Total amount spent (including fee)
     */
    var `totalSpent`: kotlin.String?, 
    /**
     * Transaction fee
     */
    var `fee`: kotlin.String?, 
    /**
     * Fee per byte
     */
    var `feePerByte`: kotlin.String?, 
    /**
     * Transaction size in bytes
     */
    var `bytes`: kotlin.UInt?, 
    /**
     * Transaction inputs
     */
    var `inputs`: List<PrecomposedInput>?, 
    /**
     * Transaction outputs
     */
    var `outputs`: List<PrecomposedOutput>?, 
    /**
     * Output permutation indices
     */
    var `outputsPermutation`: List<kotlin.UInt>?
) {
    
    companion object
}

public object FfiConverterTypePrecomposedTransaction: FfiConverterRustBuffer<PrecomposedTransaction> {
    override fun read(buf: ByteBuffer): PrecomposedTransaction {
        return PrecomposedTransaction(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalSequenceTypePrecomposedInput.read(buf),
            FfiConverterOptionalSequenceTypePrecomposedOutput.read(buf),
            FfiConverterOptionalSequenceUInt.read(buf),
        )
    }

    override fun allocationSize(value: PrecomposedTransaction) = (
            FfiConverterString.allocationSize(value.`txType`) +
            FfiConverterOptionalString.allocationSize(value.`totalSpent`) +
            FfiConverterOptionalString.allocationSize(value.`fee`) +
            FfiConverterOptionalString.allocationSize(value.`feePerByte`) +
            FfiConverterOptionalUInt.allocationSize(value.`bytes`) +
            FfiConverterOptionalSequenceTypePrecomposedInput.allocationSize(value.`inputs`) +
            FfiConverterOptionalSequenceTypePrecomposedOutput.allocationSize(value.`outputs`) +
            FfiConverterOptionalSequenceUInt.allocationSize(value.`outputsPermutation`)
    )

    override fun write(value: PrecomposedTransaction, buf: ByteBuffer) {
            FfiConverterString.write(value.`txType`, buf)
            FfiConverterOptionalString.write(value.`totalSpent`, buf)
            FfiConverterOptionalString.write(value.`fee`, buf)
            FfiConverterOptionalString.write(value.`feePerByte`, buf)
            FfiConverterOptionalUInt.write(value.`bytes`, buf)
            FfiConverterOptionalSequenceTypePrecomposedInput.write(value.`inputs`, buf)
            FfiConverterOptionalSequenceTypePrecomposedOutput.write(value.`outputs`, buf)
            FfiConverterOptionalSequenceUInt.write(value.`outputsPermutation`, buf)
    }
}



data class PubkyAuth (
    var `data`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypePubkyAuth: FfiConverterRustBuffer<PubkyAuth> {
    override fun read(buf: ByteBuffer): PubkyAuth {
        return PubkyAuth(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PubkyAuth) = (
            FfiConverterString.allocationSize(value.`data`)
    )

    override fun write(value: PubkyAuth, buf: ByteBuffer) {
            FfiConverterString.write(value.`data`, buf)
    }
}



/**
 * Public key response containing the derived public key information
 */
data class PublicKeyResponse (
    var `path`: List<kotlin.UInt>, 
    var `serializedPath`: kotlin.String, 
    var `xpub`: kotlin.String, 
    var `xpubSegwit`: kotlin.String?, 
    var `chainCode`: kotlin.String, 
    var `childNum`: kotlin.UInt, 
    var `publicKey`: kotlin.String, 
    var `fingerprint`: kotlin.UInt, 
    var `depth`: kotlin.UInt, 
    var `descriptor`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypePublicKeyResponse: FfiConverterRustBuffer<PublicKeyResponse> {
    override fun read(buf: ByteBuffer): PublicKeyResponse {
        return PublicKeyResponse(
            FfiConverterSequenceUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PublicKeyResponse) = (
            FfiConverterSequenceUInt.allocationSize(value.`path`) +
            FfiConverterString.allocationSize(value.`serializedPath`) +
            FfiConverterString.allocationSize(value.`xpub`) +
            FfiConverterOptionalString.allocationSize(value.`xpubSegwit`) +
            FfiConverterString.allocationSize(value.`chainCode`) +
            FfiConverterUInt.allocationSize(value.`childNum`) +
            FfiConverterString.allocationSize(value.`publicKey`) +
            FfiConverterUInt.allocationSize(value.`fingerprint`) +
            FfiConverterUInt.allocationSize(value.`depth`) +
            FfiConverterOptionalString.allocationSize(value.`descriptor`)
    )

    override fun write(value: PublicKeyResponse, buf: ByteBuffer) {
            FfiConverterSequenceUInt.write(value.`path`, buf)
            FfiConverterString.write(value.`serializedPath`, buf)
            FfiConverterString.write(value.`xpub`, buf)
            FfiConverterOptionalString.write(value.`xpubSegwit`, buf)
            FfiConverterString.write(value.`chainCode`, buf)
            FfiConverterUInt.write(value.`childNum`, buf)
            FfiConverterString.write(value.`publicKey`, buf)
            FfiConverterUInt.write(value.`fingerprint`, buf)
            FfiConverterUInt.write(value.`depth`, buf)
            FfiConverterOptionalString.write(value.`descriptor`, buf)
    }
}



/**
 * Reference transaction for transaction signing
 */
data class RefTransaction (
    /**
     * Transaction hash
     */
    var `hash`: kotlin.String, 
    /**
     * Transaction version
     */
    var `version`: kotlin.UInt?, 
    /**
     * Transaction inputs
     */
    var `inputs`: List<RefTxInput>, 
    /**
     * Transaction outputs (binary format)
     */
    var `binOutputs`: List<RefTxOutput>, 
    /**
     * Lock time
     */
    var `lockTime`: kotlin.UInt?, 
    /**
     * Expiry (for Zcash/Decred)
     */
    var `expiry`: kotlin.UInt?, 
    /**
     * Version group ID (for Zcash)
     */
    var `versionGroupId`: kotlin.UInt?, 
    /**
     * Overwintered flag (for Zcash)
     */
    var `overwintered`: kotlin.Boolean?, 
    /**
     * Timestamp (for Capricoin)
     */
    var `timestamp`: kotlin.UInt?, 
    /**
     * Branch ID (for Zcash)
     */
    var `branchId`: kotlin.UInt?, 
    /**
     * Extra data
     */
    var `extraData`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeRefTransaction: FfiConverterRustBuffer<RefTransaction> {
    override fun read(buf: ByteBuffer): RefTransaction {
        return RefTransaction(
            FfiConverterString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterSequenceTypeRefTxInput.read(buf),
            FfiConverterSequenceTypeRefTxOutput.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: RefTransaction) = (
            FfiConverterString.allocationSize(value.`hash`) +
            FfiConverterOptionalUInt.allocationSize(value.`version`) +
            FfiConverterSequenceTypeRefTxInput.allocationSize(value.`inputs`) +
            FfiConverterSequenceTypeRefTxOutput.allocationSize(value.`binOutputs`) +
            FfiConverterOptionalUInt.allocationSize(value.`lockTime`) +
            FfiConverterOptionalUInt.allocationSize(value.`expiry`) +
            FfiConverterOptionalUInt.allocationSize(value.`versionGroupId`) +
            FfiConverterOptionalBoolean.allocationSize(value.`overwintered`) +
            FfiConverterOptionalUInt.allocationSize(value.`timestamp`) +
            FfiConverterOptionalUInt.allocationSize(value.`branchId`) +
            FfiConverterOptionalString.allocationSize(value.`extraData`)
    )

    override fun write(value: RefTransaction, buf: ByteBuffer) {
            FfiConverterString.write(value.`hash`, buf)
            FfiConverterOptionalUInt.write(value.`version`, buf)
            FfiConverterSequenceTypeRefTxInput.write(value.`inputs`, buf)
            FfiConverterSequenceTypeRefTxOutput.write(value.`binOutputs`, buf)
            FfiConverterOptionalUInt.write(value.`lockTime`, buf)
            FfiConverterOptionalUInt.write(value.`expiry`, buf)
            FfiConverterOptionalUInt.write(value.`versionGroupId`, buf)
            FfiConverterOptionalBoolean.write(value.`overwintered`, buf)
            FfiConverterOptionalUInt.write(value.`timestamp`, buf)
            FfiConverterOptionalUInt.write(value.`branchId`, buf)
            FfiConverterOptionalString.write(value.`extraData`, buf)
    }
}



/**
 * Reference transaction input
 */
data class RefTxInput (
    /**
     * Previous transaction hash
     */
    var `prevHash`: kotlin.String, 
    /**
     * Previous transaction output index
     */
    var `prevIndex`: kotlin.UInt, 
    /**
     * Script signature
     */
    var `scriptSig`: kotlin.String, 
    /**
     * Sequence number
     */
    var `sequence`: kotlin.UInt
) {
    
    companion object
}

public object FfiConverterTypeRefTxInput: FfiConverterRustBuffer<RefTxInput> {
    override fun read(buf: ByteBuffer): RefTxInput {
        return RefTxInput(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: RefTxInput) = (
            FfiConverterString.allocationSize(value.`prevHash`) +
            FfiConverterUInt.allocationSize(value.`prevIndex`) +
            FfiConverterString.allocationSize(value.`scriptSig`) +
            FfiConverterUInt.allocationSize(value.`sequence`)
    )

    override fun write(value: RefTxInput, buf: ByteBuffer) {
            FfiConverterString.write(value.`prevHash`, buf)
            FfiConverterUInt.write(value.`prevIndex`, buf)
            FfiConverterString.write(value.`scriptSig`, buf)
            FfiConverterUInt.write(value.`sequence`, buf)
    }
}



/**
 * Reference transaction output (binary format)
 */
data class RefTxOutput (
    /**
     * Amount in satoshis
     */
    var `amount`: kotlin.ULong, 
    /**
     * Script public key (binary hex)
     */
    var `scriptPubkey`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeRefTxOutput: FfiConverterRustBuffer<RefTxOutput> {
    override fun read(buf: ByteBuffer): RefTxOutput {
        return RefTxOutput(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: RefTxOutput) = (
            FfiConverterULong.allocationSize(value.`amount`) +
            FfiConverterString.allocationSize(value.`scriptPubkey`)
    )

    override fun write(value: RefTxOutput, buf: ByteBuffer) {
            FfiConverterULong.write(value.`amount`, buf)
            FfiConverterString.write(value.`scriptPubkey`, buf)
    }
}



/**
 * Refund memo
 */
data class RefundMemo (
    /**
     * Refund address
     */
    var `address`: kotlin.String, 
    /**
     * MAC
     */
    var `mac`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeRefundMemo: FfiConverterRustBuffer<RefundMemo> {
    override fun read(buf: ByteBuffer): RefundMemo {
        return RefundMemo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: RefundMemo) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`mac`)
    )

    override fun write(value: RefundMemo, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterString.write(value.`mac`, buf)
    }
}



/**
 * Signed transaction response
 */
data class SignedTransactionResponse (
    /**
     * Array of signer signatures
     */
    var `signatures`: List<kotlin.String>, 
    /**
     * Serialized transaction
     */
    var `serializedTx`: kotlin.String, 
    /**
     * Broadcasted transaction ID (if push was true)
     */
    var `txid`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeSignedTransactionResponse: FfiConverterRustBuffer<SignedTransactionResponse> {
    override fun read(buf: ByteBuffer): SignedTransactionResponse {
        return SignedTransactionResponse(
            FfiConverterSequenceString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: SignedTransactionResponse) = (
            FfiConverterSequenceString.allocationSize(value.`signatures`) +
            FfiConverterString.allocationSize(value.`serializedTx`) +
            FfiConverterOptionalString.allocationSize(value.`txid`)
    )

    override fun write(value: SignedTransactionResponse, buf: ByteBuffer) {
            FfiConverterSequenceString.write(value.`signatures`, buf)
            FfiConverterString.write(value.`serializedTx`, buf)
            FfiConverterOptionalString.write(value.`txid`, buf)
    }
}



/**
 * Text memo
 */
data class TextMemo (
    /**
     * Text content
     */
    var `text`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeTextMemo: FfiConverterRustBuffer<TextMemo> {
    override fun read(buf: ByteBuffer): TextMemo {
        return TextMemo(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TextMemo) = (
            FfiConverterString.allocationSize(value.`text`)
    )

    override fun write(value: TextMemo, buf: ByteBuffer) {
            FfiConverterString.write(value.`text`, buf)
    }
}



/**
 * Payment request
 */
data class TxAckPaymentRequest (
    /**
     * Nonce
     */
    var `nonce`: kotlin.String?, 
    /**
     * Recipient name
     */
    var `recipientName`: kotlin.String, 
    /**
     * Memos
     */
    var `memos`: List<PaymentRequestMemo>?, 
    /**
     * Amount
     */
    var `amount`: kotlin.ULong?, 
    /**
     * Signature
     */
    var `signature`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeTxAckPaymentRequest: FfiConverterRustBuffer<TxAckPaymentRequest> {
    override fun read(buf: ByteBuffer): TxAckPaymentRequest {
        return TxAckPaymentRequest(
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalSequenceTypePaymentRequestMemo.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TxAckPaymentRequest) = (
            FfiConverterOptionalString.allocationSize(value.`nonce`) +
            FfiConverterString.allocationSize(value.`recipientName`) +
            FfiConverterOptionalSequenceTypePaymentRequestMemo.allocationSize(value.`memos`) +
            FfiConverterOptionalULong.allocationSize(value.`amount`) +
            FfiConverterString.allocationSize(value.`signature`)
    )

    override fun write(value: TxAckPaymentRequest, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`nonce`, buf)
            FfiConverterString.write(value.`recipientName`, buf)
            FfiConverterOptionalSequenceTypePaymentRequestMemo.write(value.`memos`, buf)
            FfiConverterOptionalULong.write(value.`amount`, buf)
            FfiConverterString.write(value.`signature`, buf)
    }
}



/**
 * Transaction input type
 */
data class TxInputType (
    /**
     * Previous transaction hash
     */
    var `prevHash`: kotlin.String, 
    /**
     * Previous transaction output index
     */
    var `prevIndex`: kotlin.UInt, 
    /**
     * Amount in satoshis
     */
    var `amount`: kotlin.ULong, 
    /**
     * Transaction sequence
     */
    var `sequence`: kotlin.UInt?, 
    /**
     * BIP32 derivation path
     */
    var `addressN`: List<kotlin.UInt>?, 
    /**
     * Script type
     */
    var `scriptType`: ScriptType?, 
    /**
     * Multisig information
     */
    var `multisig`: MultisigRedeemScriptType?, 
    /**
     * Script public key (for external inputs)
     */
    var `scriptPubkey`: kotlin.String?, 
    /**
     * Script signature
     */
    var `scriptSig`: kotlin.String?, 
    /**
     * Witness data
     */
    var `witness`: kotlin.String?, 
    /**
     * Ownership proof
     */
    var `ownershipProof`: kotlin.String?, 
    /**
     * Commitment data
     */
    var `commitmentData`: kotlin.String?, 
    /**
     * Original hash for RBF
     */
    var `origHash`: kotlin.String?, 
    /**
     * Original index for RBF
     */
    var `origIndex`: kotlin.UInt?, 
    /**
     * Coinjoin flags
     */
    var `coinjoinFlags`: kotlin.UInt?
) {
    
    companion object
}

public object FfiConverterTypeTxInputType: FfiConverterRustBuffer<TxInputType> {
    override fun read(buf: ByteBuffer): TxInputType {
        return TxInputType(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalSequenceUInt.read(buf),
            FfiConverterOptionalTypeScriptType.read(buf),
            FfiConverterOptionalTypeMultisigRedeemScriptType.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
        )
    }

    override fun allocationSize(value: TxInputType) = (
            FfiConverterString.allocationSize(value.`prevHash`) +
            FfiConverterUInt.allocationSize(value.`prevIndex`) +
            FfiConverterULong.allocationSize(value.`amount`) +
            FfiConverterOptionalUInt.allocationSize(value.`sequence`) +
            FfiConverterOptionalSequenceUInt.allocationSize(value.`addressN`) +
            FfiConverterOptionalTypeScriptType.allocationSize(value.`scriptType`) +
            FfiConverterOptionalTypeMultisigRedeemScriptType.allocationSize(value.`multisig`) +
            FfiConverterOptionalString.allocationSize(value.`scriptPubkey`) +
            FfiConverterOptionalString.allocationSize(value.`scriptSig`) +
            FfiConverterOptionalString.allocationSize(value.`witness`) +
            FfiConverterOptionalString.allocationSize(value.`ownershipProof`) +
            FfiConverterOptionalString.allocationSize(value.`commitmentData`) +
            FfiConverterOptionalString.allocationSize(value.`origHash`) +
            FfiConverterOptionalUInt.allocationSize(value.`origIndex`) +
            FfiConverterOptionalUInt.allocationSize(value.`coinjoinFlags`)
    )

    override fun write(value: TxInputType, buf: ByteBuffer) {
            FfiConverterString.write(value.`prevHash`, buf)
            FfiConverterUInt.write(value.`prevIndex`, buf)
            FfiConverterULong.write(value.`amount`, buf)
            FfiConverterOptionalUInt.write(value.`sequence`, buf)
            FfiConverterOptionalSequenceUInt.write(value.`addressN`, buf)
            FfiConverterOptionalTypeScriptType.write(value.`scriptType`, buf)
            FfiConverterOptionalTypeMultisigRedeemScriptType.write(value.`multisig`, buf)
            FfiConverterOptionalString.write(value.`scriptPubkey`, buf)
            FfiConverterOptionalString.write(value.`scriptSig`, buf)
            FfiConverterOptionalString.write(value.`witness`, buf)
            FfiConverterOptionalString.write(value.`ownershipProof`, buf)
            FfiConverterOptionalString.write(value.`commitmentData`, buf)
            FfiConverterOptionalString.write(value.`origHash`, buf)
            FfiConverterOptionalUInt.write(value.`origIndex`, buf)
            FfiConverterOptionalUInt.write(value.`coinjoinFlags`, buf)
    }
}



/**
 * Transaction output type
 */
data class TxOutputType (
    /**
     * Output address (for address outputs)
     */
    var `address`: kotlin.String?, 
    /**
     * BIP32 derivation path (for change outputs)
     */
    var `addressN`: List<kotlin.UInt>?, 
    /**
     * Amount in satoshis
     */
    var `amount`: kotlin.ULong, 
    /**
     * Script type
     */
    var `scriptType`: ScriptType, 
    /**
     * Multisig information
     */
    var `multisig`: MultisigRedeemScriptType?, 
    /**
     * OP_RETURN data
     */
    var `opReturnData`: kotlin.String?, 
    /**
     * Original hash for RBF
     */
    var `origHash`: kotlin.String?, 
    /**
     * Original index for RBF
     */
    var `origIndex`: kotlin.UInt?, 
    /**
     * Payment request index
     */
    var `paymentReqIndex`: kotlin.UInt?
) {
    
    companion object
}

public object FfiConverterTypeTxOutputType: FfiConverterRustBuffer<TxOutputType> {
    override fun read(buf: ByteBuffer): TxOutputType {
        return TxOutputType(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalSequenceUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeScriptType.read(buf),
            FfiConverterOptionalTypeMultisigRedeemScriptType.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
        )
    }

    override fun allocationSize(value: TxOutputType) = (
            FfiConverterOptionalString.allocationSize(value.`address`) +
            FfiConverterOptionalSequenceUInt.allocationSize(value.`addressN`) +
            FfiConverterULong.allocationSize(value.`amount`) +
            FfiConverterTypeScriptType.allocationSize(value.`scriptType`) +
            FfiConverterOptionalTypeMultisigRedeemScriptType.allocationSize(value.`multisig`) +
            FfiConverterOptionalString.allocationSize(value.`opReturnData`) +
            FfiConverterOptionalString.allocationSize(value.`origHash`) +
            FfiConverterOptionalUInt.allocationSize(value.`origIndex`) +
            FfiConverterOptionalUInt.allocationSize(value.`paymentReqIndex`)
    )

    override fun write(value: TxOutputType, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`address`, buf)
            FfiConverterOptionalSequenceUInt.write(value.`addressN`, buf)
            FfiConverterULong.write(value.`amount`, buf)
            FfiConverterTypeScriptType.write(value.`scriptType`, buf)
            FfiConverterOptionalTypeMultisigRedeemScriptType.write(value.`multisig`, buf)
            FfiConverterOptionalString.write(value.`opReturnData`, buf)
            FfiConverterOptionalString.write(value.`origHash`, buf)
            FfiConverterOptionalUInt.write(value.`origIndex`, buf)
            FfiConverterOptionalUInt.write(value.`paymentReqIndex`, buf)
    }
}



/**
 * Unlock Path parameters
 */
data class UnlockPath (
    /**
     * BIP32 derivation path
     */
    var `addressN`: List<kotlin.UInt>, 
    /**
     * MAC (optional)
     */
    var `mac`: kotlin.String?
) {
    
    companion object
}

public object FfiConverterTypeUnlockPath: FfiConverterRustBuffer<UnlockPath> {
    override fun read(buf: ByteBuffer): UnlockPath {
        return UnlockPath(
            FfiConverterSequenceUInt.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: UnlockPath) = (
            FfiConverterSequenceUInt.allocationSize(value.`addressN`) +
            FfiConverterOptionalString.allocationSize(value.`mac`)
    )

    override fun write(value: UnlockPath, buf: ByteBuffer) {
            FfiConverterSequenceUInt.write(value.`addressN`, buf)
            FfiConverterOptionalString.write(value.`mac`, buf)
    }
}



data class ValidationResult (
    var `address`: kotlin.String, 
    var `network`: NetworkType, 
    var `addressType`: AddressType
) {
    
    companion object
}

public object FfiConverterTypeValidationResult: FfiConverterRustBuffer<ValidationResult> {
    override fun read(buf: ByteBuffer): ValidationResult {
        return ValidationResult(
            FfiConverterString.read(buf),
            FfiConverterTypeNetworkType.read(buf),
            FfiConverterTypeAddressType.read(buf),
        )
    }

    override fun allocationSize(value: ValidationResult) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterTypeNetworkType.allocationSize(value.`network`) +
            FfiConverterTypeAddressType.allocationSize(value.`addressType`)
    )

    override fun write(value: ValidationResult, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterTypeNetworkType.write(value.`network`, buf)
            FfiConverterTypeAddressType.write(value.`addressType`, buf)
    }
}



/**
 * Verify message response
 */
data class VerifyMessageResponse (
    /**
     * Verification result message
     */
    var `message`: kotlin.String
) {
    
    companion object
}

public object FfiConverterTypeVerifyMessageResponse: FfiConverterRustBuffer<VerifyMessageResponse> {
    override fun read(buf: ByteBuffer): VerifyMessageResponse {
        return VerifyMessageResponse(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: VerifyMessageResponse) = (
            FfiConverterString.allocationSize(value.`message`)
    )

    override fun write(value: VerifyMessageResponse, buf: ByteBuffer) {
            FfiConverterString.write(value.`message`, buf)
    }
}



/**
 * Marker object for XRP accounts
 */
data class XrpMarker (
    /**
     * Ledger number
     */
    var `ledger`: kotlin.ULong, 
    /**
     * Sequence number
     */
    var `seq`: kotlin.ULong
) {
    
    companion object
}

public object FfiConverterTypeXrpMarker: FfiConverterRustBuffer<XrpMarker> {
    override fun read(buf: ByteBuffer): XrpMarker {
        return XrpMarker(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: XrpMarker) = (
            FfiConverterULong.allocationSize(value.`ledger`) +
            FfiConverterULong.allocationSize(value.`seq`)
    )

    override fun write(value: XrpMarker, buf: ByteBuffer) {
            FfiConverterULong.write(value.`ledger`, buf)
            FfiConverterULong.write(value.`seq`, buf)
    }
}



/**
 * Level of details to be returned by getAccountInfo
 */

enum class AccountInfoDetails {
    
    /**
     * Return only account balances (default)
     */
    BASIC,
    /**
     * Return with derived addresses or ERC20 tokens
     */
    TOKENS,
    /**
     * Same as tokens with balances
     */
    TOKEN_BALANCES,
    /**
     * TokenBalances + complete account transaction history
     */
    TXS;
    companion object
}


public object FfiConverterTypeAccountInfoDetails: FfiConverterRustBuffer<AccountInfoDetails> {
    override fun read(buf: ByteBuffer) = try {
        AccountInfoDetails.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AccountInfoDetails) = 4UL

    override fun write(value: AccountInfoDetails, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class Activity {
    
    data class Onchain(
        val v1: OnchainActivity) : Activity() {
        companion object
    }
    
    data class Lightning(
        val v1: LightningActivity) : Activity() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeActivity : FfiConverterRustBuffer<Activity>{
    override fun read(buf: ByteBuffer): Activity {
        return when(buf.getInt()) {
            1 -> Activity.Onchain(
                FfiConverterTypeOnchainActivity.read(buf),
                )
            2 -> Activity.Lightning(
                FfiConverterTypeLightningActivity.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Activity) = when(value) {
        is Activity.Onchain -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeOnchainActivity.allocationSize(value.v1)
            )
        }
        is Activity.Lightning -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLightningActivity.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: Activity, buf: ByteBuffer) {
        when(value) {
            is Activity.Onchain -> {
                buf.putInt(1)
                FfiConverterTypeOnchainActivity.write(value.v1, buf)
                Unit
            }
            is Activity.Lightning -> {
                buf.putInt(2)
                FfiConverterTypeLightningActivity.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class ActivityException: Exception() {
    
    class InvalidActivity(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InitializationException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InsertException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class RetrievalException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class DataException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class ConnectionException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class SerializationException(
        
        val `errorDetails`: kotlin.String
        ) : ActivityException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ActivityException> {
        override fun lift(error_buf: RustBuffer.ByValue): ActivityException = FfiConverterTypeActivityError.lift(error_buf)
    }

    
}

public object FfiConverterTypeActivityError : FfiConverterRustBuffer<ActivityException> {
    override fun read(buf: ByteBuffer): ActivityException {
        

        return when(buf.getInt()) {
            1 -> ActivityException.InvalidActivity(
                FfiConverterString.read(buf),
                )
            2 -> ActivityException.InitializationException(
                FfiConverterString.read(buf),
                )
            3 -> ActivityException.InsertException(
                FfiConverterString.read(buf),
                )
            4 -> ActivityException.RetrievalException(
                FfiConverterString.read(buf),
                )
            5 -> ActivityException.DataException(
                FfiConverterString.read(buf),
                )
            6 -> ActivityException.ConnectionException(
                FfiConverterString.read(buf),
                )
            7 -> ActivityException.SerializationException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ActivityException): ULong {
        return when(value) {
            is ActivityException.InvalidActivity -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.InitializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.InsertException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.RetrievalException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.DataException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.ConnectionException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is ActivityException.SerializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
        }
    }

    override fun write(value: ActivityException, buf: ByteBuffer) {
        when(value) {
            is ActivityException.InvalidActivity -> {
                buf.putInt(1)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.InitializationException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.InsertException -> {
                buf.putInt(3)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.RetrievalException -> {
                buf.putInt(4)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.DataException -> {
                buf.putInt(5)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.ConnectionException -> {
                buf.putInt(6)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is ActivityException.SerializationException -> {
                buf.putInt(7)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class ActivityFilter {
    
    ALL,
    LIGHTNING,
    ONCHAIN;
    companion object
}


public object FfiConverterTypeActivityFilter: FfiConverterRustBuffer<ActivityFilter> {
    override fun read(buf: ByteBuffer) = try {
        ActivityFilter.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ActivityFilter) = 4UL

    override fun write(value: ActivityFilter, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ActivityType {
    
    ONCHAIN,
    LIGHTNING;
    companion object
}


public object FfiConverterTypeActivityType: FfiConverterRustBuffer<ActivityType> {
    override fun read(buf: ByteBuffer) = try {
        ActivityType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ActivityType) = 4UL

    override fun write(value: ActivityType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class AddressException: Exception() {
    
    class InvalidAddress(
        ) : AddressException() {
        override val message
            get() = ""
    }
    
    class InvalidNetwork(
        ) : AddressException() {
        override val message
            get() = ""
    }
    
    class MnemonicGenerationFailed(
        ) : AddressException() {
        override val message
            get() = ""
    }
    
    class InvalidMnemonic(
        ) : AddressException() {
        override val message
            get() = ""
    }
    
    class AddressDerivationFailed(
        ) : AddressException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<AddressException> {
        override fun lift(error_buf: RustBuffer.ByValue): AddressException = FfiConverterTypeAddressError.lift(error_buf)
    }

    
}

public object FfiConverterTypeAddressError : FfiConverterRustBuffer<AddressException> {
    override fun read(buf: ByteBuffer): AddressException {
        

        return when(buf.getInt()) {
            1 -> AddressException.InvalidAddress()
            2 -> AddressException.InvalidNetwork()
            3 -> AddressException.MnemonicGenerationFailed()
            4 -> AddressException.InvalidMnemonic()
            5 -> AddressException.AddressDerivationFailed()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: AddressException): ULong {
        return when(value) {
            is AddressException.InvalidAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is AddressException.InvalidNetwork -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is AddressException.MnemonicGenerationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is AddressException.InvalidMnemonic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is AddressException.AddressDerivationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: AddressException, buf: ByteBuffer) {
        when(value) {
            is AddressException.InvalidAddress -> {
                buf.putInt(1)
                Unit
            }
            is AddressException.InvalidNetwork -> {
                buf.putInt(2)
                Unit
            }
            is AddressException.MnemonicGenerationFailed -> {
                buf.putInt(3)
                Unit
            }
            is AddressException.InvalidMnemonic -> {
                buf.putInt(4)
                Unit
            }
            is AddressException.AddressDerivationFailed -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class AddressType {
    
    P2PKH,
    P2SH,
    P2WPKH,
    P2WSH,
    P2TR,
    UNKNOWN;
    companion object
}


public object FfiConverterTypeAddressType: FfiConverterRustBuffer<AddressType> {
    override fun read(buf: ByteBuffer) = try {
        AddressType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AddressType) = 4UL

    override fun write(value: AddressType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Amount unit for display
 */

enum class AmountUnit {
    
    BITCOIN,
    MILLI_BITCOIN,
    MICRO_BITCOIN,
    SATOSHI;
    companion object
}


public object FfiConverterTypeAmountUnit: FfiConverterRustBuffer<AmountUnit> {
    override fun read(buf: ByteBuffer) = try {
        AmountUnit.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AmountUnit) = 4UL

    override fun write(value: AmountUnit, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class BitcoinNetworkEnum {
    
    MAINNET,
    TESTNET,
    SIGNET,
    REGTEST;
    companion object
}


public object FfiConverterTypeBitcoinNetworkEnum: FfiConverterRustBuffer<BitcoinNetworkEnum> {
    override fun read(buf: ByteBuffer) = try {
        BitcoinNetworkEnum.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BitcoinNetworkEnum) = 4UL

    override fun write(value: BitcoinNetworkEnum, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class BlocktankException: Exception() {
    
    class HttpClient(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class BlocktankClient(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InvalidBlocktank(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InitializationException(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InsertException(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class RetrievalException(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class DataException(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class ConnectionException(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class SerializationException(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class ChannelOpen(
        
        val `errorType`: BtChannelOrderErrorType, 
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorType=${ `errorType` }, errorDetails=${ `errorDetails` }"
    }
    
    class OrderState(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InvalidParameter(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class DatabaseException(
        
        val `errorDetails`: kotlin.String
        ) : BlocktankException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<BlocktankException> {
        override fun lift(error_buf: RustBuffer.ByValue): BlocktankException = FfiConverterTypeBlocktankError.lift(error_buf)
    }

    
}

public object FfiConverterTypeBlocktankError : FfiConverterRustBuffer<BlocktankException> {
    override fun read(buf: ByteBuffer): BlocktankException {
        

        return when(buf.getInt()) {
            1 -> BlocktankException.HttpClient(
                FfiConverterString.read(buf),
                )
            2 -> BlocktankException.BlocktankClient(
                FfiConverterString.read(buf),
                )
            3 -> BlocktankException.InvalidBlocktank(
                FfiConverterString.read(buf),
                )
            4 -> BlocktankException.InitializationException(
                FfiConverterString.read(buf),
                )
            5 -> BlocktankException.InsertException(
                FfiConverterString.read(buf),
                )
            6 -> BlocktankException.RetrievalException(
                FfiConverterString.read(buf),
                )
            7 -> BlocktankException.DataException(
                FfiConverterString.read(buf),
                )
            8 -> BlocktankException.ConnectionException(
                FfiConverterString.read(buf),
                )
            9 -> BlocktankException.SerializationException(
                FfiConverterString.read(buf),
                )
            10 -> BlocktankException.ChannelOpen(
                FfiConverterTypeBtChannelOrderErrorType.read(buf),
                FfiConverterString.read(buf),
                )
            11 -> BlocktankException.OrderState(
                FfiConverterString.read(buf),
                )
            12 -> BlocktankException.InvalidParameter(
                FfiConverterString.read(buf),
                )
            13 -> BlocktankException.DatabaseException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: BlocktankException): ULong {
        return when(value) {
            is BlocktankException.HttpClient -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.BlocktankClient -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.InvalidBlocktank -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.InitializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.InsertException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.RetrievalException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.DataException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.ConnectionException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.SerializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.ChannelOpen -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterTypeBtChannelOrderErrorType.allocationSize(value.`errorType`)
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.OrderState -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.InvalidParameter -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is BlocktankException.DatabaseException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
        }
    }

    override fun write(value: BlocktankException, buf: ByteBuffer) {
        when(value) {
            is BlocktankException.HttpClient -> {
                buf.putInt(1)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.BlocktankClient -> {
                buf.putInt(2)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.InvalidBlocktank -> {
                buf.putInt(3)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.InitializationException -> {
                buf.putInt(4)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.InsertException -> {
                buf.putInt(5)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.RetrievalException -> {
                buf.putInt(6)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.DataException -> {
                buf.putInt(7)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.ConnectionException -> {
                buf.putInt(8)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.SerializationException -> {
                buf.putInt(9)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.ChannelOpen -> {
                buf.putInt(10)
                FfiConverterTypeBtChannelOrderErrorType.write(value.`errorType`, buf)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.OrderState -> {
                buf.putInt(11)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.InvalidParameter -> {
                buf.putInt(12)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is BlocktankException.DatabaseException -> {
                buf.putInt(13)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class BtBolt11InvoiceState {
    
    PENDING,
    HOLDING,
    PAID,
    CANCELED;
    companion object
}


public object FfiConverterTypeBtBolt11InvoiceState: FfiConverterRustBuffer<BtBolt11InvoiceState> {
    override fun read(buf: ByteBuffer) = try {
        BtBolt11InvoiceState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BtBolt11InvoiceState) = 4UL

    override fun write(value: BtBolt11InvoiceState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class BtChannelOrderErrorType {
    
    WRONG_ORDER_STATE,
    PEER_NOT_REACHABLE,
    CHANNEL_REJECTED_BY_DESTINATION,
    CHANNEL_REJECTED_BY_LSP,
    BLOCKTANK_NOT_READY;
    companion object
}


public object FfiConverterTypeBtChannelOrderErrorType: FfiConverterRustBuffer<BtChannelOrderErrorType> {
    override fun read(buf: ByteBuffer) = try {
        BtChannelOrderErrorType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BtChannelOrderErrorType) = 4UL

    override fun write(value: BtChannelOrderErrorType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class BtOpenChannelState {
    
    OPENING,
    OPEN,
    CLOSED;
    companion object
}


public object FfiConverterTypeBtOpenChannelState: FfiConverterRustBuffer<BtOpenChannelState> {
    override fun read(buf: ByteBuffer) = try {
        BtOpenChannelState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BtOpenChannelState) = 4UL

    override fun write(value: BtOpenChannelState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class BtOrderState {
    
    CREATED,
    EXPIRED,
    OPEN,
    CLOSED;
    companion object
}


public object FfiConverterTypeBtOrderState: FfiConverterRustBuffer<BtOrderState> {
    override fun read(buf: ByteBuffer) = try {
        BtOrderState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BtOrderState) = 4UL

    override fun write(value: BtOrderState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class BtOrderState2 {
    
    CREATED,
    EXPIRED,
    EXECUTED,
    PAID;
    companion object
}


public object FfiConverterTypeBtOrderState2: FfiConverterRustBuffer<BtOrderState2> {
    override fun read(buf: ByteBuffer) = try {
        BtOrderState2.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BtOrderState2) = 4UL

    override fun write(value: BtOrderState2, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class BtPaymentState {
    
    CREATED,
    PARTIALLY_PAID,
    PAID,
    REFUNDED,
    REFUND_AVAILABLE;
    companion object
}


public object FfiConverterTypeBtPaymentState: FfiConverterRustBuffer<BtPaymentState> {
    override fun read(buf: ByteBuffer) = try {
        BtPaymentState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BtPaymentState) = 4UL

    override fun write(value: BtPaymentState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class BtPaymentState2 {
    
    CREATED,
    PAID,
    REFUNDED,
    REFUND_AVAILABLE,
    CANCELED;
    companion object
}


public object FfiConverterTypeBtPaymentState2: FfiConverterRustBuffer<BtPaymentState2> {
    override fun read(buf: ByteBuffer) = try {
        BtPaymentState2.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BtPaymentState2) = 4UL

    override fun write(value: BtPaymentState2, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class CJitStateEnum {
    
    CREATED,
    COMPLETED,
    EXPIRED,
    FAILED;
    companion object
}


public object FfiConverterTypeCJitStateEnum: FfiConverterRustBuffer<CJitStateEnum> {
    override fun read(buf: ByteBuffer) = try {
        CJitStateEnum.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: CJitStateEnum) = 4UL

    override fun write(value: CJitStateEnum, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Output type for compose transaction
 */
sealed class ComposeOutput {
    
    /**
     * Regular output with amount and address
     */
    data class Regular(
        /**
         * Amount in satoshis
         */
        val `amount`: kotlin.String, 
        /**
         * Recipient address
         */
        val `address`: kotlin.String) : ComposeOutput() {
        companion object
    }
    
    /**
     * Send max output
     */
    data class SendMax(
        /**
         * Recipient address
         */
        val `address`: kotlin.String) : ComposeOutput() {
        companion object
    }
    
    /**
     * OP_RETURN output
     */
    data class OpReturn(
        /**
         * Hexadecimal string with arbitrary data
         */
        val `dataHex`: kotlin.String) : ComposeOutput() {
        companion object
    }
    
    /**
     * Payment without address (precompose only)
     */
    data class PaymentNoAddress(
        /**
         * Amount in satoshis
         */
        val `amount`: kotlin.String) : ComposeOutput() {
        companion object
    }
    
    /**
     * Send max without address (precompose only)
     */
    object SendMaxNoAddress : ComposeOutput()
    
    

    
    companion object
}

public object FfiConverterTypeComposeOutput : FfiConverterRustBuffer<ComposeOutput>{
    override fun read(buf: ByteBuffer): ComposeOutput {
        return when(buf.getInt()) {
            1 -> ComposeOutput.Regular(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> ComposeOutput.SendMax(
                FfiConverterString.read(buf),
                )
            3 -> ComposeOutput.OpReturn(
                FfiConverterString.read(buf),
                )
            4 -> ComposeOutput.PaymentNoAddress(
                FfiConverterString.read(buf),
                )
            5 -> ComposeOutput.SendMaxNoAddress
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ComposeOutput) = when(value) {
        is ComposeOutput.Regular -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`amount`)
                + FfiConverterString.allocationSize(value.`address`)
            )
        }
        is ComposeOutput.SendMax -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`address`)
            )
        }
        is ComposeOutput.OpReturn -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`dataHex`)
            )
        }
        is ComposeOutput.PaymentNoAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`amount`)
            )
        }
        is ComposeOutput.SendMaxNoAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: ComposeOutput, buf: ByteBuffer) {
        when(value) {
            is ComposeOutput.Regular -> {
                buf.putInt(1)
                FfiConverterString.write(value.`amount`, buf)
                FfiConverterString.write(value.`address`, buf)
                Unit
            }
            is ComposeOutput.SendMax -> {
                buf.putInt(2)
                FfiConverterString.write(value.`address`, buf)
                Unit
            }
            is ComposeOutput.OpReturn -> {
                buf.putInt(3)
                FfiConverterString.write(value.`dataHex`, buf)
                Unit
            }
            is ComposeOutput.PaymentNoAddress -> {
                buf.putInt(4)
                FfiConverterString.write(value.`amount`, buf)
                Unit
            }
            is ComposeOutput.SendMaxNoAddress -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





/**
 * Compose transaction response
 */
sealed class ComposeTransactionResponse {
    
    /**
     * Signed transaction (payment mode)
     */
    data class SignedTransaction(
        val v1: SignedTransactionResponse) : ComposeTransactionResponse() {
        companion object
    }
    
    /**
     * Precomposed transactions (precompose mode)
     */
    data class PrecomposedTransactions(
        val v1: List<PrecomposedTransaction>) : ComposeTransactionResponse() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeComposeTransactionResponse : FfiConverterRustBuffer<ComposeTransactionResponse>{
    override fun read(buf: ByteBuffer): ComposeTransactionResponse {
        return when(buf.getInt()) {
            1 -> ComposeTransactionResponse.SignedTransaction(
                FfiConverterTypeSignedTransactionResponse.read(buf),
                )
            2 -> ComposeTransactionResponse.PrecomposedTransactions(
                FfiConverterSequenceTypePrecomposedTransaction.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ComposeTransactionResponse) = when(value) {
        is ComposeTransactionResponse.SignedTransaction -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeSignedTransactionResponse.allocationSize(value.v1)
            )
        }
        is ComposeTransactionResponse.PrecomposedTransactions -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceTypePrecomposedTransaction.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: ComposeTransactionResponse, buf: ByteBuffer) {
        when(value) {
            is ComposeTransactionResponse.SignedTransaction -> {
                buf.putInt(1)
                FfiConverterTypeSignedTransactionResponse.write(value.v1, buf)
                Unit
            }
            is ComposeTransactionResponse.PrecomposedTransactions -> {
                buf.putInt(2)
                FfiConverterSequenceTypePrecomposedTransaction.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class DbException: Exception() {
    
    class DbActivityException(
        
        val `errorDetails`: ActivityException
        ) : DbException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class DbBlocktankException(
        
        val `errorDetails`: BlocktankException
        ) : DbException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class InitializationException(
        
        val `errorDetails`: kotlin.String
        ) : DbException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DbException> {
        override fun lift(error_buf: RustBuffer.ByValue): DbException = FfiConverterTypeDbError.lift(error_buf)
    }

    
}

public object FfiConverterTypeDbError : FfiConverterRustBuffer<DbException> {
    override fun read(buf: ByteBuffer): DbException {
        

        return when(buf.getInt()) {
            1 -> DbException.DbActivityException(
                FfiConverterTypeActivityError.read(buf),
                )
            2 -> DbException.DbBlocktankException(
                FfiConverterTypeBlocktankError.read(buf),
                )
            3 -> DbException.InitializationException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DbException): ULong {
        return when(value) {
            is DbException.DbActivityException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterTypeActivityError.allocationSize(value.`errorDetails`)
            )
            is DbException.DbBlocktankException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterTypeBlocktankError.allocationSize(value.`errorDetails`)
            )
            is DbException.InitializationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
        }
    }

    override fun write(value: DbException, buf: ByteBuffer) {
        when(value) {
            is DbException.DbActivityException -> {
                buf.putInt(1)
                FfiConverterTypeActivityError.write(value.`errorDetails`, buf)
                Unit
            }
            is DbException.DbBlocktankException -> {
                buf.putInt(2)
                FfiConverterTypeBlocktankError.write(value.`errorDetails`, buf)
                Unit
            }
            is DbException.InitializationException -> {
                buf.putInt(3)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class DecodingException: Exception() {
    
    class InvalidFormat(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidNetwork(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidAmount(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidLnurlPayAmount(
        
        val `amountSatoshis`: kotlin.ULong, 
        
        val `min`: kotlin.ULong, 
        
        val `max`: kotlin.ULong
        ) : DecodingException() {
        override val message
            get() = "amountSatoshis=${ `amountSatoshis` }, min=${ `min` }, max=${ `max` }"
    }
    
    class InvalidTimestamp(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidChecksum(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidResponse(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class UnsupportedType(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvalidAddress(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class RequestFailed(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class ClientCreationFailed(
        ) : DecodingException() {
        override val message
            get() = ""
    }
    
    class InvoiceCreationFailed(
        
        val `errorMessage`: kotlin.String
        ) : DecodingException() {
        override val message
            get() = "errorMessage=${ `errorMessage` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DecodingException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecodingException = FfiConverterTypeDecodingError.lift(error_buf)
    }

    
}

public object FfiConverterTypeDecodingError : FfiConverterRustBuffer<DecodingException> {
    override fun read(buf: ByteBuffer): DecodingException {
        

        return when(buf.getInt()) {
            1 -> DecodingException.InvalidFormat()
            2 -> DecodingException.InvalidNetwork()
            3 -> DecodingException.InvalidAmount()
            4 -> DecodingException.InvalidLnurlPayAmount(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            5 -> DecodingException.InvalidTimestamp()
            6 -> DecodingException.InvalidChecksum()
            7 -> DecodingException.InvalidResponse()
            8 -> DecodingException.UnsupportedType()
            9 -> DecodingException.InvalidAddress()
            10 -> DecodingException.RequestFailed()
            11 -> DecodingException.ClientCreationFailed()
            12 -> DecodingException.InvoiceCreationFailed(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DecodingException): ULong {
        return when(value) {
            is DecodingException.InvalidFormat -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidNetwork -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidAmount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidLnurlPayAmount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterULong.allocationSize(value.`amountSatoshis`)
                + FfiConverterULong.allocationSize(value.`min`)
                + FfiConverterULong.allocationSize(value.`max`)
            )
            is DecodingException.InvalidTimestamp -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidChecksum -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidResponse -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.UnsupportedType -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvalidAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.RequestFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.ClientCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is DecodingException.InvoiceCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorMessage`)
            )
        }
    }

    override fun write(value: DecodingException, buf: ByteBuffer) {
        when(value) {
            is DecodingException.InvalidFormat -> {
                buf.putInt(1)
                Unit
            }
            is DecodingException.InvalidNetwork -> {
                buf.putInt(2)
                Unit
            }
            is DecodingException.InvalidAmount -> {
                buf.putInt(3)
                Unit
            }
            is DecodingException.InvalidLnurlPayAmount -> {
                buf.putInt(4)
                FfiConverterULong.write(value.`amountSatoshis`, buf)
                FfiConverterULong.write(value.`min`, buf)
                FfiConverterULong.write(value.`max`, buf)
                Unit
            }
            is DecodingException.InvalidTimestamp -> {
                buf.putInt(5)
                Unit
            }
            is DecodingException.InvalidChecksum -> {
                buf.putInt(6)
                Unit
            }
            is DecodingException.InvalidResponse -> {
                buf.putInt(7)
                Unit
            }
            is DecodingException.UnsupportedType -> {
                buf.putInt(8)
                Unit
            }
            is DecodingException.InvalidAddress -> {
                buf.putInt(9)
                Unit
            }
            is DecodingException.RequestFailed -> {
                buf.putInt(10)
                Unit
            }
            is DecodingException.ClientCreationFailed -> {
                buf.putInt(11)
                Unit
            }
            is DecodingException.InvoiceCreationFailed -> {
                buf.putInt(12)
                FfiConverterString.write(value.`errorMessage`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * Bitcoin account types for default display
 */

enum class DefaultAccountType {
    
    /**
     * Normal account
     */
    NORMAL,
    /**
     * SegWit account
     */
    SEGWIT,
    /**
     * Legacy account
     */
    LEGACY;
    companion object
}


public object FfiConverterTypeDefaultAccountType: FfiConverterRustBuffer<DefaultAccountType> {
    override fun read(buf: ByteBuffer) = try {
        DefaultAccountType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: DefaultAccountType) = 4UL

    override fun write(value: DefaultAccountType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Union type for HD Node (either a String or HDNodeType)
 */
sealed class HdNodeTypeOrString {
    
    /**
     * HD Node as a string
     */
    data class String(
        val v1: kotlin.String) : HdNodeTypeOrString() {
        companion object
    }
    
    /**
     * HD Node as an object
     */
    data class Node(
        val v1: HdNodeType) : HdNodeTypeOrString() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeHDNodeTypeOrString : FfiConverterRustBuffer<HdNodeTypeOrString>{
    override fun read(buf: ByteBuffer): HdNodeTypeOrString {
        return when(buf.getInt()) {
            1 -> HdNodeTypeOrString.String(
                FfiConverterString.read(buf),
                )
            2 -> HdNodeTypeOrString.Node(
                FfiConverterTypeHDNodeType.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: HdNodeTypeOrString) = when(value) {
        is HdNodeTypeOrString.String -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.v1)
            )
        }
        is HdNodeTypeOrString.Node -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeHDNodeType.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: HdNodeTypeOrString, buf: ByteBuffer) {
        when(value) {
            is HdNodeTypeOrString.String -> {
                buf.putInt(1)
                FfiConverterString.write(value.v1, buf)
                Unit
            }
            is HdNodeTypeOrString.Node -> {
                buf.putInt(2)
                FfiConverterTypeHDNodeType.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class LnurlException: Exception() {
    
    class InvalidAddress(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class ClientCreationFailed(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class RequestFailed(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class InvalidResponse(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    
    class InvalidAmount(
        
        val `amountSatoshis`: kotlin.ULong, 
        
        val `min`: kotlin.ULong, 
        
        val `max`: kotlin.ULong
        ) : LnurlException() {
        override val message
            get() = "amountSatoshis=${ `amountSatoshis` }, min=${ `min` }, max=${ `max` }"
    }
    
    class InvoiceCreationFailed(
        
        val `errorDetails`: kotlin.String
        ) : LnurlException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class AuthenticationFailed(
        ) : LnurlException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<LnurlException> {
        override fun lift(error_buf: RustBuffer.ByValue): LnurlException = FfiConverterTypeLnurlError.lift(error_buf)
    }

    
}

public object FfiConverterTypeLnurlError : FfiConverterRustBuffer<LnurlException> {
    override fun read(buf: ByteBuffer): LnurlException {
        

        return when(buf.getInt()) {
            1 -> LnurlException.InvalidAddress()
            2 -> LnurlException.ClientCreationFailed()
            3 -> LnurlException.RequestFailed()
            4 -> LnurlException.InvalidResponse()
            5 -> LnurlException.InvalidAmount(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            6 -> LnurlException.InvoiceCreationFailed(
                FfiConverterString.read(buf),
                )
            7 -> LnurlException.AuthenticationFailed()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LnurlException): ULong {
        return when(value) {
            is LnurlException.InvalidAddress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.ClientCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.RequestFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.InvalidResponse -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is LnurlException.InvalidAmount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterULong.allocationSize(value.`amountSatoshis`)
                + FfiConverterULong.allocationSize(value.`min`)
                + FfiConverterULong.allocationSize(value.`max`)
            )
            is LnurlException.InvoiceCreationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is LnurlException.AuthenticationFailed -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(value: LnurlException, buf: ByteBuffer) {
        when(value) {
            is LnurlException.InvalidAddress -> {
                buf.putInt(1)
                Unit
            }
            is LnurlException.ClientCreationFailed -> {
                buf.putInt(2)
                Unit
            }
            is LnurlException.RequestFailed -> {
                buf.putInt(3)
                Unit
            }
            is LnurlException.InvalidResponse -> {
                buf.putInt(4)
                Unit
            }
            is LnurlException.InvalidAmount -> {
                buf.putInt(5)
                FfiConverterULong.write(value.`amountSatoshis`, buf)
                FfiConverterULong.write(value.`min`, buf)
                FfiConverterULong.write(value.`max`, buf)
                Unit
            }
            is LnurlException.InvoiceCreationFailed -> {
                buf.putInt(6)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is LnurlException.AuthenticationFailed -> {
                buf.putInt(7)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class ManualRefundStateEnum {
    
    CREATED,
    APPROVED,
    REJECTED,
    SENT;
    companion object
}


public object FfiConverterTypeManualRefundStateEnum: FfiConverterRustBuffer<ManualRefundStateEnum> {
    override fun read(buf: ByteBuffer) = try {
        ManualRefundStateEnum.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ManualRefundStateEnum) = 4UL

    override fun write(value: ManualRefundStateEnum, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class Network {
    
    /**
     * Mainnet Bitcoin.
     */
    BITCOIN,
    /**
     * Bitcoin's testnet network.
     */
    TESTNET,
    /**
     * Bitcoin's testnet4 network.
     */
    TESTNET4,
    /**
     * Bitcoin's signet network.
     */
    SIGNET,
    /**
     * Bitcoin's regtest network.
     */
    REGTEST;
    companion object
}


public object FfiConverterTypeNetwork: FfiConverterRustBuffer<Network> {
    override fun read(buf: ByteBuffer) = try {
        Network.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: Network) = 4UL

    override fun write(value: Network, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class NetworkType {
    
    BITCOIN,
    TESTNET,
    REGTEST,
    SIGNET;
    companion object
}


public object FfiConverterTypeNetworkType: FfiConverterRustBuffer<NetworkType> {
    override fun read(buf: ByteBuffer) = try {
        NetworkType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: NetworkType) = 4UL

    override fun write(value: NetworkType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PaymentState {
    
    PENDING,
    SUCCEEDED,
    FAILED;
    companion object
}


public object FfiConverterTypePaymentState: FfiConverterRustBuffer<PaymentState> {
    override fun read(buf: ByteBuffer) = try {
        PaymentState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentState) = 4UL

    override fun write(value: PaymentState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PaymentType {
    
    SENT,
    RECEIVED;
    companion object
}


public object FfiConverterTypePaymentType: FfiConverterRustBuffer<PaymentType> {
    override fun read(buf: ByteBuffer) = try {
        PaymentType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentType) = 4UL

    override fun write(value: PaymentType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class Scanner {
    
    data class OnChain(
        val `invoice`: OnChainInvoice) : Scanner() {
        companion object
    }
    
    data class Lightning(
        val `invoice`: LightningInvoice) : Scanner() {
        companion object
    }
    
    data class PubkyAuth(
        val `data`: kotlin.String) : Scanner() {
        companion object
    }
    
    data class LnurlChannel(
        val `data`: LnurlChannelData) : Scanner() {
        companion object
    }
    
    data class LnurlAuth(
        val `data`: LnurlAuthData) : Scanner() {
        companion object
    }
    
    data class LnurlWithdraw(
        val `data`: LnurlWithdrawData) : Scanner() {
        companion object
    }
    
    data class LnurlAddress(
        val `data`: LnurlAddressData) : Scanner() {
        companion object
    }
    
    data class LnurlPay(
        val `data`: LnurlPayData) : Scanner() {
        companion object
    }
    
    data class NodeId(
        val `url`: kotlin.String, 
        val `network`: NetworkType) : Scanner() {
        companion object
    }
    
    data class Gift(
        val `code`: kotlin.String, 
        val `amount`: kotlin.ULong) : Scanner() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeScanner : FfiConverterRustBuffer<Scanner>{
    override fun read(buf: ByteBuffer): Scanner {
        return when(buf.getInt()) {
            1 -> Scanner.OnChain(
                FfiConverterTypeOnChainInvoice.read(buf),
                )
            2 -> Scanner.Lightning(
                FfiConverterTypeLightningInvoice.read(buf),
                )
            3 -> Scanner.PubkyAuth(
                FfiConverterString.read(buf),
                )
            4 -> Scanner.LnurlChannel(
                FfiConverterTypeLnurlChannelData.read(buf),
                )
            5 -> Scanner.LnurlAuth(
                FfiConverterTypeLnurlAuthData.read(buf),
                )
            6 -> Scanner.LnurlWithdraw(
                FfiConverterTypeLnurlWithdrawData.read(buf),
                )
            7 -> Scanner.LnurlAddress(
                FfiConverterTypeLnurlAddressData.read(buf),
                )
            8 -> Scanner.LnurlPay(
                FfiConverterTypeLnurlPayData.read(buf),
                )
            9 -> Scanner.NodeId(
                FfiConverterString.read(buf),
                FfiConverterTypeNetworkType.read(buf),
                )
            10 -> Scanner.Gift(
                FfiConverterString.read(buf),
                FfiConverterULong.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Scanner) = when(value) {
        is Scanner.OnChain -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeOnChainInvoice.allocationSize(value.`invoice`)
            )
        }
        is Scanner.Lightning -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLightningInvoice.allocationSize(value.`invoice`)
            )
        }
        is Scanner.PubkyAuth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlChannel -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlChannelData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlAuth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlAuthData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlWithdraw -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlWithdrawData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlAddressData.allocationSize(value.`data`)
            )
        }
        is Scanner.LnurlPay -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeLnurlPayData.allocationSize(value.`data`)
            )
        }
        is Scanner.NodeId -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`url`)
                + FfiConverterTypeNetworkType.allocationSize(value.`network`)
            )
        }
        is Scanner.Gift -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`code`)
                + FfiConverterULong.allocationSize(value.`amount`)
            )
        }
    }

    override fun write(value: Scanner, buf: ByteBuffer) {
        when(value) {
            is Scanner.OnChain -> {
                buf.putInt(1)
                FfiConverterTypeOnChainInvoice.write(value.`invoice`, buf)
                Unit
            }
            is Scanner.Lightning -> {
                buf.putInt(2)
                FfiConverterTypeLightningInvoice.write(value.`invoice`, buf)
                Unit
            }
            is Scanner.PubkyAuth -> {
                buf.putInt(3)
                FfiConverterString.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlChannel -> {
                buf.putInt(4)
                FfiConverterTypeLnurlChannelData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlAuth -> {
                buf.putInt(5)
                FfiConverterTypeLnurlAuthData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlWithdraw -> {
                buf.putInt(6)
                FfiConverterTypeLnurlWithdrawData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlAddress -> {
                buf.putInt(7)
                FfiConverterTypeLnurlAddressData.write(value.`data`, buf)
                Unit
            }
            is Scanner.LnurlPay -> {
                buf.putInt(8)
                FfiConverterTypeLnurlPayData.write(value.`data`, buf)
                Unit
            }
            is Scanner.NodeId -> {
                buf.putInt(9)
                FfiConverterString.write(value.`url`, buf)
                FfiConverterTypeNetworkType.write(value.`network`, buf)
                Unit
            }
            is Scanner.Gift -> {
                buf.putInt(10)
                FfiConverterString.write(value.`code`, buf)
                FfiConverterULong.write(value.`amount`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





/**
 * Script type for inputs and outputs
 */

enum class ScriptType {
    
    SPEND_ADDRESS,
    SPEND_MULTISIG,
    SPEND_WITNESS,
    SPEND_P2SH_WITNESS,
    SPEND_TAPROOT,
    EXTERNAL,
    PAY_TO_ADDRESS,
    PAY_TO_SCRIPT_HASH,
    PAY_TO_MULTISIG,
    PAY_TO_WITNESS,
    PAY_TO_P2SH_WITNESS,
    PAY_TO_TAPROOT,
    PAY_TO_OP_RETURN;
    companion object
}


public object FfiConverterTypeScriptType: FfiConverterRustBuffer<ScriptType> {
    override fun read(buf: ByteBuffer) = try {
        ScriptType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ScriptType) = 4UL

    override fun write(value: ScriptType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class SortDirection {
    
    ASC,
    DESC;
    companion object
}


public object FfiConverterTypeSortDirection: FfiConverterRustBuffer<SortDirection> {
    override fun read(buf: ByteBuffer) = try {
        SortDirection.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: SortDirection) = 4UL

    override fun write(value: SortDirection, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Token filter options for getAccountInfo
 */

enum class TokenFilter {
    
    /**
     * Return only addresses with nonzero balance (default)
     */
    NONZERO,
    /**
     * Return addresses with at least one transaction
     */
    USED,
    /**
     * Return all derived addresses
     */
    DERIVED;
    companion object
}


public object FfiConverterTypeTokenFilter: FfiConverterRustBuffer<TokenFilter> {
    override fun read(buf: ByteBuffer) = try {
        TokenFilter.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: TokenFilter) = 4UL

    override fun write(value: TokenFilter, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







/**
 * Error types for Trezor Connect operations
 */
sealed class TrezorConnectException: Exception() {
    
    /**
     * Error during serialization/deserialization
     */
    class SerdeException(
        
        val `errorDetails`: kotlin.String
        ) : TrezorConnectException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    /**
     * Error with URL parsing or formatting
     */
    class UrlException(
        
        val `errorDetails`: kotlin.String
        ) : TrezorConnectException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    /**
     * Environment-related errors
     */
    class EnvironmentException(
        
        val `errorDetails`: kotlin.String
        ) : TrezorConnectException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    /**
     * General errors
     */
    class Other(
        
        val `errorDetails`: kotlin.String
        ) : TrezorConnectException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    
    class ClientException(
        
        val `errorDetails`: kotlin.String
        ) : TrezorConnectException() {
        override val message
            get() = "errorDetails=${ `errorDetails` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<TrezorConnectException> {
        override fun lift(error_buf: RustBuffer.ByValue): TrezorConnectException = FfiConverterTypeTrezorConnectError.lift(error_buf)
    }

    
}

public object FfiConverterTypeTrezorConnectError : FfiConverterRustBuffer<TrezorConnectException> {
    override fun read(buf: ByteBuffer): TrezorConnectException {
        

        return when(buf.getInt()) {
            1 -> TrezorConnectException.SerdeException(
                FfiConverterString.read(buf),
                )
            2 -> TrezorConnectException.UrlException(
                FfiConverterString.read(buf),
                )
            3 -> TrezorConnectException.EnvironmentException(
                FfiConverterString.read(buf),
                )
            4 -> TrezorConnectException.Other(
                FfiConverterString.read(buf),
                )
            5 -> TrezorConnectException.ClientException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TrezorConnectException): ULong {
        return when(value) {
            is TrezorConnectException.SerdeException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is TrezorConnectException.UrlException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is TrezorConnectException.EnvironmentException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is TrezorConnectException.Other -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
            is TrezorConnectException.ClientException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`errorDetails`)
            )
        }
    }

    override fun write(value: TrezorConnectException, buf: ByteBuffer) {
        when(value) {
            is TrezorConnectException.SerdeException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is TrezorConnectException.UrlException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is TrezorConnectException.EnvironmentException -> {
                buf.putInt(3)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is TrezorConnectException.Other -> {
                buf.putInt(4)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
            is TrezorConnectException.ClientException -> {
                buf.putInt(5)
                FfiConverterString.write(value.`errorDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * Environment options for Trezor deep linking
 */

enum class TrezorEnvironment {
    
    /**
     * Production environment (currently unavailable according to docs)
     */
    PRODUCTION,
    /**
     * Development environment
     */
    DEVELOPMENT,
    /**
     * Local environment
     */
    LOCAL;
    companion object
}


public object FfiConverterTypeTrezorEnvironment: FfiConverterRustBuffer<TrezorEnvironment> {
    override fun read(buf: ByteBuffer) = try {
        TrezorEnvironment.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: TrezorEnvironment) = 4UL

    override fun write(value: TrezorEnvironment, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





/**
 * Enum representing the different types of Trezor responses
 */
sealed class TrezorResponsePayload {
    
    /**
     * Response from getFeatures method
     */
    data class Features(
        val v1: FeatureResponse) : TrezorResponsePayload() {
        companion object
    }
    
    /**
     * Response from getAddress method
     */
    data class Address(
        val v1: AddressResponse) : TrezorResponsePayload() {
        companion object
    }
    
    /**
     * Response from getPublicKey method
     */
    data class PublicKey(
        val v1: PublicKeyResponse) : TrezorResponsePayload() {
        companion object
    }
    
    /**
     * Response from getAccountInfo method
     */
    data class AccountInfo(
        val v1: AccountInfoResponse) : TrezorResponsePayload() {
        companion object
    }
    
    /**
     * Response from composeTransaction method
     */
    data class ComposeTransaction(
        val v1: ComposeTransactionResponse) : TrezorResponsePayload() {
        companion object
    }
    
    /**
     * Response from verifyMessage method
     */
    data class VerifyMessage(
        val v1: VerifyMessageResponse) : TrezorResponsePayload() {
        companion object
    }
    
    /**
     * Response from signMessage method
     */
    data class MessageSignature(
        val v1: MessageSignatureResponse) : TrezorResponsePayload() {
        companion object
    }
    
    /**
     * Response from signTransaction method
     */
    data class SignedTransaction(
        val v1: SignedTransactionResponse) : TrezorResponsePayload() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeTrezorResponsePayload : FfiConverterRustBuffer<TrezorResponsePayload>{
    override fun read(buf: ByteBuffer): TrezorResponsePayload {
        return when(buf.getInt()) {
            1 -> TrezorResponsePayload.Features(
                FfiConverterTypeFeatureResponse.read(buf),
                )
            2 -> TrezorResponsePayload.Address(
                FfiConverterTypeAddressResponse.read(buf),
                )
            3 -> TrezorResponsePayload.PublicKey(
                FfiConverterTypePublicKeyResponse.read(buf),
                )
            4 -> TrezorResponsePayload.AccountInfo(
                FfiConverterTypeAccountInfoResponse.read(buf),
                )
            5 -> TrezorResponsePayload.ComposeTransaction(
                FfiConverterTypeComposeTransactionResponse.read(buf),
                )
            6 -> TrezorResponsePayload.VerifyMessage(
                FfiConverterTypeVerifyMessageResponse.read(buf),
                )
            7 -> TrezorResponsePayload.MessageSignature(
                FfiConverterTypeMessageSignatureResponse.read(buf),
                )
            8 -> TrezorResponsePayload.SignedTransaction(
                FfiConverterTypeSignedTransactionResponse.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TrezorResponsePayload) = when(value) {
        is TrezorResponsePayload.Features -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeFeatureResponse.allocationSize(value.v1)
            )
        }
        is TrezorResponsePayload.Address -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeAddressResponse.allocationSize(value.v1)
            )
        }
        is TrezorResponsePayload.PublicKey -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypePublicKeyResponse.allocationSize(value.v1)
            )
        }
        is TrezorResponsePayload.AccountInfo -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeAccountInfoResponse.allocationSize(value.v1)
            )
        }
        is TrezorResponsePayload.ComposeTransaction -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeComposeTransactionResponse.allocationSize(value.v1)
            )
        }
        is TrezorResponsePayload.VerifyMessage -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeVerifyMessageResponse.allocationSize(value.v1)
            )
        }
        is TrezorResponsePayload.MessageSignature -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMessageSignatureResponse.allocationSize(value.v1)
            )
        }
        is TrezorResponsePayload.SignedTransaction -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeSignedTransactionResponse.allocationSize(value.v1)
            )
        }
    }

    override fun write(value: TrezorResponsePayload, buf: ByteBuffer) {
        when(value) {
            is TrezorResponsePayload.Features -> {
                buf.putInt(1)
                FfiConverterTypeFeatureResponse.write(value.v1, buf)
                Unit
            }
            is TrezorResponsePayload.Address -> {
                buf.putInt(2)
                FfiConverterTypeAddressResponse.write(value.v1, buf)
                Unit
            }
            is TrezorResponsePayload.PublicKey -> {
                buf.putInt(3)
                FfiConverterTypePublicKeyResponse.write(value.v1, buf)
                Unit
            }
            is TrezorResponsePayload.AccountInfo -> {
                buf.putInt(4)
                FfiConverterTypeAccountInfoResponse.write(value.v1, buf)
                Unit
            }
            is TrezorResponsePayload.ComposeTransaction -> {
                buf.putInt(5)
                FfiConverterTypeComposeTransactionResponse.write(value.v1, buf)
                Unit
            }
            is TrezorResponsePayload.VerifyMessage -> {
                buf.putInt(6)
                FfiConverterTypeVerifyMessageResponse.write(value.v1, buf)
                Unit
            }
            is TrezorResponsePayload.MessageSignature -> {
                buf.putInt(7)
                FfiConverterTypeMessageSignatureResponse.write(value.v1, buf)
                Unit
            }
            is TrezorResponsePayload.SignedTransaction -> {
                buf.putInt(8)
                FfiConverterTypeSignedTransactionResponse.write(value.v1, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class WordCount {
    
    /**
     * 12-word mnemonic (128 bits of entropy)
     */
    WORDS12,
    /**
     * 15-word mnemonic (160 bits of entropy)
     */
    WORDS15,
    /**
     * 18-word mnemonic (192 bits of entropy)
     */
    WORDS18,
    /**
     * 21-word mnemonic (224 bits of entropy)
     */
    WORDS21,
    /**
     * 24-word mnemonic (256 bits of entropy)
     */
    WORDS24;
    companion object
}


public object FfiConverterTypeWordCount: FfiConverterRustBuffer<WordCount> {
    override fun read(buf: ByteBuffer) = try {
        WordCount.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: WordCount) = 4UL

    override fun write(value: WordCount, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






public object FfiConverterOptionalUByte: FfiConverterRustBuffer<kotlin.UByte?> {
    override fun read(buf: ByteBuffer): kotlin.UByte? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUByte.read(buf)
    }

    override fun allocationSize(value: kotlin.UByte?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUByte.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UByte?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUByte.write(value, buf)
        }
    }
}




public object FfiConverterOptionalUInt: FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalBoolean: FfiConverterRustBuffer<kotlin.Boolean?> {
    override fun read(buf: ByteBuffer): kotlin.Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: kotlin.Boolean?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<kotlin.ByteArray?> {
    override fun read(buf: ByteBuffer): kotlin.ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: kotlin.ByteArray?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCoinPurchaseMemo: FfiConverterRustBuffer<CoinPurchaseMemo?> {
    override fun read(buf: ByteBuffer): CoinPurchaseMemo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCoinPurchaseMemo.read(buf)
    }

    override fun allocationSize(value: CoinPurchaseMemo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCoinPurchaseMemo.allocationSize(value)
        }
    }

    override fun write(value: CoinPurchaseMemo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCoinPurchaseMemo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCommonParams: FfiConverterRustBuffer<CommonParams?> {
    override fun read(buf: ByteBuffer): CommonParams? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCommonParams.read(buf)
    }

    override fun allocationSize(value: CommonParams?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCommonParams.allocationSize(value)
        }
    }

    override fun write(value: CommonParams?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCommonParams.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeComposeAccount: FfiConverterRustBuffer<ComposeAccount?> {
    override fun read(buf: ByteBuffer): ComposeAccount? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeComposeAccount.read(buf)
    }

    override fun allocationSize(value: ComposeAccount?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeComposeAccount.allocationSize(value)
        }
    }

    override fun write(value: ComposeAccount?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeComposeAccount.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCreateCjitOptions: FfiConverterRustBuffer<CreateCjitOptions?> {
    override fun read(buf: ByteBuffer): CreateCjitOptions? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCreateCjitOptions.read(buf)
    }

    override fun allocationSize(value: CreateCjitOptions?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCreateCjitOptions.allocationSize(value)
        }
    }

    override fun write(value: CreateCjitOptions?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCreateCjitOptions.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCreateOrderOptions: FfiConverterRustBuffer<CreateOrderOptions?> {
    override fun read(buf: ByteBuffer): CreateOrderOptions? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCreateOrderOptions.read(buf)
    }

    override fun allocationSize(value: CreateOrderOptions?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCreateOrderOptions.allocationSize(value)
        }
    }

    override fun write(value: CreateOrderOptions?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCreateOrderOptions.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeDeviceParams: FfiConverterRustBuffer<DeviceParams?> {
    override fun read(buf: ByteBuffer): DeviceParams? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDeviceParams.read(buf)
    }

    override fun allocationSize(value: DeviceParams?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeDeviceParams.allocationSize(value)
        }
    }

    override fun write(value: DeviceParams?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDeviceParams.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIBtChannel: FfiConverterRustBuffer<IBtChannel?> {
    override fun read(buf: ByteBuffer): IBtChannel? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIBtChannel.read(buf)
    }

    override fun allocationSize(value: IBtChannel?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIBtChannel.allocationSize(value)
        }
    }

    override fun write(value: IBtChannel?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIBtChannel.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIBtChannelClose: FfiConverterRustBuffer<IBtChannelClose?> {
    override fun read(buf: ByteBuffer): IBtChannelClose? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIBtChannelClose.read(buf)
    }

    override fun allocationSize(value: IBtChannelClose?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIBtChannelClose.allocationSize(value)
        }
    }

    override fun write(value: IBtChannelClose?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIBtChannelClose.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIBtInfo: FfiConverterRustBuffer<IBtInfo?> {
    override fun read(buf: ByteBuffer): IBtInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIBtInfo.read(buf)
    }

    override fun allocationSize(value: IBtInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIBtInfo.allocationSize(value)
        }
    }

    override fun write(value: IBtInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIBtInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIBtOrder: FfiConverterRustBuffer<IBtOrder?> {
    override fun read(buf: ByteBuffer): IBtOrder? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIBtOrder.read(buf)
    }

    override fun allocationSize(value: IBtOrder?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIBtOrder.allocationSize(value)
        }
    }

    override fun write(value: IBtOrder?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIBtOrder.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIBtPayment: FfiConverterRustBuffer<IBtPayment?> {
    override fun read(buf: ByteBuffer): IBtPayment? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIBtPayment.read(buf)
    }

    override fun allocationSize(value: IBtPayment?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIBtPayment.allocationSize(value)
        }
    }

    override fun write(value: IBtPayment?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIBtPayment.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIDiscount: FfiConverterRustBuffer<IDiscount?> {
    override fun read(buf: ByteBuffer): IDiscount? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIDiscount.read(buf)
    }

    override fun allocationSize(value: IDiscount?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIDiscount.allocationSize(value)
        }
    }

    override fun write(value: IDiscount?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIDiscount.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeIGiftCode: FfiConverterRustBuffer<IGiftCode?> {
    override fun read(buf: ByteBuffer): IGiftCode? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeIGiftCode.read(buf)
    }

    override fun allocationSize(value: IGiftCode?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeIGiftCode.allocationSize(value)
        }
    }

    override fun write(value: IGiftCode?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeIGiftCode.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeMultisigRedeemScriptType: FfiConverterRustBuffer<MultisigRedeemScriptType?> {
    override fun read(buf: ByteBuffer): MultisigRedeemScriptType? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMultisigRedeemScriptType.read(buf)
    }

    override fun allocationSize(value: MultisigRedeemScriptType?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeMultisigRedeemScriptType.allocationSize(value)
        }
    }

    override fun write(value: MultisigRedeemScriptType?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeMultisigRedeemScriptType.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRefundMemo: FfiConverterRustBuffer<RefundMemo?> {
    override fun read(buf: ByteBuffer): RefundMemo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRefundMemo.read(buf)
    }

    override fun allocationSize(value: RefundMemo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeRefundMemo.allocationSize(value)
        }
    }

    override fun write(value: RefundMemo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRefundMemo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTextMemo: FfiConverterRustBuffer<TextMemo?> {
    override fun read(buf: ByteBuffer): TextMemo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTextMemo.read(buf)
    }

    override fun allocationSize(value: TextMemo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeTextMemo.allocationSize(value)
        }
    }

    override fun write(value: TextMemo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTextMemo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeUnlockPath: FfiConverterRustBuffer<UnlockPath?> {
    override fun read(buf: ByteBuffer): UnlockPath? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUnlockPath.read(buf)
    }

    override fun allocationSize(value: UnlockPath?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeUnlockPath.allocationSize(value)
        }
    }

    override fun write(value: UnlockPath?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUnlockPath.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeXrpMarker: FfiConverterRustBuffer<XrpMarker?> {
    override fun read(buf: ByteBuffer): XrpMarker? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeXrpMarker.read(buf)
    }

    override fun allocationSize(value: XrpMarker?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeXrpMarker.allocationSize(value)
        }
    }

    override fun write(value: XrpMarker?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeXrpMarker.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeAccountInfoDetails: FfiConverterRustBuffer<AccountInfoDetails?> {
    override fun read(buf: ByteBuffer): AccountInfoDetails? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAccountInfoDetails.read(buf)
    }

    override fun allocationSize(value: AccountInfoDetails?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAccountInfoDetails.allocationSize(value)
        }
    }

    override fun write(value: AccountInfoDetails?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAccountInfoDetails.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeActivity: FfiConverterRustBuffer<Activity?> {
    override fun read(buf: ByteBuffer): Activity? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeActivity.read(buf)
    }

    override fun allocationSize(value: Activity?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeActivity.allocationSize(value)
        }
    }

    override fun write(value: Activity?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeActivity.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeActivityFilter: FfiConverterRustBuffer<ActivityFilter?> {
    override fun read(buf: ByteBuffer): ActivityFilter? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeActivityFilter.read(buf)
    }

    override fun allocationSize(value: ActivityFilter?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeActivityFilter.allocationSize(value)
        }
    }

    override fun write(value: ActivityFilter?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeActivityFilter.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeAmountUnit: FfiConverterRustBuffer<AmountUnit?> {
    override fun read(buf: ByteBuffer): AmountUnit? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAmountUnit.read(buf)
    }

    override fun allocationSize(value: AmountUnit?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeAmountUnit.allocationSize(value)
        }
    }

    override fun write(value: AmountUnit?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAmountUnit.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeBtOrderState2: FfiConverterRustBuffer<BtOrderState2?> {
    override fun read(buf: ByteBuffer): BtOrderState2? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeBtOrderState2.read(buf)
    }

    override fun allocationSize(value: BtOrderState2?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeBtOrderState2.allocationSize(value)
        }
    }

    override fun write(value: BtOrderState2?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeBtOrderState2.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCJitStateEnum: FfiConverterRustBuffer<CJitStateEnum?> {
    override fun read(buf: ByteBuffer): CJitStateEnum? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCJitStateEnum.read(buf)
    }

    override fun allocationSize(value: CJitStateEnum?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeCJitStateEnum.allocationSize(value)
        }
    }

    override fun write(value: CJitStateEnum?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCJitStateEnum.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeDefaultAccountType: FfiConverterRustBuffer<DefaultAccountType?> {
    override fun read(buf: ByteBuffer): DefaultAccountType? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDefaultAccountType.read(buf)
    }

    override fun allocationSize(value: DefaultAccountType?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeDefaultAccountType.allocationSize(value)
        }
    }

    override fun write(value: DefaultAccountType?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDefaultAccountType.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeNetwork: FfiConverterRustBuffer<Network?> {
    override fun read(buf: ByteBuffer): Network? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeNetwork.read(buf)
    }

    override fun allocationSize(value: Network?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeNetwork.allocationSize(value)
        }
    }

    override fun write(value: Network?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeNetwork.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePaymentType: FfiConverterRustBuffer<PaymentType?> {
    override fun read(buf: ByteBuffer): PaymentType? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePaymentType.read(buf)
    }

    override fun allocationSize(value: PaymentType?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypePaymentType.allocationSize(value)
        }
    }

    override fun write(value: PaymentType?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePaymentType.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeScriptType: FfiConverterRustBuffer<ScriptType?> {
    override fun read(buf: ByteBuffer): ScriptType? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeScriptType.read(buf)
    }

    override fun allocationSize(value: ScriptType?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeScriptType.allocationSize(value)
        }
    }

    override fun write(value: ScriptType?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeScriptType.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSortDirection: FfiConverterRustBuffer<SortDirection?> {
    override fun read(buf: ByteBuffer): SortDirection? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSortDirection.read(buf)
    }

    override fun allocationSize(value: SortDirection?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeSortDirection.allocationSize(value)
        }
    }

    override fun write(value: SortDirection?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSortDirection.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTokenFilter: FfiConverterRustBuffer<TokenFilter?> {
    override fun read(buf: ByteBuffer): TokenFilter? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTokenFilter.read(buf)
    }

    override fun allocationSize(value: TokenFilter?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeTokenFilter.allocationSize(value)
        }
    }

    override fun write(value: TokenFilter?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTokenFilter.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTrezorEnvironment: FfiConverterRustBuffer<TrezorEnvironment?> {
    override fun read(buf: ByteBuffer): TrezorEnvironment? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTrezorEnvironment.read(buf)
    }

    override fun allocationSize(value: TrezorEnvironment?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeTrezorEnvironment.allocationSize(value)
        }
    }

    override fun write(value: TrezorEnvironment?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTrezorEnvironment.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeWordCount: FfiConverterRustBuffer<WordCount?> {
    override fun read(buf: ByteBuffer): WordCount? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeWordCount.read(buf)
    }

    override fun allocationSize(value: WordCount?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeWordCount.allocationSize(value)
        }
    }

    override fun write(value: WordCount?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeWordCount.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceUInt: FfiConverterRustBuffer<List<kotlin.UInt>?> {
    override fun read(buf: ByteBuffer): List<kotlin.UInt>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceUInt.read(buf)
    }

    override fun allocationSize(value: List<kotlin.UInt>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceUInt.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.UInt>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<kotlin.String>?> {
    override fun read(buf: ByteBuffer): List<kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeFeeLevel: FfiConverterRustBuffer<List<FeeLevel>?> {
    override fun read(buf: ByteBuffer): List<FeeLevel>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeFeeLevel.read(buf)
    }

    override fun allocationSize(value: List<FeeLevel>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeFeeLevel.allocationSize(value)
        }
    }

    override fun write(value: List<FeeLevel>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeFeeLevel.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeHDNodeType: FfiConverterRustBuffer<List<HdNodeType>?> {
    override fun read(buf: ByteBuffer): List<HdNodeType>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeHDNodeType.read(buf)
    }

    override fun allocationSize(value: List<HdNodeType>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeHDNodeType.allocationSize(value)
        }
    }

    override fun write(value: List<HdNodeType>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeHDNodeType.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeIManualRefund: FfiConverterRustBuffer<List<IManualRefund>?> {
    override fun read(buf: ByteBuffer): List<IManualRefund>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeIManualRefund.read(buf)
    }

    override fun allocationSize(value: List<IManualRefund>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeIManualRefund.allocationSize(value)
        }
    }

    override fun write(value: List<IManualRefund>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeIManualRefund.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypePaymentRequestMemo: FfiConverterRustBuffer<List<PaymentRequestMemo>?> {
    override fun read(buf: ByteBuffer): List<PaymentRequestMemo>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypePaymentRequestMemo.read(buf)
    }

    override fun allocationSize(value: List<PaymentRequestMemo>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypePaymentRequestMemo.allocationSize(value)
        }
    }

    override fun write(value: List<PaymentRequestMemo>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypePaymentRequestMemo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypePrecomposedInput: FfiConverterRustBuffer<List<PrecomposedInput>?> {
    override fun read(buf: ByteBuffer): List<PrecomposedInput>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypePrecomposedInput.read(buf)
    }

    override fun allocationSize(value: List<PrecomposedInput>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypePrecomposedInput.allocationSize(value)
        }
    }

    override fun write(value: List<PrecomposedInput>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypePrecomposedInput.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypePrecomposedOutput: FfiConverterRustBuffer<List<PrecomposedOutput>?> {
    override fun read(buf: ByteBuffer): List<PrecomposedOutput>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypePrecomposedOutput.read(buf)
    }

    override fun allocationSize(value: List<PrecomposedOutput>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypePrecomposedOutput.allocationSize(value)
        }
    }

    override fun write(value: List<PrecomposedOutput>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypePrecomposedOutput.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeRefTransaction: FfiConverterRustBuffer<List<RefTransaction>?> {
    override fun read(buf: ByteBuffer): List<RefTransaction>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeRefTransaction.read(buf)
    }

    override fun allocationSize(value: List<RefTransaction>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeRefTransaction.allocationSize(value)
        }
    }

    override fun write(value: List<RefTransaction>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeRefTransaction.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceTypeTxAckPaymentRequest: FfiConverterRustBuffer<List<TxAckPaymentRequest>?> {
    override fun read(buf: ByteBuffer): List<TxAckPaymentRequest>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypeTxAckPaymentRequest.read(buf)
    }

    override fun allocationSize(value: List<TxAckPaymentRequest>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypeTxAckPaymentRequest.allocationSize(value)
        }
    }

    override fun write(value: List<TxAckPaymentRequest>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypeTxAckPaymentRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>?> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterMapStringString.read(buf)
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterMapStringString.allocationSize(value)
        }
    }

    override fun write(value: Map<kotlin.String, kotlin.String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterMapStringString.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUInt: FfiConverterRustBuffer<List<kotlin.UInt>> {
    override fun read(buf: ByteBuffer): List<kotlin.UInt> {
        val len = buf.getInt()
        return List<kotlin.UInt>(len) {
            FfiConverterUInt.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.UInt>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterUInt.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.UInt>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterUInt.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeAccountUtxo: FfiConverterRustBuffer<List<AccountUtxo>> {
    override fun read(buf: ByteBuffer): List<AccountUtxo> {
        val len = buf.getInt()
        return List<AccountUtxo>(len) {
            FfiConverterTypeAccountUtxo.read(buf)
        }
    }

    override fun allocationSize(value: List<AccountUtxo>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAccountUtxo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<AccountUtxo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAccountUtxo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeAddressInfo: FfiConverterRustBuffer<List<AddressInfo>> {
    override fun read(buf: ByteBuffer): List<AddressInfo> {
        val len = buf.getInt()
        return List<AddressInfo>(len) {
            FfiConverterTypeAddressInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<AddressInfo>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAddressInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<AddressInfo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAddressInfo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFeeLevel: FfiConverterRustBuffer<List<FeeLevel>> {
    override fun read(buf: ByteBuffer): List<FeeLevel> {
        val len = buf.getInt()
        return List<FeeLevel>(len) {
            FfiConverterTypeFeeLevel.read(buf)
        }
    }

    override fun allocationSize(value: List<FeeLevel>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFeeLevel.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FeeLevel>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFeeLevel.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeGetAddressResponse: FfiConverterRustBuffer<List<GetAddressResponse>> {
    override fun read(buf: ByteBuffer): List<GetAddressResponse> {
        val len = buf.getInt()
        return List<GetAddressResponse>(len) {
            FfiConverterTypeGetAddressResponse.read(buf)
        }
    }

    override fun allocationSize(value: List<GetAddressResponse>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeGetAddressResponse.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<GetAddressResponse>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeGetAddressResponse.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeHDNodePathType: FfiConverterRustBuffer<List<HdNodePathType>> {
    override fun read(buf: ByteBuffer): List<HdNodePathType> {
        val len = buf.getInt()
        return List<HdNodePathType>(len) {
            FfiConverterTypeHDNodePathType.read(buf)
        }
    }

    override fun allocationSize(value: List<HdNodePathType>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeHDNodePathType.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<HdNodePathType>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeHDNodePathType.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeHDNodeType: FfiConverterRustBuffer<List<HdNodeType>> {
    override fun read(buf: ByteBuffer): List<HdNodeType> {
        val len = buf.getInt()
        return List<HdNodeType>(len) {
            FfiConverterTypeHDNodeType.read(buf)
        }
    }

    override fun allocationSize(value: List<HdNodeType>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeHDNodeType.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<HdNodeType>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeHDNodeType.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIBtOnchainTransaction: FfiConverterRustBuffer<List<IBtOnchainTransaction>> {
    override fun read(buf: ByteBuffer): List<IBtOnchainTransaction> {
        val len = buf.getInt()
        return List<IBtOnchainTransaction>(len) {
            FfiConverterTypeIBtOnchainTransaction.read(buf)
        }
    }

    override fun allocationSize(value: List<IBtOnchainTransaction>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIBtOnchainTransaction.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<IBtOnchainTransaction>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIBtOnchainTransaction.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIBtOrder: FfiConverterRustBuffer<List<IBtOrder>> {
    override fun read(buf: ByteBuffer): List<IBtOrder> {
        val len = buf.getInt()
        return List<IBtOrder>(len) {
            FfiConverterTypeIBtOrder.read(buf)
        }
    }

    override fun allocationSize(value: List<IBtOrder>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIBtOrder.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<IBtOrder>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIBtOrder.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeICJitEntry: FfiConverterRustBuffer<List<IcJitEntry>> {
    override fun read(buf: ByteBuffer): List<IcJitEntry> {
        val len = buf.getInt()
        return List<IcJitEntry>(len) {
            FfiConverterTypeICJitEntry.read(buf)
        }
    }

    override fun allocationSize(value: List<IcJitEntry>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeICJitEntry.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<IcJitEntry>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeICJitEntry.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeILspNode: FfiConverterRustBuffer<List<ILspNode>> {
    override fun read(buf: ByteBuffer): List<ILspNode> {
        val len = buf.getInt()
        return List<ILspNode>(len) {
            FfiConverterTypeILspNode.read(buf)
        }
    }

    override fun allocationSize(value: List<ILspNode>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeILspNode.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ILspNode>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeILspNode.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeIManualRefund: FfiConverterRustBuffer<List<IManualRefund>> {
    override fun read(buf: ByteBuffer): List<IManualRefund> {
        val len = buf.getInt()
        return List<IManualRefund>(len) {
            FfiConverterTypeIManualRefund.read(buf)
        }
    }

    override fun allocationSize(value: List<IManualRefund>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeIManualRefund.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<IManualRefund>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeIManualRefund.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePaymentRequestMemo: FfiConverterRustBuffer<List<PaymentRequestMemo>> {
    override fun read(buf: ByteBuffer): List<PaymentRequestMemo> {
        val len = buf.getInt()
        return List<PaymentRequestMemo>(len) {
            FfiConverterTypePaymentRequestMemo.read(buf)
        }
    }

    override fun allocationSize(value: List<PaymentRequestMemo>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePaymentRequestMemo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PaymentRequestMemo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePaymentRequestMemo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePrecomposedInput: FfiConverterRustBuffer<List<PrecomposedInput>> {
    override fun read(buf: ByteBuffer): List<PrecomposedInput> {
        val len = buf.getInt()
        return List<PrecomposedInput>(len) {
            FfiConverterTypePrecomposedInput.read(buf)
        }
    }

    override fun allocationSize(value: List<PrecomposedInput>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePrecomposedInput.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PrecomposedInput>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePrecomposedInput.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePrecomposedOutput: FfiConverterRustBuffer<List<PrecomposedOutput>> {
    override fun read(buf: ByteBuffer): List<PrecomposedOutput> {
        val len = buf.getInt()
        return List<PrecomposedOutput>(len) {
            FfiConverterTypePrecomposedOutput.read(buf)
        }
    }

    override fun allocationSize(value: List<PrecomposedOutput>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePrecomposedOutput.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PrecomposedOutput>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePrecomposedOutput.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePrecomposedTransaction: FfiConverterRustBuffer<List<PrecomposedTransaction>> {
    override fun read(buf: ByteBuffer): List<PrecomposedTransaction> {
        val len = buf.getInt()
        return List<PrecomposedTransaction>(len) {
            FfiConverterTypePrecomposedTransaction.read(buf)
        }
    }

    override fun allocationSize(value: List<PrecomposedTransaction>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePrecomposedTransaction.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PrecomposedTransaction>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePrecomposedTransaction.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRefTransaction: FfiConverterRustBuffer<List<RefTransaction>> {
    override fun read(buf: ByteBuffer): List<RefTransaction> {
        val len = buf.getInt()
        return List<RefTransaction>(len) {
            FfiConverterTypeRefTransaction.read(buf)
        }
    }

    override fun allocationSize(value: List<RefTransaction>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeRefTransaction.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RefTransaction>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeRefTransaction.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRefTxInput: FfiConverterRustBuffer<List<RefTxInput>> {
    override fun read(buf: ByteBuffer): List<RefTxInput> {
        val len = buf.getInt()
        return List<RefTxInput>(len) {
            FfiConverterTypeRefTxInput.read(buf)
        }
    }

    override fun allocationSize(value: List<RefTxInput>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeRefTxInput.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RefTxInput>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeRefTxInput.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRefTxOutput: FfiConverterRustBuffer<List<RefTxOutput>> {
    override fun read(buf: ByteBuffer): List<RefTxOutput> {
        val len = buf.getInt()
        return List<RefTxOutput>(len) {
            FfiConverterTypeRefTxOutput.read(buf)
        }
    }

    override fun allocationSize(value: List<RefTxOutput>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeRefTxOutput.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RefTxOutput>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeRefTxOutput.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeTxAckPaymentRequest: FfiConverterRustBuffer<List<TxAckPaymentRequest>> {
    override fun read(buf: ByteBuffer): List<TxAckPaymentRequest> {
        val len = buf.getInt()
        return List<TxAckPaymentRequest>(len) {
            FfiConverterTypeTxAckPaymentRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<TxAckPaymentRequest>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTxAckPaymentRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TxAckPaymentRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTxAckPaymentRequest.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeTxInputType: FfiConverterRustBuffer<List<TxInputType>> {
    override fun read(buf: ByteBuffer): List<TxInputType> {
        val len = buf.getInt()
        return List<TxInputType>(len) {
            FfiConverterTypeTxInputType.read(buf)
        }
    }

    override fun allocationSize(value: List<TxInputType>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTxInputType.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TxInputType>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTxInputType.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeTxOutputType: FfiConverterRustBuffer<List<TxOutputType>> {
    override fun read(buf: ByteBuffer): List<TxOutputType> {
        val len = buf.getInt()
        return List<TxOutputType>(len) {
            FfiConverterTypeTxOutputType.read(buf)
        }
    }

    override fun allocationSize(value: List<TxOutputType>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTxOutputType.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TxOutputType>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTxOutputType.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeActivity: FfiConverterRustBuffer<List<Activity>> {
    override fun read(buf: ByteBuffer): List<Activity> {
        val len = buf.getInt()
        return List<Activity>(len) {
            FfiConverterTypeActivity.read(buf)
        }
    }

    override fun allocationSize(value: List<Activity>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeActivity.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Activity>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeActivity.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeComposeOutput: FfiConverterRustBuffer<List<ComposeOutput>> {
    override fun read(buf: ByteBuffer): List<ComposeOutput> {
        val len = buf.getInt()
        return List<ComposeOutput>(len) {
            FfiConverterTypeComposeOutput.read(buf)
        }
    }

    override fun allocationSize(value: List<ComposeOutput>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeComposeOutput.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ComposeOutput>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeComposeOutput.write(it, buf)
        }
    }
}



public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}








    @Throws(ActivityException::class) fun `addTags`(`activityId`: kotlin.String, `tags`: List<kotlin.String>)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_add_tags(
        FfiConverterString.lower(`activityId`),FfiConverterSequenceString.lower(`tags`),_status)
}
    
    

    @Throws(LnurlException::class) fun `createChannelRequestUrl`(`k1`: kotlin.String, `callback`: kotlin.String, `localNodeId`: kotlin.String, `isPrivate`: kotlin.Boolean, `cancel`: kotlin.Boolean): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(LnurlException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_create_channel_request_url(
        FfiConverterString.lower(`k1`),FfiConverterString.lower(`callback`),FfiConverterString.lower(`localNodeId`),FfiConverterBoolean.lower(`isPrivate`),FfiConverterBoolean.lower(`cancel`),_status)
}
    )
    }
    

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `createCjitEntry`(`channelSizeSat`: kotlin.ULong, `invoiceSat`: kotlin.ULong, `invoiceDescription`: kotlin.String, `nodeId`: kotlin.String, `channelExpiryWeeks`: kotlin.UInt, `options`: CreateCjitOptions?) : IcJitEntry {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_create_cjit_entry(FfiConverterULong.lower(`channelSizeSat`),FfiConverterULong.lower(`invoiceSat`),FfiConverterString.lower(`invoiceDescription`),FfiConverterString.lower(`nodeId`),FfiConverterUInt.lower(`channelExpiryWeeks`),FfiConverterOptionalTypeCreateCjitOptions.lower(`options`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeICJitEntry.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `createOrder`(`lspBalanceSat`: kotlin.ULong, `channelExpiryWeeks`: kotlin.UInt, `options`: CreateOrderOptions?) : IBtOrder {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_create_order(FfiConverterULong.lower(`lspBalanceSat`),FfiConverterUInt.lower(`channelExpiryWeeks`),FfiConverterOptionalTypeCreateOrderOptions.lower(`options`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIBtOrder.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(LnurlException::class) fun `createWithdrawCallbackUrl`(`k1`: kotlin.String, `callback`: kotlin.String, `paymentRequest`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(LnurlException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_create_withdraw_callback_url(
        FfiConverterString.lower(`k1`),FfiConverterString.lower(`callback`),FfiConverterString.lower(`paymentRequest`),_status)
}
    )
    }
    

    @Throws(DecodingException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `decode`(`invoice`: kotlin.String) : Scanner {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_decode(FfiConverterString.lower(`invoice`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeScanner.lift(it) },
        // Error FFI converter
        DecodingException.ErrorHandler,
    )
    }

    @Throws(ActivityException::class) fun `deleteActivityById`(`activityId`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_delete_activity_by_id(
        FfiConverterString.lower(`activityId`),_status)
}
    )
    }
    

    @Throws(AddressException::class) fun `deriveBitcoinAddress`(`mnemonicPhrase`: kotlin.String, `derivationPathStr`: kotlin.String?, `network`: Network?, `bip39Passphrase`: kotlin.String?): GetAddressResponse {
            return FfiConverterTypeGetAddressResponse.lift(
    uniffiRustCallWithError(AddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_derive_bitcoin_address(
        FfiConverterString.lower(`mnemonicPhrase`),FfiConverterOptionalString.lower(`derivationPathStr`),FfiConverterOptionalTypeNetwork.lower(`network`),FfiConverterOptionalString.lower(`bip39Passphrase`),_status)
}
    )
    }
    

    @Throws(AddressException::class) fun `deriveBitcoinAddresses`(`mnemonicPhrase`: kotlin.String, `derivationPathStr`: kotlin.String?, `network`: Network?, `bip39Passphrase`: kotlin.String?, `isChange`: kotlin.Boolean?, `startIndex`: kotlin.UInt?, `count`: kotlin.UInt?): GetAddressesResponse {
            return FfiConverterTypeGetAddressesResponse.lift(
    uniffiRustCallWithError(AddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_derive_bitcoin_addresses(
        FfiConverterString.lower(`mnemonicPhrase`),FfiConverterOptionalString.lower(`derivationPathStr`),FfiConverterOptionalTypeNetwork.lower(`network`),FfiConverterOptionalString.lower(`bip39Passphrase`),FfiConverterOptionalBoolean.lower(`isChange`),FfiConverterOptionalUInt.lower(`startIndex`),FfiConverterOptionalUInt.lower(`count`),_status)
}
    )
    }
    

    @Throws(AddressException::class) fun `derivePrivateKey`(`mnemonicPhrase`: kotlin.String, `derivationPathStr`: kotlin.String?, `network`: Network?, `bip39Passphrase`: kotlin.String?): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(AddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_derive_private_key(
        FfiConverterString.lower(`mnemonicPhrase`),FfiConverterOptionalString.lower(`derivationPathStr`),FfiConverterOptionalTypeNetwork.lower(`network`),FfiConverterOptionalString.lower(`bip39Passphrase`),_status)
}
    )
    }
    

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `estimateOrderFee`(`lspBalanceSat`: kotlin.ULong, `channelExpiryWeeks`: kotlin.UInt, `options`: CreateOrderOptions?) : IBtEstimateFeeResponse {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_estimate_order_fee(FfiConverterULong.lower(`lspBalanceSat`),FfiConverterUInt.lower(`channelExpiryWeeks`),FfiConverterOptionalTypeCreateOrderOptions.lower(`options`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIBtEstimateFeeResponse.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `estimateOrderFeeFull`(`lspBalanceSat`: kotlin.ULong, `channelExpiryWeeks`: kotlin.UInt, `options`: CreateOrderOptions?) : IBtEstimateFeeResponse2 {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_estimate_order_fee_full(FfiConverterULong.lower(`lspBalanceSat`),FfiConverterUInt.lower(`channelExpiryWeeks`),FfiConverterOptionalTypeCreateOrderOptions.lower(`options`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIBtEstimateFeeResponse2.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(AddressException::class) fun `generateMnemonic`(`wordCount`: WordCount?): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(AddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_generate_mnemonic(
        FfiConverterOptionalTypeWordCount.lower(`wordCount`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getActivities`(`filter`: ActivityFilter?, `txType`: PaymentType?, `tags`: List<kotlin.String>?, `search`: kotlin.String?, `minDate`: kotlin.ULong?, `maxDate`: kotlin.ULong?, `limit`: kotlin.UInt?, `sortDirection`: SortDirection?): List<Activity> {
            return FfiConverterSequenceTypeActivity.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_activities(
        FfiConverterOptionalTypeActivityFilter.lower(`filter`),FfiConverterOptionalTypePaymentType.lower(`txType`),FfiConverterOptionalSequenceString.lower(`tags`),FfiConverterOptionalString.lower(`search`),FfiConverterOptionalULong.lower(`minDate`),FfiConverterOptionalULong.lower(`maxDate`),FfiConverterOptionalUInt.lower(`limit`),FfiConverterOptionalTypeSortDirection.lower(`sortDirection`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getActivitiesByTag`(`tag`: kotlin.String, `limit`: kotlin.UInt?, `sortDirection`: SortDirection?): List<Activity> {
            return FfiConverterSequenceTypeActivity.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_activities_by_tag(
        FfiConverterString.lower(`tag`),FfiConverterOptionalUInt.lower(`limit`),FfiConverterOptionalTypeSortDirection.lower(`sortDirection`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getActivityById`(`activityId`: kotlin.String): Activity? {
            return FfiConverterOptionalTypeActivity.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_activity_by_id(
        FfiConverterString.lower(`activityId`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `getAllUniqueTags`(): List<kotlin.String> {
            return FfiConverterSequenceString.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_all_unique_tags(
        _status)
}
    )
    }
    

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getCjitEntries`(`entryIds`: List<kotlin.String>?, `filter`: CJitStateEnum?, `refresh`: kotlin.Boolean) : List<IcJitEntry> {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_cjit_entries(FfiConverterOptionalSequenceString.lower(`entryIds`),FfiConverterOptionalTypeCJitStateEnum.lower(`filter`),FfiConverterBoolean.lower(`refresh`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypeICJitEntry.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getGift`(`giftId`: kotlin.String) : IGift {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_gift(FfiConverterString.lower(`giftId`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIGift.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getInfo`(`refresh`: kotlin.Boolean?) : IBtInfo? {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_info(FfiConverterOptionalBoolean.lower(`refresh`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalTypeIBtInfo.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(LnurlException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getLnurlInvoice`(`address`: kotlin.String, `amountSatoshis`: kotlin.ULong) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_lnurl_invoice(FfiConverterString.lower(`address`),FfiConverterULong.lower(`amountSatoshis`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LnurlException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getMinZeroConfTxFee`(`orderId`: kotlin.String) : IBt0ConfMinTxFeeWindow {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_min_zero_conf_tx_fee(FfiConverterString.lower(`orderId`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIBt0ConfMinTxFeeWindow.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getOrders`(`orderIds`: List<kotlin.String>?, `filter`: BtOrderState2?, `refresh`: kotlin.Boolean) : List<IBtOrder> {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_orders(FfiConverterOptionalSequenceString.lower(`orderIds`),FfiConverterOptionalTypeBtOrderState2.lower(`filter`),FfiConverterBoolean.lower(`refresh`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypeIBtOrder.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `getPayment`(`paymentId`: kotlin.String) : IBtBolt11Invoice {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_payment(FfiConverterString.lower(`paymentId`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIBtBolt11Invoice.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(ActivityException::class) fun `getTags`(`activityId`: kotlin.String): List<kotlin.String> {
            return FfiConverterSequenceString.lift(
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_get_tags(
        FfiConverterString.lower(`activityId`),_status)
}
    )
    }
    

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `giftOrder`(`clientNodeId`: kotlin.String, `code`: kotlin.String) : IGift {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_gift_order(FfiConverterString.lower(`clientNodeId`),FfiConverterString.lower(`code`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIGift.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `giftPay`(`invoice`: kotlin.String) : IGift {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_gift_pay(FfiConverterString.lower(`invoice`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIGift.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(DbException::class) fun `initDb`(`basePath`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(DbException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_init_db(
        FfiConverterString.lower(`basePath`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `insertActivity`(`activity`: Activity)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_insert_activity(
        FfiConverterTypeActivity.lower(`activity`),_status)
}
    
    

    @Throws(LnurlException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `lnurlAuth`(`domain`: kotlin.String, `k1`: kotlin.String, `callback`: kotlin.String, `bip32Mnemonic`: kotlin.String, `network`: Network?, `bip39Passphrase`: kotlin.String?) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_lnurl_auth(FfiConverterString.lower(`domain`),FfiConverterString.lower(`k1`),FfiConverterString.lower(`callback`),FfiConverterString.lower(`bip32Mnemonic`),FfiConverterOptionalTypeNetwork.lower(`network`),FfiConverterOptionalString.lower(`bip39Passphrase`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        LnurlException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `openChannel`(`orderId`: kotlin.String, `connectionString`: kotlin.String) : IBtOrder {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_open_channel(FfiConverterString.lower(`orderId`),FfiConverterString.lower(`connectionString`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIBtOrder.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

        /**
         * Refresh all active CJIT entries in the database with latest data from the LSP
         */
    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `refreshActiveCjitEntries`() : List<IcJitEntry> {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_refresh_active_cjit_entries(),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypeICJitEntry.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

        /**
         * Refresh all active orders in the database with latest data from the LSP
         */
    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `refreshActiveOrders`() : List<IBtOrder> {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_refresh_active_orders(),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypeIBtOrder.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `registerDevice`(`deviceToken`: kotlin.String, `publicKey`: kotlin.String, `features`: List<kotlin.String>, `nodeId`: kotlin.String, `isoTimestamp`: kotlin.String, `signature`: kotlin.String, `isProduction`: kotlin.Boolean?, `customUrl`: kotlin.String?) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_register_device(FfiConverterString.lower(`deviceToken`),FfiConverterString.lower(`publicKey`),FfiConverterSequenceString.lower(`features`),FfiConverterString.lower(`nodeId`),FfiConverterString.lower(`isoTimestamp`),FfiConverterString.lower(`signature`),FfiConverterOptionalBoolean.lower(`isProduction`),FfiConverterOptionalString.lower(`customUrl`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `regtestCloseChannel`(`fundingTxId`: kotlin.String, `vout`: kotlin.UInt, `forceCloseAfterS`: kotlin.ULong?) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_regtest_close_channel(FfiConverterString.lower(`fundingTxId`),FfiConverterUInt.lower(`vout`),FfiConverterOptionalULong.lower(`forceCloseAfterS`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `regtestDeposit`(`address`: kotlin.String, `amountSat`: kotlin.ULong?) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_regtest_deposit(FfiConverterString.lower(`address`),FfiConverterOptionalULong.lower(`amountSat`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `regtestGetPayment`(`paymentId`: kotlin.String) : IBtBolt11Invoice {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_regtest_get_payment(FfiConverterString.lower(`paymentId`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterTypeIBtBolt11Invoice.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `regtestMine`(`count`: kotlin.UInt?) {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_regtest_mine(FfiConverterOptionalUInt.lower(`count`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `regtestPay`(`invoice`: kotlin.String, `amountSat`: kotlin.ULong?) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_regtest_pay(FfiConverterString.lower(`invoice`),FfiConverterOptionalULong.lower(`amountSat`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(ActivityException::class) fun `removeTags`(`activityId`: kotlin.String, `tags`: List<kotlin.String>)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_remove_tags(
        FfiConverterString.lower(`activityId`),FfiConverterSequenceString.lower(`tags`),_status)
}
    
    

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `testNotification`(`deviceToken`: kotlin.String, `secretMessage`: kotlin.String, `notificationType`: kotlin.String?, `customUrl`: kotlin.String?) : kotlin.String {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_test_notification(FfiConverterString.lower(`deviceToken`),FfiConverterString.lower(`secretMessage`),FfiConverterOptionalString.lower(`notificationType`),FfiConverterOptionalString.lower(`customUrl`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(TrezorConnectException::class) fun `trezorComposeTransaction`(`outputs`: List<ComposeOutput>, `coin`: kotlin.String, `callbackUrl`: kotlin.String, `requestId`: kotlin.String?, `trezorEnvironment`: TrezorEnvironment?, `push`: kotlin.Boolean?, `sequence`: kotlin.UInt?, `account`: ComposeAccount?, `feeLevels`: List<FeeLevel>?, `skipPermutation`: kotlin.Boolean?, `common`: CommonParams?): DeepLinkResult {
            return FfiConverterTypeDeepLinkResult.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_compose_transaction(
        FfiConverterSequenceTypeComposeOutput.lower(`outputs`),FfiConverterString.lower(`coin`),FfiConverterString.lower(`callbackUrl`),FfiConverterOptionalString.lower(`requestId`),FfiConverterOptionalTypeTrezorEnvironment.lower(`trezorEnvironment`),FfiConverterOptionalBoolean.lower(`push`),FfiConverterOptionalUInt.lower(`sequence`),FfiConverterOptionalTypeComposeAccount.lower(`account`),FfiConverterOptionalSequenceTypeFeeLevel.lower(`feeLevels`),FfiConverterOptionalBoolean.lower(`skipPermutation`),FfiConverterOptionalTypeCommonParams.lower(`common`),_status)
}
    )
    }
    

    @Throws(TrezorConnectException::class) fun `trezorGetAccountInfo`(`coin`: kotlin.String, `callbackUrl`: kotlin.String, `requestId`: kotlin.String?, `trezorEnvironment`: TrezorEnvironment?, `path`: kotlin.String?, `descriptor`: kotlin.String?, `details`: AccountInfoDetails?, `tokens`: TokenFilter?, `page`: kotlin.UInt?, `pageSize`: kotlin.UInt?, `from`: kotlin.UInt?, `to`: kotlin.UInt?, `gap`: kotlin.UInt?, `contractFilter`: kotlin.String?, `marker`: XrpMarker?, `defaultAccountType`: DefaultAccountType?, `suppressBackupWarning`: kotlin.Boolean?, `common`: CommonParams?): DeepLinkResult {
            return FfiConverterTypeDeepLinkResult.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_get_account_info(
        FfiConverterString.lower(`coin`),FfiConverterString.lower(`callbackUrl`),FfiConverterOptionalString.lower(`requestId`),FfiConverterOptionalTypeTrezorEnvironment.lower(`trezorEnvironment`),FfiConverterOptionalString.lower(`path`),FfiConverterOptionalString.lower(`descriptor`),FfiConverterOptionalTypeAccountInfoDetails.lower(`details`),FfiConverterOptionalTypeTokenFilter.lower(`tokens`),FfiConverterOptionalUInt.lower(`page`),FfiConverterOptionalUInt.lower(`pageSize`),FfiConverterOptionalUInt.lower(`from`),FfiConverterOptionalUInt.lower(`to`),FfiConverterOptionalUInt.lower(`gap`),FfiConverterOptionalString.lower(`contractFilter`),FfiConverterOptionalTypeXrpMarker.lower(`marker`),FfiConverterOptionalTypeDefaultAccountType.lower(`defaultAccountType`),FfiConverterOptionalBoolean.lower(`suppressBackupWarning`),FfiConverterOptionalTypeCommonParams.lower(`common`),_status)
}
    )
    }
    

    @Throws(TrezorConnectException::class) fun `trezorGetAddress`(`path`: kotlin.String, `callbackUrl`: kotlin.String, `requestId`: kotlin.String?, `trezorEnvironment`: TrezorEnvironment?, `address`: kotlin.String?, `showOnTrezor`: kotlin.Boolean?, `chunkify`: kotlin.Boolean?, `useEventListener`: kotlin.Boolean?, `coin`: kotlin.String?, `crossChain`: kotlin.Boolean?, `multisig`: MultisigRedeemScriptType?, `scriptType`: kotlin.String?, `unlockPath`: UnlockPath?, `common`: CommonParams?): DeepLinkResult {
            return FfiConverterTypeDeepLinkResult.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_get_address(
        FfiConverterString.lower(`path`),FfiConverterString.lower(`callbackUrl`),FfiConverterOptionalString.lower(`requestId`),FfiConverterOptionalTypeTrezorEnvironment.lower(`trezorEnvironment`),FfiConverterOptionalString.lower(`address`),FfiConverterOptionalBoolean.lower(`showOnTrezor`),FfiConverterOptionalBoolean.lower(`chunkify`),FfiConverterOptionalBoolean.lower(`useEventListener`),FfiConverterOptionalString.lower(`coin`),FfiConverterOptionalBoolean.lower(`crossChain`),FfiConverterOptionalTypeMultisigRedeemScriptType.lower(`multisig`),FfiConverterOptionalString.lower(`scriptType`),FfiConverterOptionalTypeUnlockPath.lower(`unlockPath`),FfiConverterOptionalTypeCommonParams.lower(`common`),_status)
}
    )
    }
    

    @Throws(TrezorConnectException::class) fun `trezorGetFeatures`(`callbackUrl`: kotlin.String, `requestId`: kotlin.String?, `trezorEnvironment`: TrezorEnvironment?): DeepLinkResult {
            return FfiConverterTypeDeepLinkResult.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_get_features(
        FfiConverterString.lower(`callbackUrl`),FfiConverterOptionalString.lower(`requestId`),FfiConverterOptionalTypeTrezorEnvironment.lower(`trezorEnvironment`),_status)
}
    )
    }
    

    @Throws(TrezorConnectException::class) fun `trezorHandleDeepLink`(`callbackUrl`: kotlin.String): TrezorResponsePayload {
            return FfiConverterTypeTrezorResponsePayload.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_handle_deep_link(
        FfiConverterString.lower(`callbackUrl`),_status)
}
    )
    }
    

    @Throws(TrezorConnectException::class) fun `trezorSignMessage`(`path`: kotlin.String, `message`: kotlin.String, `callbackUrl`: kotlin.String, `requestId`: kotlin.String?, `trezorEnvironment`: TrezorEnvironment?, `coin`: kotlin.String?, `hex`: kotlin.Boolean?, `noScriptType`: kotlin.Boolean?, `common`: CommonParams?): DeepLinkResult {
            return FfiConverterTypeDeepLinkResult.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_sign_message(
        FfiConverterString.lower(`path`),FfiConverterString.lower(`message`),FfiConverterString.lower(`callbackUrl`),FfiConverterOptionalString.lower(`requestId`),FfiConverterOptionalTypeTrezorEnvironment.lower(`trezorEnvironment`),FfiConverterOptionalString.lower(`coin`),FfiConverterOptionalBoolean.lower(`hex`),FfiConverterOptionalBoolean.lower(`noScriptType`),FfiConverterOptionalTypeCommonParams.lower(`common`),_status)
}
    )
    }
    

    @Throws(TrezorConnectException::class) fun `trezorSignTransaction`(`coin`: kotlin.String, `inputs`: List<TxInputType>, `outputs`: List<TxOutputType>, `callbackUrl`: kotlin.String, `requestId`: kotlin.String?, `trezorEnvironment`: TrezorEnvironment?, `refTxs`: List<RefTransaction>?, `paymentRequests`: List<TxAckPaymentRequest>?, `locktime`: kotlin.UInt?, `version`: kotlin.UInt?, `expiry`: kotlin.UInt?, `versionGroupId`: kotlin.UInt?, `overwintered`: kotlin.Boolean?, `timestamp`: kotlin.UInt?, `branchId`: kotlin.UInt?, `push`: kotlin.Boolean?, `amountUnit`: AmountUnit?, `unlockPath`: UnlockPath?, `serialize`: kotlin.Boolean?, `chunkify`: kotlin.Boolean?, `common`: CommonParams?): DeepLinkResult {
            return FfiConverterTypeDeepLinkResult.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_sign_transaction(
        FfiConverterString.lower(`coin`),FfiConverterSequenceTypeTxInputType.lower(`inputs`),FfiConverterSequenceTypeTxOutputType.lower(`outputs`),FfiConverterString.lower(`callbackUrl`),FfiConverterOptionalString.lower(`requestId`),FfiConverterOptionalTypeTrezorEnvironment.lower(`trezorEnvironment`),FfiConverterOptionalSequenceTypeRefTransaction.lower(`refTxs`),FfiConverterOptionalSequenceTypeTxAckPaymentRequest.lower(`paymentRequests`),FfiConverterOptionalUInt.lower(`locktime`),FfiConverterOptionalUInt.lower(`version`),FfiConverterOptionalUInt.lower(`expiry`),FfiConverterOptionalUInt.lower(`versionGroupId`),FfiConverterOptionalBoolean.lower(`overwintered`),FfiConverterOptionalUInt.lower(`timestamp`),FfiConverterOptionalUInt.lower(`branchId`),FfiConverterOptionalBoolean.lower(`push`),FfiConverterOptionalTypeAmountUnit.lower(`amountUnit`),FfiConverterOptionalTypeUnlockPath.lower(`unlockPath`),FfiConverterOptionalBoolean.lower(`serialize`),FfiConverterOptionalBoolean.lower(`chunkify`),FfiConverterOptionalTypeCommonParams.lower(`common`),_status)
}
    )
    }
    

    @Throws(TrezorConnectException::class) fun `trezorVerifyMessage`(`address`: kotlin.String, `signature`: kotlin.String, `message`: kotlin.String, `coin`: kotlin.String, `callbackUrl`: kotlin.String, `requestId`: kotlin.String?, `trezorEnvironment`: TrezorEnvironment?, `hex`: kotlin.Boolean?, `common`: CommonParams?): DeepLinkResult {
            return FfiConverterTypeDeepLinkResult.lift(
    uniffiRustCallWithError(TrezorConnectException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_trezor_verify_message(
        FfiConverterString.lower(`address`),FfiConverterString.lower(`signature`),FfiConverterString.lower(`message`),FfiConverterString.lower(`coin`),FfiConverterString.lower(`callbackUrl`),FfiConverterOptionalString.lower(`requestId`),FfiConverterOptionalTypeTrezorEnvironment.lower(`trezorEnvironment`),FfiConverterOptionalBoolean.lower(`hex`),FfiConverterOptionalTypeCommonParams.lower(`common`),_status)
}
    )
    }
    

    @Throws(ActivityException::class) fun `updateActivity`(`activityId`: kotlin.String, `activity`: Activity)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_update_activity(
        FfiConverterString.lower(`activityId`),FfiConverterTypeActivity.lower(`activity`),_status)
}
    
    

    @Throws(BlocktankException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `updateBlocktankUrl`(`newUrl`: kotlin.String) {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_update_blocktank_url(FfiConverterString.lower(`newUrl`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_bitkitcore_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        BlocktankException.ErrorHandler,
    )
    }

    @Throws(ActivityException::class) fun `upsertActivity`(`activity`: Activity)
        = 
    uniffiRustCallWithError(ActivityException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_upsert_activity(
        FfiConverterTypeActivity.lower(`activity`),_status)
}
    
    

    @Throws(AddressException::class) fun `validateBitcoinAddress`(`address`: kotlin.String): ValidationResult {
            return FfiConverterTypeValidationResult.lift(
    uniffiRustCallWithError(AddressException) { _status ->
    UniffiLib.INSTANCE.uniffi_bitkitcore_fn_func_validate_bitcoin_address(
        FfiConverterString.lower(`address`),_status)
}
    )
    }
    


