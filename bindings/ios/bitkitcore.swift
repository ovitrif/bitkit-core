// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(bitkitcoreFFI)
import bitkitcoreFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_bitkitcore_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_bitkitcore_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


/**
 * Account addresses
 */
public struct AccountAddresses {
    /**
     * Used addresses
     */
    public var used: [AddressInfo]
    /**
     * Unused addresses
     */
    public var unused: [AddressInfo]
    /**
     * Change addresses
     */
    public var change: [AddressInfo]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Used addresses
         */used: [AddressInfo], 
        /**
         * Unused addresses
         */unused: [AddressInfo], 
        /**
         * Change addresses
         */change: [AddressInfo]) {
        self.used = used
        self.unused = unused
        self.change = change
    }
}



extension AccountAddresses: Equatable, Hashable {
    public static func ==(lhs: AccountAddresses, rhs: AccountAddresses) -> Bool {
        if lhs.used != rhs.used {
            return false
        }
        if lhs.unused != rhs.unused {
            return false
        }
        if lhs.change != rhs.change {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(used)
        hasher.combine(unused)
        hasher.combine(change)
    }
}


public struct FfiConverterTypeAccountAddresses: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountAddresses {
        return
            try AccountAddresses(
                used: FfiConverterSequenceTypeAddressInfo.read(from: &buf), 
                unused: FfiConverterSequenceTypeAddressInfo.read(from: &buf), 
                change: FfiConverterSequenceTypeAddressInfo.read(from: &buf)
        )
    }

    public static func write(_ value: AccountAddresses, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeAddressInfo.write(value.used, into: &buf)
        FfiConverterSequenceTypeAddressInfo.write(value.unused, into: &buf)
        FfiConverterSequenceTypeAddressInfo.write(value.change, into: &buf)
    }
}


public func FfiConverterTypeAccountAddresses_lift(_ buf: RustBuffer) throws -> AccountAddresses {
    return try FfiConverterTypeAccountAddresses.lift(buf)
}

public func FfiConverterTypeAccountAddresses_lower(_ value: AccountAddresses) -> RustBuffer {
    return FfiConverterTypeAccountAddresses.lower(value)
}


/**
 * Account info response
 */
public struct AccountInfoResponse {
    public var id: UInt32
    public var path: String
    public var descriptor: String
    public var legacyXpub: String?
    public var balance: String
    public var availableBalance: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt32, path: String, descriptor: String, legacyXpub: String?, balance: String, availableBalance: String) {
        self.id = id
        self.path = path
        self.descriptor = descriptor
        self.legacyXpub = legacyXpub
        self.balance = balance
        self.availableBalance = availableBalance
    }
}



extension AccountInfoResponse: Equatable, Hashable {
    public static func ==(lhs: AccountInfoResponse, rhs: AccountInfoResponse) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        if lhs.descriptor != rhs.descriptor {
            return false
        }
        if lhs.legacyXpub != rhs.legacyXpub {
            return false
        }
        if lhs.balance != rhs.balance {
            return false
        }
        if lhs.availableBalance != rhs.availableBalance {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(path)
        hasher.combine(descriptor)
        hasher.combine(legacyXpub)
        hasher.combine(balance)
        hasher.combine(availableBalance)
    }
}


public struct FfiConverterTypeAccountInfoResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountInfoResponse {
        return
            try AccountInfoResponse(
                id: FfiConverterUInt32.read(from: &buf), 
                path: FfiConverterString.read(from: &buf), 
                descriptor: FfiConverterString.read(from: &buf), 
                legacyXpub: FfiConverterOptionString.read(from: &buf), 
                balance: FfiConverterString.read(from: &buf), 
                availableBalance: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AccountInfoResponse, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.id, into: &buf)
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterString.write(value.descriptor, into: &buf)
        FfiConverterOptionString.write(value.legacyXpub, into: &buf)
        FfiConverterString.write(value.balance, into: &buf)
        FfiConverterString.write(value.availableBalance, into: &buf)
    }
}


public func FfiConverterTypeAccountInfoResponse_lift(_ buf: RustBuffer) throws -> AccountInfoResponse {
    return try FfiConverterTypeAccountInfoResponse.lift(buf)
}

public func FfiConverterTypeAccountInfoResponse_lower(_ value: AccountInfoResponse) -> RustBuffer {
    return FfiConverterTypeAccountInfoResponse.lower(value)
}


/**
 * UTXO information for account
 */
public struct AccountUtxo {
    /**
     * Transaction ID
     */
    public var txid: String
    /**
     * Output index
     */
    public var vout: UInt32
    /**
     * Amount in satoshis
     */
    public var amount: String
    /**
     * Block height
     */
    public var blockHeight: UInt32?
    /**
     * Address
     */
    public var address: String
    /**
     * Derivation path
     */
    public var path: String
    /**
     * Number of confirmations
     */
    public var confirmations: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Transaction ID
         */txid: String, 
        /**
         * Output index
         */vout: UInt32, 
        /**
         * Amount in satoshis
         */amount: String, 
        /**
         * Block height
         */blockHeight: UInt32?, 
        /**
         * Address
         */address: String, 
        /**
         * Derivation path
         */path: String, 
        /**
         * Number of confirmations
         */confirmations: UInt32?) {
        self.txid = txid
        self.vout = vout
        self.amount = amount
        self.blockHeight = blockHeight
        self.address = address
        self.path = path
        self.confirmations = confirmations
    }
}



extension AccountUtxo: Equatable, Hashable {
    public static func ==(lhs: AccountUtxo, rhs: AccountUtxo) -> Bool {
        if lhs.txid != rhs.txid {
            return false
        }
        if lhs.vout != rhs.vout {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.blockHeight != rhs.blockHeight {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        if lhs.confirmations != rhs.confirmations {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txid)
        hasher.combine(vout)
        hasher.combine(amount)
        hasher.combine(blockHeight)
        hasher.combine(address)
        hasher.combine(path)
        hasher.combine(confirmations)
    }
}


public struct FfiConverterTypeAccountUtxo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountUtxo {
        return
            try AccountUtxo(
                txid: FfiConverterString.read(from: &buf), 
                vout: FfiConverterUInt32.read(from: &buf), 
                amount: FfiConverterString.read(from: &buf), 
                blockHeight: FfiConverterOptionUInt32.read(from: &buf), 
                address: FfiConverterString.read(from: &buf), 
                path: FfiConverterString.read(from: &buf), 
                confirmations: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: AccountUtxo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.txid, into: &buf)
        FfiConverterUInt32.write(value.vout, into: &buf)
        FfiConverterString.write(value.amount, into: &buf)
        FfiConverterOptionUInt32.write(value.blockHeight, into: &buf)
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterOptionUInt32.write(value.confirmations, into: &buf)
    }
}


public func FfiConverterTypeAccountUtxo_lift(_ buf: RustBuffer) throws -> AccountUtxo {
    return try FfiConverterTypeAccountUtxo.lift(buf)
}

public func FfiConverterTypeAccountUtxo_lower(_ value: AccountUtxo) -> RustBuffer {
    return FfiConverterTypeAccountUtxo.lower(value)
}


/**
 * Address information
 */
public struct AddressInfo {
    /**
     * Address string
     */
    public var address: String
    /**
     * Derivation path
     */
    public var path: String
    /**
     * Number of transfers
     */
    public var transfers: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Address string
         */address: String, 
        /**
         * Derivation path
         */path: String, 
        /**
         * Number of transfers
         */transfers: UInt32) {
        self.address = address
        self.path = path
        self.transfers = transfers
    }
}



extension AddressInfo: Equatable, Hashable {
    public static func ==(lhs: AddressInfo, rhs: AddressInfo) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        if lhs.transfers != rhs.transfers {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(path)
        hasher.combine(transfers)
    }
}


public struct FfiConverterTypeAddressInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressInfo {
        return
            try AddressInfo(
                address: FfiConverterString.read(from: &buf), 
                path: FfiConverterString.read(from: &buf), 
                transfers: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: AddressInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterUInt32.write(value.transfers, into: &buf)
    }
}


public func FfiConverterTypeAddressInfo_lift(_ buf: RustBuffer) throws -> AddressInfo {
    return try FfiConverterTypeAddressInfo.lift(buf)
}

public func FfiConverterTypeAddressInfo_lower(_ value: AddressInfo) -> RustBuffer {
    return FfiConverterTypeAddressInfo.lower(value)
}


/**
 * Address response containing the derived address information
 */
public struct AddressResponse {
    public var address: String
    public var path: [UInt32]
    public var serializedPath: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, path: [UInt32], serializedPath: String) {
        self.address = address
        self.path = path
        self.serializedPath = serializedPath
    }
}



extension AddressResponse: Equatable, Hashable {
    public static func ==(lhs: AddressResponse, rhs: AddressResponse) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        if lhs.serializedPath != rhs.serializedPath {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(path)
        hasher.combine(serializedPath)
    }
}


public struct FfiConverterTypeAddressResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressResponse {
        return
            try AddressResponse(
                address: FfiConverterString.read(from: &buf), 
                path: FfiConverterSequenceUInt32.read(from: &buf), 
                serializedPath: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AddressResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterSequenceUInt32.write(value.path, into: &buf)
        FfiConverterString.write(value.serializedPath, into: &buf)
    }
}


public func FfiConverterTypeAddressResponse_lift(_ buf: RustBuffer) throws -> AddressResponse {
    return try FfiConverterTypeAddressResponse.lift(buf)
}

public func FfiConverterTypeAddressResponse_lower(_ value: AddressResponse) -> RustBuffer {
    return FfiConverterTypeAddressResponse.lower(value)
}


/**
 * Coin purchase memo
 */
public struct CoinPurchaseMemo {
    /**
     * Coin type
     */
    public var coinType: UInt32
    /**
     * Amount
     */
    public var amount: UInt64
    /**
     * Address
     */
    public var address: String
    /**
     * MAC
     */
    public var mac: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Coin type
         */coinType: UInt32, 
        /**
         * Amount
         */amount: UInt64, 
        /**
         * Address
         */address: String, 
        /**
         * MAC
         */mac: String) {
        self.coinType = coinType
        self.amount = amount
        self.address = address
        self.mac = mac
    }
}



extension CoinPurchaseMemo: Equatable, Hashable {
    public static func ==(lhs: CoinPurchaseMemo, rhs: CoinPurchaseMemo) -> Bool {
        if lhs.coinType != rhs.coinType {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.mac != rhs.mac {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(coinType)
        hasher.combine(amount)
        hasher.combine(address)
        hasher.combine(mac)
    }
}


public struct FfiConverterTypeCoinPurchaseMemo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CoinPurchaseMemo {
        return
            try CoinPurchaseMemo(
                coinType: FfiConverterUInt32.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                address: FfiConverterString.read(from: &buf), 
                mac: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CoinPurchaseMemo, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.coinType, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.mac, into: &buf)
    }
}


public func FfiConverterTypeCoinPurchaseMemo_lift(_ buf: RustBuffer) throws -> CoinPurchaseMemo {
    return try FfiConverterTypeCoinPurchaseMemo.lift(buf)
}

public func FfiConverterTypeCoinPurchaseMemo_lower(_ value: CoinPurchaseMemo) -> RustBuffer {
    return FfiConverterTypeCoinPurchaseMemo.lower(value)
}


/**
 * Common parameters for all Trezor Connect methods
 */
public struct CommonParams {
    /**
     * Specific device instance to use
     */
    public var device: DeviceParams?
    /**
     * Set to true if method should use empty passphrase
     */
    public var useEmptyPassphrase: Bool?
    /**
     * Allow seedless device
     */
    public var allowSeedlessDevice: Bool?
    /**
     * Skip final reload
     */
    public var skipFinalReload: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Specific device instance to use
         */device: DeviceParams?, 
        /**
         * Set to true if method should use empty passphrase
         */useEmptyPassphrase: Bool?, 
        /**
         * Allow seedless device
         */allowSeedlessDevice: Bool?, 
        /**
         * Skip final reload
         */skipFinalReload: Bool?) {
        self.device = device
        self.useEmptyPassphrase = useEmptyPassphrase
        self.allowSeedlessDevice = allowSeedlessDevice
        self.skipFinalReload = skipFinalReload
    }
}



extension CommonParams: Equatable, Hashable {
    public static func ==(lhs: CommonParams, rhs: CommonParams) -> Bool {
        if lhs.device != rhs.device {
            return false
        }
        if lhs.useEmptyPassphrase != rhs.useEmptyPassphrase {
            return false
        }
        if lhs.allowSeedlessDevice != rhs.allowSeedlessDevice {
            return false
        }
        if lhs.skipFinalReload != rhs.skipFinalReload {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(device)
        hasher.combine(useEmptyPassphrase)
        hasher.combine(allowSeedlessDevice)
        hasher.combine(skipFinalReload)
    }
}


public struct FfiConverterTypeCommonParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CommonParams {
        return
            try CommonParams(
                device: FfiConverterOptionTypeDeviceParams.read(from: &buf), 
                useEmptyPassphrase: FfiConverterOptionBool.read(from: &buf), 
                allowSeedlessDevice: FfiConverterOptionBool.read(from: &buf), 
                skipFinalReload: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: CommonParams, into buf: inout [UInt8]) {
        FfiConverterOptionTypeDeviceParams.write(value.device, into: &buf)
        FfiConverterOptionBool.write(value.useEmptyPassphrase, into: &buf)
        FfiConverterOptionBool.write(value.allowSeedlessDevice, into: &buf)
        FfiConverterOptionBool.write(value.skipFinalReload, into: &buf)
    }
}


public func FfiConverterTypeCommonParams_lift(_ buf: RustBuffer) throws -> CommonParams {
    return try FfiConverterTypeCommonParams.lift(buf)
}

public func FfiConverterTypeCommonParams_lower(_ value: CommonParams) -> RustBuffer {
    return FfiConverterTypeCommonParams.lower(value)
}


/**
 * Account information for compose transaction
 */
public struct ComposeAccount {
    /**
     * Derivation path
     */
    public var path: String
    /**
     * Account addresses
     */
    public var addresses: AccountAddresses
    /**
     * UTXOs
     */
    public var utxo: [AccountUtxo]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Derivation path
         */path: String, 
        /**
         * Account addresses
         */addresses: AccountAddresses, 
        /**
         * UTXOs
         */utxo: [AccountUtxo]) {
        self.path = path
        self.addresses = addresses
        self.utxo = utxo
    }
}



extension ComposeAccount: Equatable, Hashable {
    public static func ==(lhs: ComposeAccount, rhs: ComposeAccount) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        if lhs.addresses != rhs.addresses {
            return false
        }
        if lhs.utxo != rhs.utxo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
        hasher.combine(addresses)
        hasher.combine(utxo)
    }
}


public struct FfiConverterTypeComposeAccount: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComposeAccount {
        return
            try ComposeAccount(
                path: FfiConverterString.read(from: &buf), 
                addresses: FfiConverterTypeAccountAddresses.read(from: &buf), 
                utxo: FfiConverterSequenceTypeAccountUtxo.read(from: &buf)
        )
    }

    public static func write(_ value: ComposeAccount, into buf: inout [UInt8]) {
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterTypeAccountAddresses.write(value.addresses, into: &buf)
        FfiConverterSequenceTypeAccountUtxo.write(value.utxo, into: &buf)
    }
}


public func FfiConverterTypeComposeAccount_lift(_ buf: RustBuffer) throws -> ComposeAccount {
    return try FfiConverterTypeComposeAccount.lift(buf)
}

public func FfiConverterTypeComposeAccount_lower(_ value: ComposeAccount) -> RustBuffer {
    return FfiConverterTypeComposeAccount.lower(value)
}


public struct CreateCjitOptions {
    public var source: String?
    public var discountCode: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(source: String?, discountCode: String?) {
        self.source = source
        self.discountCode = discountCode
    }
}



extension CreateCjitOptions: Equatable, Hashable {
    public static func ==(lhs: CreateCjitOptions, rhs: CreateCjitOptions) -> Bool {
        if lhs.source != rhs.source {
            return false
        }
        if lhs.discountCode != rhs.discountCode {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(source)
        hasher.combine(discountCode)
    }
}


public struct FfiConverterTypeCreateCjitOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CreateCjitOptions {
        return
            try CreateCjitOptions(
                source: FfiConverterOptionString.read(from: &buf), 
                discountCode: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: CreateCjitOptions, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.source, into: &buf)
        FfiConverterOptionString.write(value.discountCode, into: &buf)
    }
}


public func FfiConverterTypeCreateCjitOptions_lift(_ buf: RustBuffer) throws -> CreateCjitOptions {
    return try FfiConverterTypeCreateCjitOptions.lift(buf)
}

public func FfiConverterTypeCreateCjitOptions_lower(_ value: CreateCjitOptions) -> RustBuffer {
    return FfiConverterTypeCreateCjitOptions.lower(value)
}


public struct CreateOrderOptions {
    public var clientBalanceSat: UInt64
    public var lspNodeId: String?
    public var couponCode: String
    public var source: String?
    public var discountCode: String?
    public var zeroConf: Bool
    public var zeroConfPayment: Bool?
    public var zeroReserve: Bool
    public var clientNodeId: String?
    public var signature: String?
    public var timestamp: String?
    public var refundOnchainAddress: String?
    public var announceChannel: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(clientBalanceSat: UInt64, lspNodeId: String?, couponCode: String, source: String?, discountCode: String?, zeroConf: Bool, zeroConfPayment: Bool?, zeroReserve: Bool, clientNodeId: String?, signature: String?, timestamp: String?, refundOnchainAddress: String?, announceChannel: Bool) {
        self.clientBalanceSat = clientBalanceSat
        self.lspNodeId = lspNodeId
        self.couponCode = couponCode
        self.source = source
        self.discountCode = discountCode
        self.zeroConf = zeroConf
        self.zeroConfPayment = zeroConfPayment
        self.zeroReserve = zeroReserve
        self.clientNodeId = clientNodeId
        self.signature = signature
        self.timestamp = timestamp
        self.refundOnchainAddress = refundOnchainAddress
        self.announceChannel = announceChannel
    }
}



extension CreateOrderOptions: Equatable, Hashable {
    public static func ==(lhs: CreateOrderOptions, rhs: CreateOrderOptions) -> Bool {
        if lhs.clientBalanceSat != rhs.clientBalanceSat {
            return false
        }
        if lhs.lspNodeId != rhs.lspNodeId {
            return false
        }
        if lhs.couponCode != rhs.couponCode {
            return false
        }
        if lhs.source != rhs.source {
            return false
        }
        if lhs.discountCode != rhs.discountCode {
            return false
        }
        if lhs.zeroConf != rhs.zeroConf {
            return false
        }
        if lhs.zeroConfPayment != rhs.zeroConfPayment {
            return false
        }
        if lhs.zeroReserve != rhs.zeroReserve {
            return false
        }
        if lhs.clientNodeId != rhs.clientNodeId {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.refundOnchainAddress != rhs.refundOnchainAddress {
            return false
        }
        if lhs.announceChannel != rhs.announceChannel {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clientBalanceSat)
        hasher.combine(lspNodeId)
        hasher.combine(couponCode)
        hasher.combine(source)
        hasher.combine(discountCode)
        hasher.combine(zeroConf)
        hasher.combine(zeroConfPayment)
        hasher.combine(zeroReserve)
        hasher.combine(clientNodeId)
        hasher.combine(signature)
        hasher.combine(timestamp)
        hasher.combine(refundOnchainAddress)
        hasher.combine(announceChannel)
    }
}


public struct FfiConverterTypeCreateOrderOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CreateOrderOptions {
        return
            try CreateOrderOptions(
                clientBalanceSat: FfiConverterUInt64.read(from: &buf), 
                lspNodeId: FfiConverterOptionString.read(from: &buf), 
                couponCode: FfiConverterString.read(from: &buf), 
                source: FfiConverterOptionString.read(from: &buf), 
                discountCode: FfiConverterOptionString.read(from: &buf), 
                zeroConf: FfiConverterBool.read(from: &buf), 
                zeroConfPayment: FfiConverterOptionBool.read(from: &buf), 
                zeroReserve: FfiConverterBool.read(from: &buf), 
                clientNodeId: FfiConverterOptionString.read(from: &buf), 
                signature: FfiConverterOptionString.read(from: &buf), 
                timestamp: FfiConverterOptionString.read(from: &buf), 
                refundOnchainAddress: FfiConverterOptionString.read(from: &buf), 
                announceChannel: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: CreateOrderOptions, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.clientBalanceSat, into: &buf)
        FfiConverterOptionString.write(value.lspNodeId, into: &buf)
        FfiConverterString.write(value.couponCode, into: &buf)
        FfiConverterOptionString.write(value.source, into: &buf)
        FfiConverterOptionString.write(value.discountCode, into: &buf)
        FfiConverterBool.write(value.zeroConf, into: &buf)
        FfiConverterOptionBool.write(value.zeroConfPayment, into: &buf)
        FfiConverterBool.write(value.zeroReserve, into: &buf)
        FfiConverterOptionString.write(value.clientNodeId, into: &buf)
        FfiConverterOptionString.write(value.signature, into: &buf)
        FfiConverterOptionString.write(value.timestamp, into: &buf)
        FfiConverterOptionString.write(value.refundOnchainAddress, into: &buf)
        FfiConverterBool.write(value.announceChannel, into: &buf)
    }
}


public func FfiConverterTypeCreateOrderOptions_lift(_ buf: RustBuffer) throws -> CreateOrderOptions {
    return try FfiConverterTypeCreateOrderOptions.lift(buf)
}

public func FfiConverterTypeCreateOrderOptions_lower(_ value: CreateOrderOptions) -> RustBuffer {
    return FfiConverterTypeCreateOrderOptions.lower(value)
}


/**
 * Result type for deep link generation, including the URL and the ID used
 */
public struct DeepLinkResult {
    /**
     * The generated deep link URL
     */
    public var url: String
    /**
     * The request ID used (either provided or auto-generated)
     */
    public var requestId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The generated deep link URL
         */url: String, 
        /**
         * The request ID used (either provided or auto-generated)
         */requestId: String) {
        self.url = url
        self.requestId = requestId
    }
}



extension DeepLinkResult: Equatable, Hashable {
    public static func ==(lhs: DeepLinkResult, rhs: DeepLinkResult) -> Bool {
        if lhs.url != rhs.url {
            return false
        }
        if lhs.requestId != rhs.requestId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(url)
        hasher.combine(requestId)
    }
}


public struct FfiConverterTypeDeepLinkResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DeepLinkResult {
        return
            try DeepLinkResult(
                url: FfiConverterString.read(from: &buf), 
                requestId: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DeepLinkResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.url, into: &buf)
        FfiConverterString.write(value.requestId, into: &buf)
    }
}


public func FfiConverterTypeDeepLinkResult_lift(_ buf: RustBuffer) throws -> DeepLinkResult {
    return try FfiConverterTypeDeepLinkResult.lift(buf)
}

public func FfiConverterTypeDeepLinkResult_lower(_ value: DeepLinkResult) -> RustBuffer {
    return FfiConverterTypeDeepLinkResult.lower(value)
}


/**
 * Parameters for specifying a particular device
 */
public struct DeviceParams {
    /**
     * Device instance path
     */
    public var path: String?
    /**
     * Device instance ID
     */
    public var instance: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Device instance path
         */path: String?, 
        /**
         * Device instance ID
         */instance: UInt32?) {
        self.path = path
        self.instance = instance
    }
}



extension DeviceParams: Equatable, Hashable {
    public static func ==(lhs: DeviceParams, rhs: DeviceParams) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        if lhs.instance != rhs.instance {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
        hasher.combine(instance)
    }
}


public struct FfiConverterTypeDeviceParams: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DeviceParams {
        return
            try DeviceParams(
                path: FfiConverterOptionString.read(from: &buf), 
                instance: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: DeviceParams, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.path, into: &buf)
        FfiConverterOptionUInt32.write(value.instance, into: &buf)
    }
}


public func FfiConverterTypeDeviceParams_lift(_ buf: RustBuffer) throws -> DeviceParams {
    return try FfiConverterTypeDeviceParams.lift(buf)
}

public func FfiConverterTypeDeviceParams_lower(_ value: DeviceParams) -> RustBuffer {
    return FfiConverterTypeDeviceParams.lower(value)
}


public struct ErrorData {
    public var errorDetails: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(errorDetails: String) {
        self.errorDetails = errorDetails
    }
}



extension ErrorData: Equatable, Hashable {
    public static func ==(lhs: ErrorData, rhs: ErrorData) -> Bool {
        if lhs.errorDetails != rhs.errorDetails {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(errorDetails)
    }
}


public struct FfiConverterTypeErrorData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ErrorData {
        return
            try ErrorData(
                errorDetails: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: ErrorData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.errorDetails, into: &buf)
    }
}


public func FfiConverterTypeErrorData_lift(_ buf: RustBuffer) throws -> ErrorData {
    return try FfiConverterTypeErrorData.lift(buf)
}

public func FfiConverterTypeErrorData_lower(_ value: ErrorData) -> RustBuffer {
    return FfiConverterTypeErrorData.lower(value)
}


/**
 * Feature response containing device capabilities and information
 */
public struct FeatureResponse {
    public var vendor: String
    public var majorVersion: UInt32
    public var minorVersion: UInt32
    public var patchVersion: UInt32
    public var deviceId: String
    public var capabilities: [String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(vendor: String, majorVersion: UInt32, minorVersion: UInt32, patchVersion: UInt32, deviceId: String, capabilities: [String]?) {
        self.vendor = vendor
        self.majorVersion = majorVersion
        self.minorVersion = minorVersion
        self.patchVersion = patchVersion
        self.deviceId = deviceId
        self.capabilities = capabilities
    }
}



extension FeatureResponse: Equatable, Hashable {
    public static func ==(lhs: FeatureResponse, rhs: FeatureResponse) -> Bool {
        if lhs.vendor != rhs.vendor {
            return false
        }
        if lhs.majorVersion != rhs.majorVersion {
            return false
        }
        if lhs.minorVersion != rhs.minorVersion {
            return false
        }
        if lhs.patchVersion != rhs.patchVersion {
            return false
        }
        if lhs.deviceId != rhs.deviceId {
            return false
        }
        if lhs.capabilities != rhs.capabilities {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(vendor)
        hasher.combine(majorVersion)
        hasher.combine(minorVersion)
        hasher.combine(patchVersion)
        hasher.combine(deviceId)
        hasher.combine(capabilities)
    }
}


public struct FfiConverterTypeFeatureResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FeatureResponse {
        return
            try FeatureResponse(
                vendor: FfiConverterString.read(from: &buf), 
                majorVersion: FfiConverterUInt32.read(from: &buf), 
                minorVersion: FfiConverterUInt32.read(from: &buf), 
                patchVersion: FfiConverterUInt32.read(from: &buf), 
                deviceId: FfiConverterString.read(from: &buf), 
                capabilities: FfiConverterOptionSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: FeatureResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.vendor, into: &buf)
        FfiConverterUInt32.write(value.majorVersion, into: &buf)
        FfiConverterUInt32.write(value.minorVersion, into: &buf)
        FfiConverterUInt32.write(value.patchVersion, into: &buf)
        FfiConverterString.write(value.deviceId, into: &buf)
        FfiConverterOptionSequenceString.write(value.capabilities, into: &buf)
    }
}


public func FfiConverterTypeFeatureResponse_lift(_ buf: RustBuffer) throws -> FeatureResponse {
    return try FfiConverterTypeFeatureResponse.lift(buf)
}

public func FfiConverterTypeFeatureResponse_lower(_ value: FeatureResponse) -> RustBuffer {
    return FfiConverterTypeFeatureResponse.lower(value)
}


/**
 * Fee level for compose transaction
 */
public struct FeeLevel {
    /**
     * Fee per unit (satoshi/byte or satoshi/vbyte)
     */
    public var feePerUnit: String
    /**
     * Base fee in satoshi (optional, used in RBF and DOGE)
     */
    public var baseFee: UInt32?
    /**
     * Floor base fee (optional, used in DOGE)
     */
    public var floorBaseFee: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Fee per unit (satoshi/byte or satoshi/vbyte)
         */feePerUnit: String, 
        /**
         * Base fee in satoshi (optional, used in RBF and DOGE)
         */baseFee: UInt32?, 
        /**
         * Floor base fee (optional, used in DOGE)
         */floorBaseFee: Bool?) {
        self.feePerUnit = feePerUnit
        self.baseFee = baseFee
        self.floorBaseFee = floorBaseFee
    }
}



extension FeeLevel: Equatable, Hashable {
    public static func ==(lhs: FeeLevel, rhs: FeeLevel) -> Bool {
        if lhs.feePerUnit != rhs.feePerUnit {
            return false
        }
        if lhs.baseFee != rhs.baseFee {
            return false
        }
        if lhs.floorBaseFee != rhs.floorBaseFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(feePerUnit)
        hasher.combine(baseFee)
        hasher.combine(floorBaseFee)
    }
}


public struct FfiConverterTypeFeeLevel: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FeeLevel {
        return
            try FeeLevel(
                feePerUnit: FfiConverterString.read(from: &buf), 
                baseFee: FfiConverterOptionUInt32.read(from: &buf), 
                floorBaseFee: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: FeeLevel, into buf: inout [UInt8]) {
        FfiConverterString.write(value.feePerUnit, into: &buf)
        FfiConverterOptionUInt32.write(value.baseFee, into: &buf)
        FfiConverterOptionBool.write(value.floorBaseFee, into: &buf)
    }
}


public func FfiConverterTypeFeeLevel_lift(_ buf: RustBuffer) throws -> FeeLevel {
    return try FfiConverterTypeFeeLevel.lift(buf)
}

public func FfiConverterTypeFeeLevel_lower(_ value: FeeLevel) -> RustBuffer {
    return FfiConverterTypeFeeLevel.lower(value)
}


public struct FeeRates {
    public var fast: UInt32
    public var mid: UInt32
    public var slow: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fast: UInt32, mid: UInt32, slow: UInt32) {
        self.fast = fast
        self.mid = mid
        self.slow = slow
    }
}



extension FeeRates: Equatable, Hashable {
    public static func ==(lhs: FeeRates, rhs: FeeRates) -> Bool {
        if lhs.fast != rhs.fast {
            return false
        }
        if lhs.mid != rhs.mid {
            return false
        }
        if lhs.slow != rhs.slow {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fast)
        hasher.combine(mid)
        hasher.combine(slow)
    }
}


public struct FfiConverterTypeFeeRates: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FeeRates {
        return
            try FeeRates(
                fast: FfiConverterUInt32.read(from: &buf), 
                mid: FfiConverterUInt32.read(from: &buf), 
                slow: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: FeeRates, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.fast, into: &buf)
        FfiConverterUInt32.write(value.mid, into: &buf)
        FfiConverterUInt32.write(value.slow, into: &buf)
    }
}


public func FfiConverterTypeFeeRates_lift(_ buf: RustBuffer) throws -> FeeRates {
    return try FfiConverterTypeFeeRates.lift(buf)
}

public func FfiConverterTypeFeeRates_lower(_ value: FeeRates) -> RustBuffer {
    return FfiConverterTypeFeeRates.lower(value)
}


public struct FundingTx {
    public var id: String
    public var vout: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, vout: UInt64) {
        self.id = id
        self.vout = vout
    }
}



extension FundingTx: Equatable, Hashable {
    public static func ==(lhs: FundingTx, rhs: FundingTx) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.vout != rhs.vout {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(vout)
    }
}


public struct FfiConverterTypeFundingTx: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FundingTx {
        return
            try FundingTx(
                id: FfiConverterString.read(from: &buf), 
                vout: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: FundingTx, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.vout, into: &buf)
    }
}


public func FfiConverterTypeFundingTx_lift(_ buf: RustBuffer) throws -> FundingTx {
    return try FfiConverterTypeFundingTx.lift(buf)
}

public func FfiConverterTypeFundingTx_lower(_ value: FundingTx) -> RustBuffer {
    return FfiConverterTypeFundingTx.lower(value)
}


public struct GetAddressResponse {
    /**
     * The generated Bitcoin address as a string
     */
    public var address: String
    /**
     * The derivation path used to generate the address
     */
    public var path: String
    /**
     * The hexadecimal representation of the public key
     */
    public var publicKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The generated Bitcoin address as a string
         */address: String, 
        /**
         * The derivation path used to generate the address
         */path: String, 
        /**
         * The hexadecimal representation of the public key
         */publicKey: String) {
        self.address = address
        self.path = path
        self.publicKey = publicKey
    }
}



extension GetAddressResponse: Equatable, Hashable {
    public static func ==(lhs: GetAddressResponse, rhs: GetAddressResponse) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.path != rhs.path {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(path)
        hasher.combine(publicKey)
    }
}


public struct FfiConverterTypeGetAddressResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAddressResponse {
        return
            try GetAddressResponse(
                address: FfiConverterString.read(from: &buf), 
                path: FfiConverterString.read(from: &buf), 
                publicKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: GetAddressResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterString.write(value.publicKey, into: &buf)
    }
}


public func FfiConverterTypeGetAddressResponse_lift(_ buf: RustBuffer) throws -> GetAddressResponse {
    return try FfiConverterTypeGetAddressResponse.lift(buf)
}

public func FfiConverterTypeGetAddressResponse_lower(_ value: GetAddressResponse) -> RustBuffer {
    return FfiConverterTypeGetAddressResponse.lower(value)
}


public struct GetAddressesResponse {
    /**
     * Vector of generated Bitcoin addresses
     */
    public var addresses: [GetAddressResponse]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Vector of generated Bitcoin addresses
         */addresses: [GetAddressResponse]) {
        self.addresses = addresses
    }
}



extension GetAddressesResponse: Equatable, Hashable {
    public static func ==(lhs: GetAddressesResponse, rhs: GetAddressesResponse) -> Bool {
        if lhs.addresses != rhs.addresses {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addresses)
    }
}


public struct FfiConverterTypeGetAddressesResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAddressesResponse {
        return
            try GetAddressesResponse(
                addresses: FfiConverterSequenceTypeGetAddressResponse.read(from: &buf)
        )
    }

    public static func write(_ value: GetAddressesResponse, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeGetAddressResponse.write(value.addresses, into: &buf)
    }
}


public func FfiConverterTypeGetAddressesResponse_lift(_ buf: RustBuffer) throws -> GetAddressesResponse {
    return try FfiConverterTypeGetAddressesResponse.lift(buf)
}

public func FfiConverterTypeGetAddressesResponse_lower(_ value: GetAddressesResponse) -> RustBuffer {
    return FfiConverterTypeGetAddressesResponse.lower(value)
}


/**
 * HD Node Path Type
 */
public struct HdNodePathType {
    /**
     * Node data (can be String or HDNodeType)
     */
    public var node: HdNodeTypeOrString
    /**
     * BIP32 derivation path
     */
    public var addressN: [UInt32]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Node data (can be String or HDNodeType)
         */node: HdNodeTypeOrString, 
        /**
         * BIP32 derivation path
         */addressN: [UInt32]) {
        self.node = node
        self.addressN = addressN
    }
}



extension HdNodePathType: Equatable, Hashable {
    public static func ==(lhs: HdNodePathType, rhs: HdNodePathType) -> Bool {
        if lhs.node != rhs.node {
            return false
        }
        if lhs.addressN != rhs.addressN {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(node)
        hasher.combine(addressN)
    }
}


public struct FfiConverterTypeHDNodePathType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HdNodePathType {
        return
            try HdNodePathType(
                node: FfiConverterTypeHDNodeTypeOrString.read(from: &buf), 
                addressN: FfiConverterSequenceUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: HdNodePathType, into buf: inout [UInt8]) {
        FfiConverterTypeHDNodeTypeOrString.write(value.node, into: &buf)
        FfiConverterSequenceUInt32.write(value.addressN, into: &buf)
    }
}


public func FfiConverterTypeHDNodePathType_lift(_ buf: RustBuffer) throws -> HdNodePathType {
    return try FfiConverterTypeHDNodePathType.lift(buf)
}

public func FfiConverterTypeHDNodePathType_lower(_ value: HdNodePathType) -> RustBuffer {
    return FfiConverterTypeHDNodePathType.lower(value)
}


/**
 * HD Node Type
 */
public struct HdNodeType {
    /**
     * Depth
     */
    public var depth: UInt32
    /**
     * Fingerprint
     */
    public var fingerprint: UInt32
    /**
     * Child number
     */
    public var childNum: UInt32
    /**
     * Chain code
     */
    public var chainCode: String
    /**
     * Public key
     */
    public var publicKey: String
    /**
     * Private key (optional)
     */
    public var privateKey: String?
    /**
     * BIP32 derivation path (optional)
     */
    public var addressN: [UInt32]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Depth
         */depth: UInt32, 
        /**
         * Fingerprint
         */fingerprint: UInt32, 
        /**
         * Child number
         */childNum: UInt32, 
        /**
         * Chain code
         */chainCode: String, 
        /**
         * Public key
         */publicKey: String, 
        /**
         * Private key (optional)
         */privateKey: String?, 
        /**
         * BIP32 derivation path (optional)
         */addressN: [UInt32]?) {
        self.depth = depth
        self.fingerprint = fingerprint
        self.childNum = childNum
        self.chainCode = chainCode
        self.publicKey = publicKey
        self.privateKey = privateKey
        self.addressN = addressN
    }
}



extension HdNodeType: Equatable, Hashable {
    public static func ==(lhs: HdNodeType, rhs: HdNodeType) -> Bool {
        if lhs.depth != rhs.depth {
            return false
        }
        if lhs.fingerprint != rhs.fingerprint {
            return false
        }
        if lhs.childNum != rhs.childNum {
            return false
        }
        if lhs.chainCode != rhs.chainCode {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.privateKey != rhs.privateKey {
            return false
        }
        if lhs.addressN != rhs.addressN {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(depth)
        hasher.combine(fingerprint)
        hasher.combine(childNum)
        hasher.combine(chainCode)
        hasher.combine(publicKey)
        hasher.combine(privateKey)
        hasher.combine(addressN)
    }
}


public struct FfiConverterTypeHDNodeType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HdNodeType {
        return
            try HdNodeType(
                depth: FfiConverterUInt32.read(from: &buf), 
                fingerprint: FfiConverterUInt32.read(from: &buf), 
                childNum: FfiConverterUInt32.read(from: &buf), 
                chainCode: FfiConverterString.read(from: &buf), 
                publicKey: FfiConverterString.read(from: &buf), 
                privateKey: FfiConverterOptionString.read(from: &buf), 
                addressN: FfiConverterOptionSequenceUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: HdNodeType, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.depth, into: &buf)
        FfiConverterUInt32.write(value.fingerprint, into: &buf)
        FfiConverterUInt32.write(value.childNum, into: &buf)
        FfiConverterString.write(value.chainCode, into: &buf)
        FfiConverterString.write(value.publicKey, into: &buf)
        FfiConverterOptionString.write(value.privateKey, into: &buf)
        FfiConverterOptionSequenceUInt32.write(value.addressN, into: &buf)
    }
}


public func FfiConverterTypeHDNodeType_lift(_ buf: RustBuffer) throws -> HdNodeType {
    return try FfiConverterTypeHDNodeType.lift(buf)
}

public func FfiConverterTypeHDNodeType_lower(_ value: HdNodeType) -> RustBuffer {
    return FfiConverterTypeHDNodeType.lower(value)
}


public struct IBt0ConfMinTxFeeWindow {
    public var satPerVbyte: Double
    public var validityEndsAt: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(satPerVbyte: Double, validityEndsAt: String) {
        self.satPerVbyte = satPerVbyte
        self.validityEndsAt = validityEndsAt
    }
}



extension IBt0ConfMinTxFeeWindow: Equatable, Hashable {
    public static func ==(lhs: IBt0ConfMinTxFeeWindow, rhs: IBt0ConfMinTxFeeWindow) -> Bool {
        if lhs.satPerVbyte != rhs.satPerVbyte {
            return false
        }
        if lhs.validityEndsAt != rhs.validityEndsAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(satPerVbyte)
        hasher.combine(validityEndsAt)
    }
}


public struct FfiConverterTypeIBt0ConfMinTxFeeWindow: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBt0ConfMinTxFeeWindow {
        return
            try IBt0ConfMinTxFeeWindow(
                satPerVbyte: FfiConverterDouble.read(from: &buf), 
                validityEndsAt: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IBt0ConfMinTxFeeWindow, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.satPerVbyte, into: &buf)
        FfiConverterString.write(value.validityEndsAt, into: &buf)
    }
}


public func FfiConverterTypeIBt0ConfMinTxFeeWindow_lift(_ buf: RustBuffer) throws -> IBt0ConfMinTxFeeWindow {
    return try FfiConverterTypeIBt0ConfMinTxFeeWindow.lift(buf)
}

public func FfiConverterTypeIBt0ConfMinTxFeeWindow_lower(_ value: IBt0ConfMinTxFeeWindow) -> RustBuffer {
    return FfiConverterTypeIBt0ConfMinTxFeeWindow.lower(value)
}


public struct IBtBolt11Invoice {
    public var request: String
    public var state: BtBolt11InvoiceState
    public var expiresAt: String
    public var updatedAt: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(request: String, state: BtBolt11InvoiceState, expiresAt: String, updatedAt: String) {
        self.request = request
        self.state = state
        self.expiresAt = expiresAt
        self.updatedAt = updatedAt
    }
}



extension IBtBolt11Invoice: Equatable, Hashable {
    public static func ==(lhs: IBtBolt11Invoice, rhs: IBtBolt11Invoice) -> Bool {
        if lhs.request != rhs.request {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.expiresAt != rhs.expiresAt {
            return false
        }
        if lhs.updatedAt != rhs.updatedAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(request)
        hasher.combine(state)
        hasher.combine(expiresAt)
        hasher.combine(updatedAt)
    }
}


public struct FfiConverterTypeIBtBolt11Invoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtBolt11Invoice {
        return
            try IBtBolt11Invoice(
                request: FfiConverterString.read(from: &buf), 
                state: FfiConverterTypeBtBolt11InvoiceState.read(from: &buf), 
                expiresAt: FfiConverterString.read(from: &buf), 
                updatedAt: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IBtBolt11Invoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.request, into: &buf)
        FfiConverterTypeBtBolt11InvoiceState.write(value.state, into: &buf)
        FfiConverterString.write(value.expiresAt, into: &buf)
        FfiConverterString.write(value.updatedAt, into: &buf)
    }
}


public func FfiConverterTypeIBtBolt11Invoice_lift(_ buf: RustBuffer) throws -> IBtBolt11Invoice {
    return try FfiConverterTypeIBtBolt11Invoice.lift(buf)
}

public func FfiConverterTypeIBtBolt11Invoice_lower(_ value: IBtBolt11Invoice) -> RustBuffer {
    return FfiConverterTypeIBtBolt11Invoice.lower(value)
}


public struct IBtChannel {
    public var state: BtOpenChannelState
    public var lspNodePubkey: String
    public var clientNodePubkey: String
    public var announceChannel: Bool
    public var fundingTx: FundingTx
    public var closingTxId: String?
    public var close: IBtChannelClose?
    public var shortChannelId: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(state: BtOpenChannelState, lspNodePubkey: String, clientNodePubkey: String, announceChannel: Bool, fundingTx: FundingTx, closingTxId: String?, close: IBtChannelClose?, shortChannelId: String?) {
        self.state = state
        self.lspNodePubkey = lspNodePubkey
        self.clientNodePubkey = clientNodePubkey
        self.announceChannel = announceChannel
        self.fundingTx = fundingTx
        self.closingTxId = closingTxId
        self.close = close
        self.shortChannelId = shortChannelId
    }
}



extension IBtChannel: Equatable, Hashable {
    public static func ==(lhs: IBtChannel, rhs: IBtChannel) -> Bool {
        if lhs.state != rhs.state {
            return false
        }
        if lhs.lspNodePubkey != rhs.lspNodePubkey {
            return false
        }
        if lhs.clientNodePubkey != rhs.clientNodePubkey {
            return false
        }
        if lhs.announceChannel != rhs.announceChannel {
            return false
        }
        if lhs.fundingTx != rhs.fundingTx {
            return false
        }
        if lhs.closingTxId != rhs.closingTxId {
            return false
        }
        if lhs.close != rhs.close {
            return false
        }
        if lhs.shortChannelId != rhs.shortChannelId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(state)
        hasher.combine(lspNodePubkey)
        hasher.combine(clientNodePubkey)
        hasher.combine(announceChannel)
        hasher.combine(fundingTx)
        hasher.combine(closingTxId)
        hasher.combine(close)
        hasher.combine(shortChannelId)
    }
}


public struct FfiConverterTypeIBtChannel: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtChannel {
        return
            try IBtChannel(
                state: FfiConverterTypeBtOpenChannelState.read(from: &buf), 
                lspNodePubkey: FfiConverterString.read(from: &buf), 
                clientNodePubkey: FfiConverterString.read(from: &buf), 
                announceChannel: FfiConverterBool.read(from: &buf), 
                fundingTx: FfiConverterTypeFundingTx.read(from: &buf), 
                closingTxId: FfiConverterOptionString.read(from: &buf), 
                close: FfiConverterOptionTypeIBtChannelClose.read(from: &buf), 
                shortChannelId: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: IBtChannel, into buf: inout [UInt8]) {
        FfiConverterTypeBtOpenChannelState.write(value.state, into: &buf)
        FfiConverterString.write(value.lspNodePubkey, into: &buf)
        FfiConverterString.write(value.clientNodePubkey, into: &buf)
        FfiConverterBool.write(value.announceChannel, into: &buf)
        FfiConverterTypeFundingTx.write(value.fundingTx, into: &buf)
        FfiConverterOptionString.write(value.closingTxId, into: &buf)
        FfiConverterOptionTypeIBtChannelClose.write(value.close, into: &buf)
        FfiConverterOptionString.write(value.shortChannelId, into: &buf)
    }
}


public func FfiConverterTypeIBtChannel_lift(_ buf: RustBuffer) throws -> IBtChannel {
    return try FfiConverterTypeIBtChannel.lift(buf)
}

public func FfiConverterTypeIBtChannel_lower(_ value: IBtChannel) -> RustBuffer {
    return FfiConverterTypeIBtChannel.lower(value)
}


public struct IBtChannelClose {
    public var txId: String
    public var closeType: String
    public var initiator: String
    public var registeredAt: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(txId: String, closeType: String, initiator: String, registeredAt: String) {
        self.txId = txId
        self.closeType = closeType
        self.initiator = initiator
        self.registeredAt = registeredAt
    }
}



extension IBtChannelClose: Equatable, Hashable {
    public static func ==(lhs: IBtChannelClose, rhs: IBtChannelClose) -> Bool {
        if lhs.txId != rhs.txId {
            return false
        }
        if lhs.closeType != rhs.closeType {
            return false
        }
        if lhs.initiator != rhs.initiator {
            return false
        }
        if lhs.registeredAt != rhs.registeredAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txId)
        hasher.combine(closeType)
        hasher.combine(initiator)
        hasher.combine(registeredAt)
    }
}


public struct FfiConverterTypeIBtChannelClose: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtChannelClose {
        return
            try IBtChannelClose(
                txId: FfiConverterString.read(from: &buf), 
                closeType: FfiConverterString.read(from: &buf), 
                initiator: FfiConverterString.read(from: &buf), 
                registeredAt: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IBtChannelClose, into buf: inout [UInt8]) {
        FfiConverterString.write(value.txId, into: &buf)
        FfiConverterString.write(value.closeType, into: &buf)
        FfiConverterString.write(value.initiator, into: &buf)
        FfiConverterString.write(value.registeredAt, into: &buf)
    }
}


public func FfiConverterTypeIBtChannelClose_lift(_ buf: RustBuffer) throws -> IBtChannelClose {
    return try FfiConverterTypeIBtChannelClose.lift(buf)
}

public func FfiConverterTypeIBtChannelClose_lower(_ value: IBtChannelClose) -> RustBuffer {
    return FfiConverterTypeIBtChannelClose.lower(value)
}


public struct IBtEstimateFeeResponse {
    public var feeSat: UInt64
    public var min0ConfTxFee: IBt0ConfMinTxFeeWindow

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(feeSat: UInt64, min0ConfTxFee: IBt0ConfMinTxFeeWindow) {
        self.feeSat = feeSat
        self.min0ConfTxFee = min0ConfTxFee
    }
}



extension IBtEstimateFeeResponse: Equatable, Hashable {
    public static func ==(lhs: IBtEstimateFeeResponse, rhs: IBtEstimateFeeResponse) -> Bool {
        if lhs.feeSat != rhs.feeSat {
            return false
        }
        if lhs.min0ConfTxFee != rhs.min0ConfTxFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(feeSat)
        hasher.combine(min0ConfTxFee)
    }
}


public struct FfiConverterTypeIBtEstimateFeeResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtEstimateFeeResponse {
        return
            try IBtEstimateFeeResponse(
                feeSat: FfiConverterUInt64.read(from: &buf), 
                min0ConfTxFee: FfiConverterTypeIBt0ConfMinTxFeeWindow.read(from: &buf)
        )
    }

    public static func write(_ value: IBtEstimateFeeResponse, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.feeSat, into: &buf)
        FfiConverterTypeIBt0ConfMinTxFeeWindow.write(value.min0ConfTxFee, into: &buf)
    }
}


public func FfiConverterTypeIBtEstimateFeeResponse_lift(_ buf: RustBuffer) throws -> IBtEstimateFeeResponse {
    return try FfiConverterTypeIBtEstimateFeeResponse.lift(buf)
}

public func FfiConverterTypeIBtEstimateFeeResponse_lower(_ value: IBtEstimateFeeResponse) -> RustBuffer {
    return FfiConverterTypeIBtEstimateFeeResponse.lower(value)
}


public struct IBtEstimateFeeResponse2 {
    public var feeSat: UInt64
    public var networkFeeSat: UInt64
    public var serviceFeeSat: UInt64
    public var min0ConfTxFee: IBt0ConfMinTxFeeWindow

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(feeSat: UInt64, networkFeeSat: UInt64, serviceFeeSat: UInt64, min0ConfTxFee: IBt0ConfMinTxFeeWindow) {
        self.feeSat = feeSat
        self.networkFeeSat = networkFeeSat
        self.serviceFeeSat = serviceFeeSat
        self.min0ConfTxFee = min0ConfTxFee
    }
}



extension IBtEstimateFeeResponse2: Equatable, Hashable {
    public static func ==(lhs: IBtEstimateFeeResponse2, rhs: IBtEstimateFeeResponse2) -> Bool {
        if lhs.feeSat != rhs.feeSat {
            return false
        }
        if lhs.networkFeeSat != rhs.networkFeeSat {
            return false
        }
        if lhs.serviceFeeSat != rhs.serviceFeeSat {
            return false
        }
        if lhs.min0ConfTxFee != rhs.min0ConfTxFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(feeSat)
        hasher.combine(networkFeeSat)
        hasher.combine(serviceFeeSat)
        hasher.combine(min0ConfTxFee)
    }
}


public struct FfiConverterTypeIBtEstimateFeeResponse2: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtEstimateFeeResponse2 {
        return
            try IBtEstimateFeeResponse2(
                feeSat: FfiConverterUInt64.read(from: &buf), 
                networkFeeSat: FfiConverterUInt64.read(from: &buf), 
                serviceFeeSat: FfiConverterUInt64.read(from: &buf), 
                min0ConfTxFee: FfiConverterTypeIBt0ConfMinTxFeeWindow.read(from: &buf)
        )
    }

    public static func write(_ value: IBtEstimateFeeResponse2, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.feeSat, into: &buf)
        FfiConverterUInt64.write(value.networkFeeSat, into: &buf)
        FfiConverterUInt64.write(value.serviceFeeSat, into: &buf)
        FfiConverterTypeIBt0ConfMinTxFeeWindow.write(value.min0ConfTxFee, into: &buf)
    }
}


public func FfiConverterTypeIBtEstimateFeeResponse2_lift(_ buf: RustBuffer) throws -> IBtEstimateFeeResponse2 {
    return try FfiConverterTypeIBtEstimateFeeResponse2.lift(buf)
}

public func FfiConverterTypeIBtEstimateFeeResponse2_lower(_ value: IBtEstimateFeeResponse2) -> RustBuffer {
    return FfiConverterTypeIBtEstimateFeeResponse2.lower(value)
}


public struct IBtInfo {
    public var version: UInt32
    public var nodes: [ILspNode]
    public var options: IBtInfoOptions
    public var versions: IBtInfoVersions
    public var onchain: IBtInfoOnchain

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(version: UInt32, nodes: [ILspNode], options: IBtInfoOptions, versions: IBtInfoVersions, onchain: IBtInfoOnchain) {
        self.version = version
        self.nodes = nodes
        self.options = options
        self.versions = versions
        self.onchain = onchain
    }
}



extension IBtInfo: Equatable, Hashable {
    public static func ==(lhs: IBtInfo, rhs: IBtInfo) -> Bool {
        if lhs.version != rhs.version {
            return false
        }
        if lhs.nodes != rhs.nodes {
            return false
        }
        if lhs.options != rhs.options {
            return false
        }
        if lhs.versions != rhs.versions {
            return false
        }
        if lhs.onchain != rhs.onchain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(version)
        hasher.combine(nodes)
        hasher.combine(options)
        hasher.combine(versions)
        hasher.combine(onchain)
    }
}


public struct FfiConverterTypeIBtInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtInfo {
        return
            try IBtInfo(
                version: FfiConverterUInt32.read(from: &buf), 
                nodes: FfiConverterSequenceTypeILspNode.read(from: &buf), 
                options: FfiConverterTypeIBtInfoOptions.read(from: &buf), 
                versions: FfiConverterTypeIBtInfoVersions.read(from: &buf), 
                onchain: FfiConverterTypeIBtInfoOnchain.read(from: &buf)
        )
    }

    public static func write(_ value: IBtInfo, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.version, into: &buf)
        FfiConverterSequenceTypeILspNode.write(value.nodes, into: &buf)
        FfiConverterTypeIBtInfoOptions.write(value.options, into: &buf)
        FfiConverterTypeIBtInfoVersions.write(value.versions, into: &buf)
        FfiConverterTypeIBtInfoOnchain.write(value.onchain, into: &buf)
    }
}


public func FfiConverterTypeIBtInfo_lift(_ buf: RustBuffer) throws -> IBtInfo {
    return try FfiConverterTypeIBtInfo.lift(buf)
}

public func FfiConverterTypeIBtInfo_lower(_ value: IBtInfo) -> RustBuffer {
    return FfiConverterTypeIBtInfo.lower(value)
}


public struct IBtInfoOnchain {
    public var network: BitcoinNetworkEnum
    public var feeRates: FeeRates

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(network: BitcoinNetworkEnum, feeRates: FeeRates) {
        self.network = network
        self.feeRates = feeRates
    }
}



extension IBtInfoOnchain: Equatable, Hashable {
    public static func ==(lhs: IBtInfoOnchain, rhs: IBtInfoOnchain) -> Bool {
        if lhs.network != rhs.network {
            return false
        }
        if lhs.feeRates != rhs.feeRates {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(network)
        hasher.combine(feeRates)
    }
}


public struct FfiConverterTypeIBtInfoOnchain: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtInfoOnchain {
        return
            try IBtInfoOnchain(
                network: FfiConverterTypeBitcoinNetworkEnum.read(from: &buf), 
                feeRates: FfiConverterTypeFeeRates.read(from: &buf)
        )
    }

    public static func write(_ value: IBtInfoOnchain, into buf: inout [UInt8]) {
        FfiConverterTypeBitcoinNetworkEnum.write(value.network, into: &buf)
        FfiConverterTypeFeeRates.write(value.feeRates, into: &buf)
    }
}


public func FfiConverterTypeIBtInfoOnchain_lift(_ buf: RustBuffer) throws -> IBtInfoOnchain {
    return try FfiConverterTypeIBtInfoOnchain.lift(buf)
}

public func FfiConverterTypeIBtInfoOnchain_lower(_ value: IBtInfoOnchain) -> RustBuffer {
    return FfiConverterTypeIBtInfoOnchain.lower(value)
}


public struct IBtInfoOptions {
    public var minChannelSizeSat: UInt64
    public var maxChannelSizeSat: UInt64
    public var minExpiryWeeks: UInt32
    public var maxExpiryWeeks: UInt32
    public var minPaymentConfirmations: UInt32
    public var minHighRiskPaymentConfirmations: UInt32
    public var max0ConfClientBalanceSat: UInt64
    public var maxClientBalanceSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(minChannelSizeSat: UInt64, maxChannelSizeSat: UInt64, minExpiryWeeks: UInt32, maxExpiryWeeks: UInt32, minPaymentConfirmations: UInt32, minHighRiskPaymentConfirmations: UInt32, max0ConfClientBalanceSat: UInt64, maxClientBalanceSat: UInt64) {
        self.minChannelSizeSat = minChannelSizeSat
        self.maxChannelSizeSat = maxChannelSizeSat
        self.minExpiryWeeks = minExpiryWeeks
        self.maxExpiryWeeks = maxExpiryWeeks
        self.minPaymentConfirmations = minPaymentConfirmations
        self.minHighRiskPaymentConfirmations = minHighRiskPaymentConfirmations
        self.max0ConfClientBalanceSat = max0ConfClientBalanceSat
        self.maxClientBalanceSat = maxClientBalanceSat
    }
}



extension IBtInfoOptions: Equatable, Hashable {
    public static func ==(lhs: IBtInfoOptions, rhs: IBtInfoOptions) -> Bool {
        if lhs.minChannelSizeSat != rhs.minChannelSizeSat {
            return false
        }
        if lhs.maxChannelSizeSat != rhs.maxChannelSizeSat {
            return false
        }
        if lhs.minExpiryWeeks != rhs.minExpiryWeeks {
            return false
        }
        if lhs.maxExpiryWeeks != rhs.maxExpiryWeeks {
            return false
        }
        if lhs.minPaymentConfirmations != rhs.minPaymentConfirmations {
            return false
        }
        if lhs.minHighRiskPaymentConfirmations != rhs.minHighRiskPaymentConfirmations {
            return false
        }
        if lhs.max0ConfClientBalanceSat != rhs.max0ConfClientBalanceSat {
            return false
        }
        if lhs.maxClientBalanceSat != rhs.maxClientBalanceSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(minChannelSizeSat)
        hasher.combine(maxChannelSizeSat)
        hasher.combine(minExpiryWeeks)
        hasher.combine(maxExpiryWeeks)
        hasher.combine(minPaymentConfirmations)
        hasher.combine(minHighRiskPaymentConfirmations)
        hasher.combine(max0ConfClientBalanceSat)
        hasher.combine(maxClientBalanceSat)
    }
}


public struct FfiConverterTypeIBtInfoOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtInfoOptions {
        return
            try IBtInfoOptions(
                minChannelSizeSat: FfiConverterUInt64.read(from: &buf), 
                maxChannelSizeSat: FfiConverterUInt64.read(from: &buf), 
                minExpiryWeeks: FfiConverterUInt32.read(from: &buf), 
                maxExpiryWeeks: FfiConverterUInt32.read(from: &buf), 
                minPaymentConfirmations: FfiConverterUInt32.read(from: &buf), 
                minHighRiskPaymentConfirmations: FfiConverterUInt32.read(from: &buf), 
                max0ConfClientBalanceSat: FfiConverterUInt64.read(from: &buf), 
                maxClientBalanceSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: IBtInfoOptions, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.minChannelSizeSat, into: &buf)
        FfiConverterUInt64.write(value.maxChannelSizeSat, into: &buf)
        FfiConverterUInt32.write(value.minExpiryWeeks, into: &buf)
        FfiConverterUInt32.write(value.maxExpiryWeeks, into: &buf)
        FfiConverterUInt32.write(value.minPaymentConfirmations, into: &buf)
        FfiConverterUInt32.write(value.minHighRiskPaymentConfirmations, into: &buf)
        FfiConverterUInt64.write(value.max0ConfClientBalanceSat, into: &buf)
        FfiConverterUInt64.write(value.maxClientBalanceSat, into: &buf)
    }
}


public func FfiConverterTypeIBtInfoOptions_lift(_ buf: RustBuffer) throws -> IBtInfoOptions {
    return try FfiConverterTypeIBtInfoOptions.lift(buf)
}

public func FfiConverterTypeIBtInfoOptions_lower(_ value: IBtInfoOptions) -> RustBuffer {
    return FfiConverterTypeIBtInfoOptions.lower(value)
}


public struct IBtInfoVersions {
    public var http: String
    public var btc: String
    public var ln2: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(http: String, btc: String, ln2: String) {
        self.http = http
        self.btc = btc
        self.ln2 = ln2
    }
}



extension IBtInfoVersions: Equatable, Hashable {
    public static func ==(lhs: IBtInfoVersions, rhs: IBtInfoVersions) -> Bool {
        if lhs.http != rhs.http {
            return false
        }
        if lhs.btc != rhs.btc {
            return false
        }
        if lhs.ln2 != rhs.ln2 {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(http)
        hasher.combine(btc)
        hasher.combine(ln2)
    }
}


public struct FfiConverterTypeIBtInfoVersions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtInfoVersions {
        return
            try IBtInfoVersions(
                http: FfiConverterString.read(from: &buf), 
                btc: FfiConverterString.read(from: &buf), 
                ln2: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IBtInfoVersions, into buf: inout [UInt8]) {
        FfiConverterString.write(value.http, into: &buf)
        FfiConverterString.write(value.btc, into: &buf)
        FfiConverterString.write(value.ln2, into: &buf)
    }
}


public func FfiConverterTypeIBtInfoVersions_lift(_ buf: RustBuffer) throws -> IBtInfoVersions {
    return try FfiConverterTypeIBtInfoVersions.lift(buf)
}

public func FfiConverterTypeIBtInfoVersions_lower(_ value: IBtInfoVersions) -> RustBuffer {
    return FfiConverterTypeIBtInfoVersions.lower(value)
}


public struct IBtOnchainTransaction {
    public var amountSat: UInt64
    public var txId: String
    public var vout: UInt32
    public var blockHeight: UInt32?
    public var blockConfirmationCount: UInt32
    public var feeRateSatPerVbyte: Double
    public var confirmed: Bool
    public var suspicious0ConfReason: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(amountSat: UInt64, txId: String, vout: UInt32, blockHeight: UInt32?, blockConfirmationCount: UInt32, feeRateSatPerVbyte: Double, confirmed: Bool, suspicious0ConfReason: String) {
        self.amountSat = amountSat
        self.txId = txId
        self.vout = vout
        self.blockHeight = blockHeight
        self.blockConfirmationCount = blockConfirmationCount
        self.feeRateSatPerVbyte = feeRateSatPerVbyte
        self.confirmed = confirmed
        self.suspicious0ConfReason = suspicious0ConfReason
    }
}



extension IBtOnchainTransaction: Equatable, Hashable {
    public static func ==(lhs: IBtOnchainTransaction, rhs: IBtOnchainTransaction) -> Bool {
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.txId != rhs.txId {
            return false
        }
        if lhs.vout != rhs.vout {
            return false
        }
        if lhs.blockHeight != rhs.blockHeight {
            return false
        }
        if lhs.blockConfirmationCount != rhs.blockConfirmationCount {
            return false
        }
        if lhs.feeRateSatPerVbyte != rhs.feeRateSatPerVbyte {
            return false
        }
        if lhs.confirmed != rhs.confirmed {
            return false
        }
        if lhs.suspicious0ConfReason != rhs.suspicious0ConfReason {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amountSat)
        hasher.combine(txId)
        hasher.combine(vout)
        hasher.combine(blockHeight)
        hasher.combine(blockConfirmationCount)
        hasher.combine(feeRateSatPerVbyte)
        hasher.combine(confirmed)
        hasher.combine(suspicious0ConfReason)
    }
}


public struct FfiConverterTypeIBtOnchainTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtOnchainTransaction {
        return
            try IBtOnchainTransaction(
                amountSat: FfiConverterUInt64.read(from: &buf), 
                txId: FfiConverterString.read(from: &buf), 
                vout: FfiConverterUInt32.read(from: &buf), 
                blockHeight: FfiConverterOptionUInt32.read(from: &buf), 
                blockConfirmationCount: FfiConverterUInt32.read(from: &buf), 
                feeRateSatPerVbyte: FfiConverterDouble.read(from: &buf), 
                confirmed: FfiConverterBool.read(from: &buf), 
                suspicious0ConfReason: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IBtOnchainTransaction, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.amountSat, into: &buf)
        FfiConverterString.write(value.txId, into: &buf)
        FfiConverterUInt32.write(value.vout, into: &buf)
        FfiConverterOptionUInt32.write(value.blockHeight, into: &buf)
        FfiConverterUInt32.write(value.blockConfirmationCount, into: &buf)
        FfiConverterDouble.write(value.feeRateSatPerVbyte, into: &buf)
        FfiConverterBool.write(value.confirmed, into: &buf)
        FfiConverterString.write(value.suspicious0ConfReason, into: &buf)
    }
}


public func FfiConverterTypeIBtOnchainTransaction_lift(_ buf: RustBuffer) throws -> IBtOnchainTransaction {
    return try FfiConverterTypeIBtOnchainTransaction.lift(buf)
}

public func FfiConverterTypeIBtOnchainTransaction_lower(_ value: IBtOnchainTransaction) -> RustBuffer {
    return FfiConverterTypeIBtOnchainTransaction.lower(value)
}


public struct IBtOnchainTransactions {
    public var address: String
    public var confirmedSat: UInt64
    public var requiredConfirmations: UInt32
    public var transactions: [IBtOnchainTransaction]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, confirmedSat: UInt64, requiredConfirmations: UInt32, transactions: [IBtOnchainTransaction]) {
        self.address = address
        self.confirmedSat = confirmedSat
        self.requiredConfirmations = requiredConfirmations
        self.transactions = transactions
    }
}



extension IBtOnchainTransactions: Equatable, Hashable {
    public static func ==(lhs: IBtOnchainTransactions, rhs: IBtOnchainTransactions) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.confirmedSat != rhs.confirmedSat {
            return false
        }
        if lhs.requiredConfirmations != rhs.requiredConfirmations {
            return false
        }
        if lhs.transactions != rhs.transactions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(confirmedSat)
        hasher.combine(requiredConfirmations)
        hasher.combine(transactions)
    }
}


public struct FfiConverterTypeIBtOnchainTransactions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtOnchainTransactions {
        return
            try IBtOnchainTransactions(
                address: FfiConverterString.read(from: &buf), 
                confirmedSat: FfiConverterUInt64.read(from: &buf), 
                requiredConfirmations: FfiConverterUInt32.read(from: &buf), 
                transactions: FfiConverterSequenceTypeIBtOnchainTransaction.read(from: &buf)
        )
    }

    public static func write(_ value: IBtOnchainTransactions, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterUInt64.write(value.confirmedSat, into: &buf)
        FfiConverterUInt32.write(value.requiredConfirmations, into: &buf)
        FfiConverterSequenceTypeIBtOnchainTransaction.write(value.transactions, into: &buf)
    }
}


public func FfiConverterTypeIBtOnchainTransactions_lift(_ buf: RustBuffer) throws -> IBtOnchainTransactions {
    return try FfiConverterTypeIBtOnchainTransactions.lift(buf)
}

public func FfiConverterTypeIBtOnchainTransactions_lower(_ value: IBtOnchainTransactions) -> RustBuffer {
    return FfiConverterTypeIBtOnchainTransactions.lower(value)
}


public struct IBtOrder {
    public var id: String
    public var state: BtOrderState
    public var state2: BtOrderState2
    public var feeSat: UInt64
    public var networkFeeSat: UInt64
    public var serviceFeeSat: UInt64
    public var lspBalanceSat: UInt64
    public var clientBalanceSat: UInt64
    public var zeroConf: Bool
    public var zeroReserve: Bool
    public var clientNodeId: String?
    public var channelExpiryWeeks: UInt32
    public var channelExpiresAt: String
    public var orderExpiresAt: String
    public var channel: IBtChannel?
    public var lspNode: ILspNode
    public var lnurl: String?
    public var payment: IBtPayment
    public var couponCode: String?
    public var source: String?
    public var discount: IDiscount?
    public var updatedAt: String
    public var createdAt: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, state: BtOrderState, state2: BtOrderState2, feeSat: UInt64, networkFeeSat: UInt64, serviceFeeSat: UInt64, lspBalanceSat: UInt64, clientBalanceSat: UInt64, zeroConf: Bool, zeroReserve: Bool, clientNodeId: String?, channelExpiryWeeks: UInt32, channelExpiresAt: String, orderExpiresAt: String, channel: IBtChannel?, lspNode: ILspNode, lnurl: String?, payment: IBtPayment, couponCode: String?, source: String?, discount: IDiscount?, updatedAt: String, createdAt: String) {
        self.id = id
        self.state = state
        self.state2 = state2
        self.feeSat = feeSat
        self.networkFeeSat = networkFeeSat
        self.serviceFeeSat = serviceFeeSat
        self.lspBalanceSat = lspBalanceSat
        self.clientBalanceSat = clientBalanceSat
        self.zeroConf = zeroConf
        self.zeroReserve = zeroReserve
        self.clientNodeId = clientNodeId
        self.channelExpiryWeeks = channelExpiryWeeks
        self.channelExpiresAt = channelExpiresAt
        self.orderExpiresAt = orderExpiresAt
        self.channel = channel
        self.lspNode = lspNode
        self.lnurl = lnurl
        self.payment = payment
        self.couponCode = couponCode
        self.source = source
        self.discount = discount
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }
}



extension IBtOrder: Equatable, Hashable {
    public static func ==(lhs: IBtOrder, rhs: IBtOrder) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.state2 != rhs.state2 {
            return false
        }
        if lhs.feeSat != rhs.feeSat {
            return false
        }
        if lhs.networkFeeSat != rhs.networkFeeSat {
            return false
        }
        if lhs.serviceFeeSat != rhs.serviceFeeSat {
            return false
        }
        if lhs.lspBalanceSat != rhs.lspBalanceSat {
            return false
        }
        if lhs.clientBalanceSat != rhs.clientBalanceSat {
            return false
        }
        if lhs.zeroConf != rhs.zeroConf {
            return false
        }
        if lhs.zeroReserve != rhs.zeroReserve {
            return false
        }
        if lhs.clientNodeId != rhs.clientNodeId {
            return false
        }
        if lhs.channelExpiryWeeks != rhs.channelExpiryWeeks {
            return false
        }
        if lhs.channelExpiresAt != rhs.channelExpiresAt {
            return false
        }
        if lhs.orderExpiresAt != rhs.orderExpiresAt {
            return false
        }
        if lhs.channel != rhs.channel {
            return false
        }
        if lhs.lspNode != rhs.lspNode {
            return false
        }
        if lhs.lnurl != rhs.lnurl {
            return false
        }
        if lhs.payment != rhs.payment {
            return false
        }
        if lhs.couponCode != rhs.couponCode {
            return false
        }
        if lhs.source != rhs.source {
            return false
        }
        if lhs.discount != rhs.discount {
            return false
        }
        if lhs.updatedAt != rhs.updatedAt {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(state)
        hasher.combine(state2)
        hasher.combine(feeSat)
        hasher.combine(networkFeeSat)
        hasher.combine(serviceFeeSat)
        hasher.combine(lspBalanceSat)
        hasher.combine(clientBalanceSat)
        hasher.combine(zeroConf)
        hasher.combine(zeroReserve)
        hasher.combine(clientNodeId)
        hasher.combine(channelExpiryWeeks)
        hasher.combine(channelExpiresAt)
        hasher.combine(orderExpiresAt)
        hasher.combine(channel)
        hasher.combine(lspNode)
        hasher.combine(lnurl)
        hasher.combine(payment)
        hasher.combine(couponCode)
        hasher.combine(source)
        hasher.combine(discount)
        hasher.combine(updatedAt)
        hasher.combine(createdAt)
    }
}


public struct FfiConverterTypeIBtOrder: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtOrder {
        return
            try IBtOrder(
                id: FfiConverterString.read(from: &buf), 
                state: FfiConverterTypeBtOrderState.read(from: &buf), 
                state2: FfiConverterTypeBtOrderState2.read(from: &buf), 
                feeSat: FfiConverterUInt64.read(from: &buf), 
                networkFeeSat: FfiConverterUInt64.read(from: &buf), 
                serviceFeeSat: FfiConverterUInt64.read(from: &buf), 
                lspBalanceSat: FfiConverterUInt64.read(from: &buf), 
                clientBalanceSat: FfiConverterUInt64.read(from: &buf), 
                zeroConf: FfiConverterBool.read(from: &buf), 
                zeroReserve: FfiConverterBool.read(from: &buf), 
                clientNodeId: FfiConverterOptionString.read(from: &buf), 
                channelExpiryWeeks: FfiConverterUInt32.read(from: &buf), 
                channelExpiresAt: FfiConverterString.read(from: &buf), 
                orderExpiresAt: FfiConverterString.read(from: &buf), 
                channel: FfiConverterOptionTypeIBtChannel.read(from: &buf), 
                lspNode: FfiConverterTypeILspNode.read(from: &buf), 
                lnurl: FfiConverterOptionString.read(from: &buf), 
                payment: FfiConverterTypeIBtPayment.read(from: &buf), 
                couponCode: FfiConverterOptionString.read(from: &buf), 
                source: FfiConverterOptionString.read(from: &buf), 
                discount: FfiConverterOptionTypeIDiscount.read(from: &buf), 
                updatedAt: FfiConverterString.read(from: &buf), 
                createdAt: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IBtOrder, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeBtOrderState.write(value.state, into: &buf)
        FfiConverterTypeBtOrderState2.write(value.state2, into: &buf)
        FfiConverterUInt64.write(value.feeSat, into: &buf)
        FfiConverterUInt64.write(value.networkFeeSat, into: &buf)
        FfiConverterUInt64.write(value.serviceFeeSat, into: &buf)
        FfiConverterUInt64.write(value.lspBalanceSat, into: &buf)
        FfiConverterUInt64.write(value.clientBalanceSat, into: &buf)
        FfiConverterBool.write(value.zeroConf, into: &buf)
        FfiConverterBool.write(value.zeroReserve, into: &buf)
        FfiConverterOptionString.write(value.clientNodeId, into: &buf)
        FfiConverterUInt32.write(value.channelExpiryWeeks, into: &buf)
        FfiConverterString.write(value.channelExpiresAt, into: &buf)
        FfiConverterString.write(value.orderExpiresAt, into: &buf)
        FfiConverterOptionTypeIBtChannel.write(value.channel, into: &buf)
        FfiConverterTypeILspNode.write(value.lspNode, into: &buf)
        FfiConverterOptionString.write(value.lnurl, into: &buf)
        FfiConverterTypeIBtPayment.write(value.payment, into: &buf)
        FfiConverterOptionString.write(value.couponCode, into: &buf)
        FfiConverterOptionString.write(value.source, into: &buf)
        FfiConverterOptionTypeIDiscount.write(value.discount, into: &buf)
        FfiConverterString.write(value.updatedAt, into: &buf)
        FfiConverterString.write(value.createdAt, into: &buf)
    }
}


public func FfiConverterTypeIBtOrder_lift(_ buf: RustBuffer) throws -> IBtOrder {
    return try FfiConverterTypeIBtOrder.lift(buf)
}

public func FfiConverterTypeIBtOrder_lower(_ value: IBtOrder) -> RustBuffer {
    return FfiConverterTypeIBtOrder.lower(value)
}


public struct IBtPayment {
    public var state: BtPaymentState
    public var state2: BtPaymentState2
    public var paidSat: UInt64
    public var bolt11Invoice: IBtBolt11Invoice
    public var onchain: IBtOnchainTransactions
    public var isManuallyPaid: Bool?
    public var manualRefunds: [IManualRefund]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(state: BtPaymentState, state2: BtPaymentState2, paidSat: UInt64, bolt11Invoice: IBtBolt11Invoice, onchain: IBtOnchainTransactions, isManuallyPaid: Bool?, manualRefunds: [IManualRefund]?) {
        self.state = state
        self.state2 = state2
        self.paidSat = paidSat
        self.bolt11Invoice = bolt11Invoice
        self.onchain = onchain
        self.isManuallyPaid = isManuallyPaid
        self.manualRefunds = manualRefunds
    }
}



extension IBtPayment: Equatable, Hashable {
    public static func ==(lhs: IBtPayment, rhs: IBtPayment) -> Bool {
        if lhs.state != rhs.state {
            return false
        }
        if lhs.state2 != rhs.state2 {
            return false
        }
        if lhs.paidSat != rhs.paidSat {
            return false
        }
        if lhs.bolt11Invoice != rhs.bolt11Invoice {
            return false
        }
        if lhs.onchain != rhs.onchain {
            return false
        }
        if lhs.isManuallyPaid != rhs.isManuallyPaid {
            return false
        }
        if lhs.manualRefunds != rhs.manualRefunds {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(state)
        hasher.combine(state2)
        hasher.combine(paidSat)
        hasher.combine(bolt11Invoice)
        hasher.combine(onchain)
        hasher.combine(isManuallyPaid)
        hasher.combine(manualRefunds)
    }
}


public struct FfiConverterTypeIBtPayment: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IBtPayment {
        return
            try IBtPayment(
                state: FfiConverterTypeBtPaymentState.read(from: &buf), 
                state2: FfiConverterTypeBtPaymentState2.read(from: &buf), 
                paidSat: FfiConverterUInt64.read(from: &buf), 
                bolt11Invoice: FfiConverterTypeIBtBolt11Invoice.read(from: &buf), 
                onchain: FfiConverterTypeIBtOnchainTransactions.read(from: &buf), 
                isManuallyPaid: FfiConverterOptionBool.read(from: &buf), 
                manualRefunds: FfiConverterOptionSequenceTypeIManualRefund.read(from: &buf)
        )
    }

    public static func write(_ value: IBtPayment, into buf: inout [UInt8]) {
        FfiConverterTypeBtPaymentState.write(value.state, into: &buf)
        FfiConverterTypeBtPaymentState2.write(value.state2, into: &buf)
        FfiConverterUInt64.write(value.paidSat, into: &buf)
        FfiConverterTypeIBtBolt11Invoice.write(value.bolt11Invoice, into: &buf)
        FfiConverterTypeIBtOnchainTransactions.write(value.onchain, into: &buf)
        FfiConverterOptionBool.write(value.isManuallyPaid, into: &buf)
        FfiConverterOptionSequenceTypeIManualRefund.write(value.manualRefunds, into: &buf)
    }
}


public func FfiConverterTypeIBtPayment_lift(_ buf: RustBuffer) throws -> IBtPayment {
    return try FfiConverterTypeIBtPayment.lift(buf)
}

public func FfiConverterTypeIBtPayment_lower(_ value: IBtPayment) -> RustBuffer {
    return FfiConverterTypeIBtPayment.lower(value)
}


public struct IcJitEntry {
    public var id: String
    public var state: CJitStateEnum
    public var feeSat: UInt64
    public var networkFeeSat: UInt64
    public var serviceFeeSat: UInt64
    public var channelSizeSat: UInt64
    public var channelExpiryWeeks: UInt32
    public var channelOpenError: String?
    public var nodeId: String
    public var invoice: IBtBolt11Invoice
    public var channel: IBtChannel?
    public var lspNode: ILspNode
    public var couponCode: String
    public var source: String?
    public var discount: IDiscount?
    public var expiresAt: String
    public var updatedAt: String
    public var createdAt: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, state: CJitStateEnum, feeSat: UInt64, networkFeeSat: UInt64, serviceFeeSat: UInt64, channelSizeSat: UInt64, channelExpiryWeeks: UInt32, channelOpenError: String?, nodeId: String, invoice: IBtBolt11Invoice, channel: IBtChannel?, lspNode: ILspNode, couponCode: String, source: String?, discount: IDiscount?, expiresAt: String, updatedAt: String, createdAt: String) {
        self.id = id
        self.state = state
        self.feeSat = feeSat
        self.networkFeeSat = networkFeeSat
        self.serviceFeeSat = serviceFeeSat
        self.channelSizeSat = channelSizeSat
        self.channelExpiryWeeks = channelExpiryWeeks
        self.channelOpenError = channelOpenError
        self.nodeId = nodeId
        self.invoice = invoice
        self.channel = channel
        self.lspNode = lspNode
        self.couponCode = couponCode
        self.source = source
        self.discount = discount
        self.expiresAt = expiresAt
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }
}



extension IcJitEntry: Equatable, Hashable {
    public static func ==(lhs: IcJitEntry, rhs: IcJitEntry) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.feeSat != rhs.feeSat {
            return false
        }
        if lhs.networkFeeSat != rhs.networkFeeSat {
            return false
        }
        if lhs.serviceFeeSat != rhs.serviceFeeSat {
            return false
        }
        if lhs.channelSizeSat != rhs.channelSizeSat {
            return false
        }
        if lhs.channelExpiryWeeks != rhs.channelExpiryWeeks {
            return false
        }
        if lhs.channelOpenError != rhs.channelOpenError {
            return false
        }
        if lhs.nodeId != rhs.nodeId {
            return false
        }
        if lhs.invoice != rhs.invoice {
            return false
        }
        if lhs.channel != rhs.channel {
            return false
        }
        if lhs.lspNode != rhs.lspNode {
            return false
        }
        if lhs.couponCode != rhs.couponCode {
            return false
        }
        if lhs.source != rhs.source {
            return false
        }
        if lhs.discount != rhs.discount {
            return false
        }
        if lhs.expiresAt != rhs.expiresAt {
            return false
        }
        if lhs.updatedAt != rhs.updatedAt {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(state)
        hasher.combine(feeSat)
        hasher.combine(networkFeeSat)
        hasher.combine(serviceFeeSat)
        hasher.combine(channelSizeSat)
        hasher.combine(channelExpiryWeeks)
        hasher.combine(channelOpenError)
        hasher.combine(nodeId)
        hasher.combine(invoice)
        hasher.combine(channel)
        hasher.combine(lspNode)
        hasher.combine(couponCode)
        hasher.combine(source)
        hasher.combine(discount)
        hasher.combine(expiresAt)
        hasher.combine(updatedAt)
        hasher.combine(createdAt)
    }
}


public struct FfiConverterTypeICJitEntry: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IcJitEntry {
        return
            try IcJitEntry(
                id: FfiConverterString.read(from: &buf), 
                state: FfiConverterTypeCJitStateEnum.read(from: &buf), 
                feeSat: FfiConverterUInt64.read(from: &buf), 
                networkFeeSat: FfiConverterUInt64.read(from: &buf), 
                serviceFeeSat: FfiConverterUInt64.read(from: &buf), 
                channelSizeSat: FfiConverterUInt64.read(from: &buf), 
                channelExpiryWeeks: FfiConverterUInt32.read(from: &buf), 
                channelOpenError: FfiConverterOptionString.read(from: &buf), 
                nodeId: FfiConverterString.read(from: &buf), 
                invoice: FfiConverterTypeIBtBolt11Invoice.read(from: &buf), 
                channel: FfiConverterOptionTypeIBtChannel.read(from: &buf), 
                lspNode: FfiConverterTypeILspNode.read(from: &buf), 
                couponCode: FfiConverterString.read(from: &buf), 
                source: FfiConverterOptionString.read(from: &buf), 
                discount: FfiConverterOptionTypeIDiscount.read(from: &buf), 
                expiresAt: FfiConverterString.read(from: &buf), 
                updatedAt: FfiConverterString.read(from: &buf), 
                createdAt: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IcJitEntry, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeCJitStateEnum.write(value.state, into: &buf)
        FfiConverterUInt64.write(value.feeSat, into: &buf)
        FfiConverterUInt64.write(value.networkFeeSat, into: &buf)
        FfiConverterUInt64.write(value.serviceFeeSat, into: &buf)
        FfiConverterUInt64.write(value.channelSizeSat, into: &buf)
        FfiConverterUInt32.write(value.channelExpiryWeeks, into: &buf)
        FfiConverterOptionString.write(value.channelOpenError, into: &buf)
        FfiConverterString.write(value.nodeId, into: &buf)
        FfiConverterTypeIBtBolt11Invoice.write(value.invoice, into: &buf)
        FfiConverterOptionTypeIBtChannel.write(value.channel, into: &buf)
        FfiConverterTypeILspNode.write(value.lspNode, into: &buf)
        FfiConverterString.write(value.couponCode, into: &buf)
        FfiConverterOptionString.write(value.source, into: &buf)
        FfiConverterOptionTypeIDiscount.write(value.discount, into: &buf)
        FfiConverterString.write(value.expiresAt, into: &buf)
        FfiConverterString.write(value.updatedAt, into: &buf)
        FfiConverterString.write(value.createdAt, into: &buf)
    }
}


public func FfiConverterTypeICJitEntry_lift(_ buf: RustBuffer) throws -> IcJitEntry {
    return try FfiConverterTypeICJitEntry.lift(buf)
}

public func FfiConverterTypeICJitEntry_lower(_ value: IcJitEntry) -> RustBuffer {
    return FfiConverterTypeICJitEntry.lower(value)
}


public struct IDiscount {
    public var code: String
    public var absoluteSat: UInt64
    public var relative: Double
    public var overallSat: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(code: String, absoluteSat: UInt64, relative: Double, overallSat: UInt64) {
        self.code = code
        self.absoluteSat = absoluteSat
        self.relative = relative
        self.overallSat = overallSat
    }
}



extension IDiscount: Equatable, Hashable {
    public static func ==(lhs: IDiscount, rhs: IDiscount) -> Bool {
        if lhs.code != rhs.code {
            return false
        }
        if lhs.absoluteSat != rhs.absoluteSat {
            return false
        }
        if lhs.relative != rhs.relative {
            return false
        }
        if lhs.overallSat != rhs.overallSat {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(code)
        hasher.combine(absoluteSat)
        hasher.combine(relative)
        hasher.combine(overallSat)
    }
}


public struct FfiConverterTypeIDiscount: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IDiscount {
        return
            try IDiscount(
                code: FfiConverterString.read(from: &buf), 
                absoluteSat: FfiConverterUInt64.read(from: &buf), 
                relative: FfiConverterDouble.read(from: &buf), 
                overallSat: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: IDiscount, into buf: inout [UInt8]) {
        FfiConverterString.write(value.code, into: &buf)
        FfiConverterUInt64.write(value.absoluteSat, into: &buf)
        FfiConverterDouble.write(value.relative, into: &buf)
        FfiConverterUInt64.write(value.overallSat, into: &buf)
    }
}


public func FfiConverterTypeIDiscount_lift(_ buf: RustBuffer) throws -> IDiscount {
    return try FfiConverterTypeIDiscount.lift(buf)
}

public func FfiConverterTypeIDiscount_lower(_ value: IDiscount) -> RustBuffer {
    return FfiConverterTypeIDiscount.lower(value)
}


public struct IGift {
    public var id: String
    public var nodeId: String
    public var orderId: String?
    public var order: IBtOrder?
    public var bolt11PaymentId: String?
    public var bolt11Payment: IBtPayment?
    public var appliedGiftCodeId: String
    public var appliedGiftCode: IGiftCode?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, nodeId: String, orderId: String?, order: IBtOrder?, bolt11PaymentId: String?, bolt11Payment: IBtPayment?, appliedGiftCodeId: String, appliedGiftCode: IGiftCode?) {
        self.id = id
        self.nodeId = nodeId
        self.orderId = orderId
        self.order = order
        self.bolt11PaymentId = bolt11PaymentId
        self.bolt11Payment = bolt11Payment
        self.appliedGiftCodeId = appliedGiftCodeId
        self.appliedGiftCode = appliedGiftCode
    }
}



extension IGift: Equatable, Hashable {
    public static func ==(lhs: IGift, rhs: IGift) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.nodeId != rhs.nodeId {
            return false
        }
        if lhs.orderId != rhs.orderId {
            return false
        }
        if lhs.order != rhs.order {
            return false
        }
        if lhs.bolt11PaymentId != rhs.bolt11PaymentId {
            return false
        }
        if lhs.bolt11Payment != rhs.bolt11Payment {
            return false
        }
        if lhs.appliedGiftCodeId != rhs.appliedGiftCodeId {
            return false
        }
        if lhs.appliedGiftCode != rhs.appliedGiftCode {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(nodeId)
        hasher.combine(orderId)
        hasher.combine(order)
        hasher.combine(bolt11PaymentId)
        hasher.combine(bolt11Payment)
        hasher.combine(appliedGiftCodeId)
        hasher.combine(appliedGiftCode)
    }
}


public struct FfiConverterTypeIGift: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IGift {
        return
            try IGift(
                id: FfiConverterString.read(from: &buf), 
                nodeId: FfiConverterString.read(from: &buf), 
                orderId: FfiConverterOptionString.read(from: &buf), 
                order: FfiConverterOptionTypeIBtOrder.read(from: &buf), 
                bolt11PaymentId: FfiConverterOptionString.read(from: &buf), 
                bolt11Payment: FfiConverterOptionTypeIBtPayment.read(from: &buf), 
                appliedGiftCodeId: FfiConverterString.read(from: &buf), 
                appliedGiftCode: FfiConverterOptionTypeIGiftCode.read(from: &buf)
        )
    }

    public static func write(_ value: IGift, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.nodeId, into: &buf)
        FfiConverterOptionString.write(value.orderId, into: &buf)
        FfiConverterOptionTypeIBtOrder.write(value.order, into: &buf)
        FfiConverterOptionString.write(value.bolt11PaymentId, into: &buf)
        FfiConverterOptionTypeIBtPayment.write(value.bolt11Payment, into: &buf)
        FfiConverterString.write(value.appliedGiftCodeId, into: &buf)
        FfiConverterOptionTypeIGiftCode.write(value.appliedGiftCode, into: &buf)
    }
}


public func FfiConverterTypeIGift_lift(_ buf: RustBuffer) throws -> IGift {
    return try FfiConverterTypeIGift.lift(buf)
}

public func FfiConverterTypeIGift_lower(_ value: IGift) -> RustBuffer {
    return FfiConverterTypeIGift.lower(value)
}


public struct IGiftCode {
    public var id: String
    public var code: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, code: String) {
        self.id = id
        self.code = code
    }
}



extension IGiftCode: Equatable, Hashable {
    public static func ==(lhs: IGiftCode, rhs: IGiftCode) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.code != rhs.code {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(code)
    }
}


public struct FfiConverterTypeIGiftCode: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IGiftCode {
        return
            try IGiftCode(
                id: FfiConverterString.read(from: &buf), 
                code: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IGiftCode, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.code, into: &buf)
    }
}


public func FfiConverterTypeIGiftCode_lift(_ buf: RustBuffer) throws -> IGiftCode {
    return try FfiConverterTypeIGiftCode.lift(buf)
}

public func FfiConverterTypeIGiftCode_lower(_ value: IGiftCode) -> RustBuffer {
    return FfiConverterTypeIGiftCode.lower(value)
}


public struct ILspNode {
    public var alias: String
    public var pubkey: String
    public var connectionStrings: [String]
    public var readonly: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(alias: String, pubkey: String, connectionStrings: [String], readonly: Bool?) {
        self.alias = alias
        self.pubkey = pubkey
        self.connectionStrings = connectionStrings
        self.readonly = readonly
    }
}



extension ILspNode: Equatable, Hashable {
    public static func ==(lhs: ILspNode, rhs: ILspNode) -> Bool {
        if lhs.alias != rhs.alias {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        if lhs.connectionStrings != rhs.connectionStrings {
            return false
        }
        if lhs.readonly != rhs.readonly {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(alias)
        hasher.combine(pubkey)
        hasher.combine(connectionStrings)
        hasher.combine(readonly)
    }
}


public struct FfiConverterTypeILspNode: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ILspNode {
        return
            try ILspNode(
                alias: FfiConverterString.read(from: &buf), 
                pubkey: FfiConverterString.read(from: &buf), 
                connectionStrings: FfiConverterSequenceString.read(from: &buf), 
                readonly: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: ILspNode, into buf: inout [UInt8]) {
        FfiConverterString.write(value.alias, into: &buf)
        FfiConverterString.write(value.pubkey, into: &buf)
        FfiConverterSequenceString.write(value.connectionStrings, into: &buf)
        FfiConverterOptionBool.write(value.readonly, into: &buf)
    }
}


public func FfiConverterTypeILspNode_lift(_ buf: RustBuffer) throws -> ILspNode {
    return try FfiConverterTypeILspNode.lift(buf)
}

public func FfiConverterTypeILspNode_lower(_ value: ILspNode) -> RustBuffer {
    return FfiConverterTypeILspNode.lower(value)
}


public struct IManualRefund {
    public var amountSat: UInt64
    public var target: String
    public var state: ManualRefundStateEnum
    public var createdByName: String
    public var votedByName: String?
    public var reason: String?
    public var targetType: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(amountSat: UInt64, target: String, state: ManualRefundStateEnum, createdByName: String, votedByName: String?, reason: String?, targetType: String) {
        self.amountSat = amountSat
        self.target = target
        self.state = state
        self.createdByName = createdByName
        self.votedByName = votedByName
        self.reason = reason
        self.targetType = targetType
    }
}



extension IManualRefund: Equatable, Hashable {
    public static func ==(lhs: IManualRefund, rhs: IManualRefund) -> Bool {
        if lhs.amountSat != rhs.amountSat {
            return false
        }
        if lhs.target != rhs.target {
            return false
        }
        if lhs.state != rhs.state {
            return false
        }
        if lhs.createdByName != rhs.createdByName {
            return false
        }
        if lhs.votedByName != rhs.votedByName {
            return false
        }
        if lhs.reason != rhs.reason {
            return false
        }
        if lhs.targetType != rhs.targetType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amountSat)
        hasher.combine(target)
        hasher.combine(state)
        hasher.combine(createdByName)
        hasher.combine(votedByName)
        hasher.combine(reason)
        hasher.combine(targetType)
    }
}


public struct FfiConverterTypeIManualRefund: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IManualRefund {
        return
            try IManualRefund(
                amountSat: FfiConverterUInt64.read(from: &buf), 
                target: FfiConverterString.read(from: &buf), 
                state: FfiConverterTypeManualRefundStateEnum.read(from: &buf), 
                createdByName: FfiConverterString.read(from: &buf), 
                votedByName: FfiConverterOptionString.read(from: &buf), 
                reason: FfiConverterOptionString.read(from: &buf), 
                targetType: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: IManualRefund, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.amountSat, into: &buf)
        FfiConverterString.write(value.target, into: &buf)
        FfiConverterTypeManualRefundStateEnum.write(value.state, into: &buf)
        FfiConverterString.write(value.createdByName, into: &buf)
        FfiConverterOptionString.write(value.votedByName, into: &buf)
        FfiConverterOptionString.write(value.reason, into: &buf)
        FfiConverterString.write(value.targetType, into: &buf)
    }
}


public func FfiConverterTypeIManualRefund_lift(_ buf: RustBuffer) throws -> IManualRefund {
    return try FfiConverterTypeIManualRefund.lift(buf)
}

public func FfiConverterTypeIManualRefund_lower(_ value: IManualRefund) -> RustBuffer {
    return FfiConverterTypeIManualRefund.lower(value)
}


public struct LightningActivity {
    public var id: String
    public var txType: PaymentType
    public var status: PaymentState
    public var value: UInt64
    public var fee: UInt64?
    public var invoice: String
    public var message: String
    public var timestamp: UInt64
    public var preimage: String?
    public var createdAt: UInt64?
    public var updatedAt: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, txType: PaymentType, status: PaymentState, value: UInt64, fee: UInt64?, invoice: String, message: String, timestamp: UInt64, preimage: String?, createdAt: UInt64?, updatedAt: UInt64?) {
        self.id = id
        self.txType = txType
        self.status = status
        self.value = value
        self.fee = fee
        self.invoice = invoice
        self.message = message
        self.timestamp = timestamp
        self.preimage = preimage
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
}



extension LightningActivity: Equatable, Hashable {
    public static func ==(lhs: LightningActivity, rhs: LightningActivity) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.txType != rhs.txType {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.invoice != rhs.invoice {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.preimage != rhs.preimage {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.updatedAt != rhs.updatedAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(txType)
        hasher.combine(status)
        hasher.combine(value)
        hasher.combine(fee)
        hasher.combine(invoice)
        hasher.combine(message)
        hasher.combine(timestamp)
        hasher.combine(preimage)
        hasher.combine(createdAt)
        hasher.combine(updatedAt)
    }
}


public struct FfiConverterTypeLightningActivity: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LightningActivity {
        return
            try LightningActivity(
                id: FfiConverterString.read(from: &buf), 
                txType: FfiConverterTypePaymentType.read(from: &buf), 
                status: FfiConverterTypePaymentState.read(from: &buf), 
                value: FfiConverterUInt64.read(from: &buf), 
                fee: FfiConverterOptionUInt64.read(from: &buf), 
                invoice: FfiConverterString.read(from: &buf), 
                message: FfiConverterString.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf), 
                preimage: FfiConverterOptionString.read(from: &buf), 
                createdAt: FfiConverterOptionUInt64.read(from: &buf), 
                updatedAt: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: LightningActivity, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypePaymentType.write(value.txType, into: &buf)
        FfiConverterTypePaymentState.write(value.status, into: &buf)
        FfiConverterUInt64.write(value.value, into: &buf)
        FfiConverterOptionUInt64.write(value.fee, into: &buf)
        FfiConverterString.write(value.invoice, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
        FfiConverterOptionString.write(value.preimage, into: &buf)
        FfiConverterOptionUInt64.write(value.createdAt, into: &buf)
        FfiConverterOptionUInt64.write(value.updatedAt, into: &buf)
    }
}


public func FfiConverterTypeLightningActivity_lift(_ buf: RustBuffer) throws -> LightningActivity {
    return try FfiConverterTypeLightningActivity.lift(buf)
}

public func FfiConverterTypeLightningActivity_lower(_ value: LightningActivity) -> RustBuffer {
    return FfiConverterTypeLightningActivity.lower(value)
}


public struct LightningInvoice {
    public var bolt11: String
    public var paymentHash: Data
    public var amountSatoshis: UInt64
    public var timestampSeconds: UInt64
    public var expirySeconds: UInt64
    public var isExpired: Bool
    public var description: String?
    public var networkType: NetworkType
    public var payeeNodeId: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bolt11: String, paymentHash: Data, amountSatoshis: UInt64, timestampSeconds: UInt64, expirySeconds: UInt64, isExpired: Bool, description: String?, networkType: NetworkType, payeeNodeId: Data?) {
        self.bolt11 = bolt11
        self.paymentHash = paymentHash
        self.amountSatoshis = amountSatoshis
        self.timestampSeconds = timestampSeconds
        self.expirySeconds = expirySeconds
        self.isExpired = isExpired
        self.description = description
        self.networkType = networkType
        self.payeeNodeId = payeeNodeId
    }
}



extension LightningInvoice: Equatable, Hashable {
    public static func ==(lhs: LightningInvoice, rhs: LightningInvoice) -> Bool {
        if lhs.bolt11 != rhs.bolt11 {
            return false
        }
        if lhs.paymentHash != rhs.paymentHash {
            return false
        }
        if lhs.amountSatoshis != rhs.amountSatoshis {
            return false
        }
        if lhs.timestampSeconds != rhs.timestampSeconds {
            return false
        }
        if lhs.expirySeconds != rhs.expirySeconds {
            return false
        }
        if lhs.isExpired != rhs.isExpired {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.networkType != rhs.networkType {
            return false
        }
        if lhs.payeeNodeId != rhs.payeeNodeId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bolt11)
        hasher.combine(paymentHash)
        hasher.combine(amountSatoshis)
        hasher.combine(timestampSeconds)
        hasher.combine(expirySeconds)
        hasher.combine(isExpired)
        hasher.combine(description)
        hasher.combine(networkType)
        hasher.combine(payeeNodeId)
    }
}


public struct FfiConverterTypeLightningInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LightningInvoice {
        return
            try LightningInvoice(
                bolt11: FfiConverterString.read(from: &buf), 
                paymentHash: FfiConverterData.read(from: &buf), 
                amountSatoshis: FfiConverterUInt64.read(from: &buf), 
                timestampSeconds: FfiConverterUInt64.read(from: &buf), 
                expirySeconds: FfiConverterUInt64.read(from: &buf), 
                isExpired: FfiConverterBool.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                networkType: FfiConverterTypeNetworkType.read(from: &buf), 
                payeeNodeId: FfiConverterOptionData.read(from: &buf)
        )
    }

    public static func write(_ value: LightningInvoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.bolt11, into: &buf)
        FfiConverterData.write(value.paymentHash, into: &buf)
        FfiConverterUInt64.write(value.amountSatoshis, into: &buf)
        FfiConverterUInt64.write(value.timestampSeconds, into: &buf)
        FfiConverterUInt64.write(value.expirySeconds, into: &buf)
        FfiConverterBool.write(value.isExpired, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterTypeNetworkType.write(value.networkType, into: &buf)
        FfiConverterOptionData.write(value.payeeNodeId, into: &buf)
    }
}


public func FfiConverterTypeLightningInvoice_lift(_ buf: RustBuffer) throws -> LightningInvoice {
    return try FfiConverterTypeLightningInvoice.lift(buf)
}

public func FfiConverterTypeLightningInvoice_lower(_ value: LightningInvoice) -> RustBuffer {
    return FfiConverterTypeLightningInvoice.lower(value)
}


public struct LnurlAddressData {
    public var uri: String
    public var domain: String
    public var username: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, domain: String, username: String) {
        self.uri = uri
        self.domain = domain
        self.username = username
    }
}



extension LnurlAddressData: Equatable, Hashable {
    public static func ==(lhs: LnurlAddressData, rhs: LnurlAddressData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.username != rhs.username {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(domain)
        hasher.combine(username)
    }
}


public struct FfiConverterTypeLnurlAddressData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlAddressData {
        return
            try LnurlAddressData(
                uri: FfiConverterString.read(from: &buf), 
                domain: FfiConverterString.read(from: &buf), 
                username: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlAddressData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.domain, into: &buf)
        FfiConverterString.write(value.username, into: &buf)
    }
}


public func FfiConverterTypeLnurlAddressData_lift(_ buf: RustBuffer) throws -> LnurlAddressData {
    return try FfiConverterTypeLnurlAddressData.lift(buf)
}

public func FfiConverterTypeLnurlAddressData_lower(_ value: LnurlAddressData) -> RustBuffer {
    return FfiConverterTypeLnurlAddressData.lower(value)
}


public struct LnurlAuthData {
    public var uri: String
    public var tag: String
    public var k1: String
    public var domain: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, tag: String, k1: String, domain: String) {
        self.uri = uri
        self.tag = tag
        self.k1 = k1
        self.domain = domain
    }
}



extension LnurlAuthData: Equatable, Hashable {
    public static func ==(lhs: LnurlAuthData, rhs: LnurlAuthData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(tag)
        hasher.combine(k1)
        hasher.combine(domain)
    }
}


public struct FfiConverterTypeLnurlAuthData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlAuthData {
        return
            try LnurlAuthData(
                uri: FfiConverterString.read(from: &buf), 
                tag: FfiConverterString.read(from: &buf), 
                k1: FfiConverterString.read(from: &buf), 
                domain: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlAuthData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.domain, into: &buf)
    }
}


public func FfiConverterTypeLnurlAuthData_lift(_ buf: RustBuffer) throws -> LnurlAuthData {
    return try FfiConverterTypeLnurlAuthData.lift(buf)
}

public func FfiConverterTypeLnurlAuthData_lower(_ value: LnurlAuthData) -> RustBuffer {
    return FfiConverterTypeLnurlAuthData.lower(value)
}


public struct LnurlChannelData {
    public var uri: String
    public var callback: String
    public var k1: String
    public var tag: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, k1: String, tag: String) {
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.tag = tag
    }
}



extension LnurlChannelData: Equatable, Hashable {
    public static func ==(lhs: LnurlChannelData, rhs: LnurlChannelData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(k1)
        hasher.combine(tag)
    }
}


public struct FfiConverterTypeLnurlChannelData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlChannelData {
        return
            try LnurlChannelData(
                uri: FfiConverterString.read(from: &buf), 
                callback: FfiConverterString.read(from: &buf), 
                k1: FfiConverterString.read(from: &buf), 
                tag: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlChannelData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
    }
}


public func FfiConverterTypeLnurlChannelData_lift(_ buf: RustBuffer) throws -> LnurlChannelData {
    return try FfiConverterTypeLnurlChannelData.lift(buf)
}

public func FfiConverterTypeLnurlChannelData_lower(_ value: LnurlChannelData) -> RustBuffer {
    return FfiConverterTypeLnurlChannelData.lower(value)
}


public struct LnurlPayData {
    public var uri: String
    public var callback: String
    public var minSendable: UInt64
    public var maxSendable: UInt64
    public var metadataStr: String
    public var commentAllowed: UInt32?
    public var allowsNostr: Bool
    public var nostrPubkey: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, minSendable: UInt64, maxSendable: UInt64, metadataStr: String, commentAllowed: UInt32?, allowsNostr: Bool, nostrPubkey: Data?) {
        self.uri = uri
        self.callback = callback
        self.minSendable = minSendable
        self.maxSendable = maxSendable
        self.metadataStr = metadataStr
        self.commentAllowed = commentAllowed
        self.allowsNostr = allowsNostr
        self.nostrPubkey = nostrPubkey
    }
}



extension LnurlPayData: Equatable, Hashable {
    public static func ==(lhs: LnurlPayData, rhs: LnurlPayData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.minSendable != rhs.minSendable {
            return false
        }
        if lhs.maxSendable != rhs.maxSendable {
            return false
        }
        if lhs.metadataStr != rhs.metadataStr {
            return false
        }
        if lhs.commentAllowed != rhs.commentAllowed {
            return false
        }
        if lhs.allowsNostr != rhs.allowsNostr {
            return false
        }
        if lhs.nostrPubkey != rhs.nostrPubkey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(minSendable)
        hasher.combine(maxSendable)
        hasher.combine(metadataStr)
        hasher.combine(commentAllowed)
        hasher.combine(allowsNostr)
        hasher.combine(nostrPubkey)
    }
}


public struct FfiConverterTypeLnurlPayData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlPayData {
        return
            try LnurlPayData(
                uri: FfiConverterString.read(from: &buf), 
                callback: FfiConverterString.read(from: &buf), 
                minSendable: FfiConverterUInt64.read(from: &buf), 
                maxSendable: FfiConverterUInt64.read(from: &buf), 
                metadataStr: FfiConverterString.read(from: &buf), 
                commentAllowed: FfiConverterOptionUInt32.read(from: &buf), 
                allowsNostr: FfiConverterBool.read(from: &buf), 
                nostrPubkey: FfiConverterOptionData.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlPayData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterUInt64.write(value.minSendable, into: &buf)
        FfiConverterUInt64.write(value.maxSendable, into: &buf)
        FfiConverterString.write(value.metadataStr, into: &buf)
        FfiConverterOptionUInt32.write(value.commentAllowed, into: &buf)
        FfiConverterBool.write(value.allowsNostr, into: &buf)
        FfiConverterOptionData.write(value.nostrPubkey, into: &buf)
    }
}


public func FfiConverterTypeLnurlPayData_lift(_ buf: RustBuffer) throws -> LnurlPayData {
    return try FfiConverterTypeLnurlPayData.lift(buf)
}

public func FfiConverterTypeLnurlPayData_lower(_ value: LnurlPayData) -> RustBuffer {
    return FfiConverterTypeLnurlPayData.lower(value)
}


public struct LnurlWithdrawData {
    public var uri: String
    public var callback: String
    public var k1: String
    public var defaultDescription: String
    public var minWithdrawable: UInt64?
    public var maxWithdrawable: UInt64
    public var tag: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, k1: String, defaultDescription: String, minWithdrawable: UInt64?, maxWithdrawable: UInt64, tag: String) {
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.defaultDescription = defaultDescription
        self.minWithdrawable = minWithdrawable
        self.maxWithdrawable = maxWithdrawable
        self.tag = tag
    }
}



extension LnurlWithdrawData: Equatable, Hashable {
    public static func ==(lhs: LnurlWithdrawData, rhs: LnurlWithdrawData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.defaultDescription != rhs.defaultDescription {
            return false
        }
        if lhs.minWithdrawable != rhs.minWithdrawable {
            return false
        }
        if lhs.maxWithdrawable != rhs.maxWithdrawable {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(k1)
        hasher.combine(defaultDescription)
        hasher.combine(minWithdrawable)
        hasher.combine(maxWithdrawable)
        hasher.combine(tag)
    }
}


public struct FfiConverterTypeLnurlWithdrawData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlWithdrawData {
        return
            try LnurlWithdrawData(
                uri: FfiConverterString.read(from: &buf), 
                callback: FfiConverterString.read(from: &buf), 
                k1: FfiConverterString.read(from: &buf), 
                defaultDescription: FfiConverterString.read(from: &buf), 
                minWithdrawable: FfiConverterOptionUInt64.read(from: &buf), 
                maxWithdrawable: FfiConverterUInt64.read(from: &buf), 
                tag: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlWithdrawData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.defaultDescription, into: &buf)
        FfiConverterOptionUInt64.write(value.minWithdrawable, into: &buf)
        FfiConverterUInt64.write(value.maxWithdrawable, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
    }
}


public func FfiConverterTypeLnurlWithdrawData_lift(_ buf: RustBuffer) throws -> LnurlWithdrawData {
    return try FfiConverterTypeLnurlWithdrawData.lift(buf)
}

public func FfiConverterTypeLnurlWithdrawData_lower(_ value: LnurlWithdrawData) -> RustBuffer {
    return FfiConverterTypeLnurlWithdrawData.lower(value)
}


/**
 * Message signature response
 */
public struct MessageSignatureResponse {
    /**
     * Signer address
     */
    public var address: String
    /**
     * Signature in base64 format
     */
    public var signature: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Signer address
         */address: String, 
        /**
         * Signature in base64 format
         */signature: String) {
        self.address = address
        self.signature = signature
    }
}



extension MessageSignatureResponse: Equatable, Hashable {
    public static func ==(lhs: MessageSignatureResponse, rhs: MessageSignatureResponse) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(signature)
    }
}


public struct FfiConverterTypeMessageSignatureResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MessageSignatureResponse {
        return
            try MessageSignatureResponse(
                address: FfiConverterString.read(from: &buf), 
                signature: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: MessageSignatureResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.signature, into: &buf)
    }
}


public func FfiConverterTypeMessageSignatureResponse_lift(_ buf: RustBuffer) throws -> MessageSignatureResponse {
    return try FfiConverterTypeMessageSignatureResponse.lift(buf)
}

public func FfiConverterTypeMessageSignatureResponse_lower(_ value: MessageSignatureResponse) -> RustBuffer {
    return FfiConverterTypeMessageSignatureResponse.lower(value)
}


/**
 * Multisig Redeem Script Type
 */
public struct MultisigRedeemScriptType {
    /**
     * Public keys
     */
    public var pubkeys: [HdNodePathType]
    /**
     * Signatures
     */
    public var signatures: [String]
    /**
     * M-of-N threshold
     */
    public var m: UInt32
    /**
     * Nodes (optional)
     */
    public var nodes: [HdNodeType]?
    /**
     * Pubkeys order (optional): 0 for PRESERVED, 1 for LEXICOGRAPHIC
     */
    public var pubkeysOrder: UInt8?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Public keys
         */pubkeys: [HdNodePathType], 
        /**
         * Signatures
         */signatures: [String], 
        /**
         * M-of-N threshold
         */m: UInt32, 
        /**
         * Nodes (optional)
         */nodes: [HdNodeType]?, 
        /**
         * Pubkeys order (optional): 0 for PRESERVED, 1 for LEXICOGRAPHIC
         */pubkeysOrder: UInt8?) {
        self.pubkeys = pubkeys
        self.signatures = signatures
        self.m = m
        self.nodes = nodes
        self.pubkeysOrder = pubkeysOrder
    }
}



extension MultisigRedeemScriptType: Equatable, Hashable {
    public static func ==(lhs: MultisigRedeemScriptType, rhs: MultisigRedeemScriptType) -> Bool {
        if lhs.pubkeys != rhs.pubkeys {
            return false
        }
        if lhs.signatures != rhs.signatures {
            return false
        }
        if lhs.m != rhs.m {
            return false
        }
        if lhs.nodes != rhs.nodes {
            return false
        }
        if lhs.pubkeysOrder != rhs.pubkeysOrder {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(pubkeys)
        hasher.combine(signatures)
        hasher.combine(m)
        hasher.combine(nodes)
        hasher.combine(pubkeysOrder)
    }
}


public struct FfiConverterTypeMultisigRedeemScriptType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MultisigRedeemScriptType {
        return
            try MultisigRedeemScriptType(
                pubkeys: FfiConverterSequenceTypeHDNodePathType.read(from: &buf), 
                signatures: FfiConverterSequenceString.read(from: &buf), 
                m: FfiConverterUInt32.read(from: &buf), 
                nodes: FfiConverterOptionSequenceTypeHDNodeType.read(from: &buf), 
                pubkeysOrder: FfiConverterOptionUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: MultisigRedeemScriptType, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeHDNodePathType.write(value.pubkeys, into: &buf)
        FfiConverterSequenceString.write(value.signatures, into: &buf)
        FfiConverterUInt32.write(value.m, into: &buf)
        FfiConverterOptionSequenceTypeHDNodeType.write(value.nodes, into: &buf)
        FfiConverterOptionUInt8.write(value.pubkeysOrder, into: &buf)
    }
}


public func FfiConverterTypeMultisigRedeemScriptType_lift(_ buf: RustBuffer) throws -> MultisigRedeemScriptType {
    return try FfiConverterTypeMultisigRedeemScriptType.lift(buf)
}

public func FfiConverterTypeMultisigRedeemScriptType_lower(_ value: MultisigRedeemScriptType) -> RustBuffer {
    return FfiConverterTypeMultisigRedeemScriptType.lower(value)
}


public struct OnChainInvoice {
    public var address: String
    public var amountSatoshis: UInt64
    public var label: String?
    public var message: String?
    public var params: [String: String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, amountSatoshis: UInt64, label: String?, message: String?, params: [String: String]?) {
        self.address = address
        self.amountSatoshis = amountSatoshis
        self.label = label
        self.message = message
        self.params = params
    }
}



extension OnChainInvoice: Equatable, Hashable {
    public static func ==(lhs: OnChainInvoice, rhs: OnChainInvoice) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.amountSatoshis != rhs.amountSatoshis {
            return false
        }
        if lhs.label != rhs.label {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(amountSatoshis)
        hasher.combine(label)
        hasher.combine(message)
        hasher.combine(params)
    }
}


public struct FfiConverterTypeOnChainInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnChainInvoice {
        return
            try OnChainInvoice(
                address: FfiConverterString.read(from: &buf), 
                amountSatoshis: FfiConverterUInt64.read(from: &buf), 
                label: FfiConverterOptionString.read(from: &buf), 
                message: FfiConverterOptionString.read(from: &buf), 
                params: FfiConverterOptionDictionaryStringString.read(from: &buf)
        )
    }

    public static func write(_ value: OnChainInvoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterUInt64.write(value.amountSatoshis, into: &buf)
        FfiConverterOptionString.write(value.label, into: &buf)
        FfiConverterOptionString.write(value.message, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.params, into: &buf)
    }
}


public func FfiConverterTypeOnChainInvoice_lift(_ buf: RustBuffer) throws -> OnChainInvoice {
    return try FfiConverterTypeOnChainInvoice.lift(buf)
}

public func FfiConverterTypeOnChainInvoice_lower(_ value: OnChainInvoice) -> RustBuffer {
    return FfiConverterTypeOnChainInvoice.lower(value)
}


public struct OnchainActivity {
    public var id: String
    public var txType: PaymentType
    public var txId: String
    public var value: UInt64
    public var fee: UInt64
    public var feeRate: UInt64
    public var address: String
    public var confirmed: Bool
    public var timestamp: UInt64
    public var isBoosted: Bool
    public var isTransfer: Bool
    public var doesExist: Bool
    public var confirmTimestamp: UInt64?
    public var channelId: String?
    public var transferTxId: String?
    public var createdAt: UInt64?
    public var updatedAt: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, txType: PaymentType, txId: String, value: UInt64, fee: UInt64, feeRate: UInt64, address: String, confirmed: Bool, timestamp: UInt64, isBoosted: Bool, isTransfer: Bool, doesExist: Bool, confirmTimestamp: UInt64?, channelId: String?, transferTxId: String?, createdAt: UInt64?, updatedAt: UInt64?) {
        self.id = id
        self.txType = txType
        self.txId = txId
        self.value = value
        self.fee = fee
        self.feeRate = feeRate
        self.address = address
        self.confirmed = confirmed
        self.timestamp = timestamp
        self.isBoosted = isBoosted
        self.isTransfer = isTransfer
        self.doesExist = doesExist
        self.confirmTimestamp = confirmTimestamp
        self.channelId = channelId
        self.transferTxId = transferTxId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
}



extension OnchainActivity: Equatable, Hashable {
    public static func ==(lhs: OnchainActivity, rhs: OnchainActivity) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.txType != rhs.txType {
            return false
        }
        if lhs.txId != rhs.txId {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.feeRate != rhs.feeRate {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.confirmed != rhs.confirmed {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.isBoosted != rhs.isBoosted {
            return false
        }
        if lhs.isTransfer != rhs.isTransfer {
            return false
        }
        if lhs.doesExist != rhs.doesExist {
            return false
        }
        if lhs.confirmTimestamp != rhs.confirmTimestamp {
            return false
        }
        if lhs.channelId != rhs.channelId {
            return false
        }
        if lhs.transferTxId != rhs.transferTxId {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.updatedAt != rhs.updatedAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(txType)
        hasher.combine(txId)
        hasher.combine(value)
        hasher.combine(fee)
        hasher.combine(feeRate)
        hasher.combine(address)
        hasher.combine(confirmed)
        hasher.combine(timestamp)
        hasher.combine(isBoosted)
        hasher.combine(isTransfer)
        hasher.combine(doesExist)
        hasher.combine(confirmTimestamp)
        hasher.combine(channelId)
        hasher.combine(transferTxId)
        hasher.combine(createdAt)
        hasher.combine(updatedAt)
    }
}


public struct FfiConverterTypeOnchainActivity: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnchainActivity {
        return
            try OnchainActivity(
                id: FfiConverterString.read(from: &buf), 
                txType: FfiConverterTypePaymentType.read(from: &buf), 
                txId: FfiConverterString.read(from: &buf), 
                value: FfiConverterUInt64.read(from: &buf), 
                fee: FfiConverterUInt64.read(from: &buf), 
                feeRate: FfiConverterUInt64.read(from: &buf), 
                address: FfiConverterString.read(from: &buf), 
                confirmed: FfiConverterBool.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf), 
                isBoosted: FfiConverterBool.read(from: &buf), 
                isTransfer: FfiConverterBool.read(from: &buf), 
                doesExist: FfiConverterBool.read(from: &buf), 
                confirmTimestamp: FfiConverterOptionUInt64.read(from: &buf), 
                channelId: FfiConverterOptionString.read(from: &buf), 
                transferTxId: FfiConverterOptionString.read(from: &buf), 
                createdAt: FfiConverterOptionUInt64.read(from: &buf), 
                updatedAt: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: OnchainActivity, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypePaymentType.write(value.txType, into: &buf)
        FfiConverterString.write(value.txId, into: &buf)
        FfiConverterUInt64.write(value.value, into: &buf)
        FfiConverterUInt64.write(value.fee, into: &buf)
        FfiConverterUInt64.write(value.feeRate, into: &buf)
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterBool.write(value.confirmed, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
        FfiConverterBool.write(value.isBoosted, into: &buf)
        FfiConverterBool.write(value.isTransfer, into: &buf)
        FfiConverterBool.write(value.doesExist, into: &buf)
        FfiConverterOptionUInt64.write(value.confirmTimestamp, into: &buf)
        FfiConverterOptionString.write(value.channelId, into: &buf)
        FfiConverterOptionString.write(value.transferTxId, into: &buf)
        FfiConverterOptionUInt64.write(value.createdAt, into: &buf)
        FfiConverterOptionUInt64.write(value.updatedAt, into: &buf)
    }
}


public func FfiConverterTypeOnchainActivity_lift(_ buf: RustBuffer) throws -> OnchainActivity {
    return try FfiConverterTypeOnchainActivity.lift(buf)
}

public func FfiConverterTypeOnchainActivity_lower(_ value: OnchainActivity) -> RustBuffer {
    return FfiConverterTypeOnchainActivity.lower(value)
}


/**
 * Payment request memo types
 */
public struct PaymentRequestMemo {
    /**
     * Text memo
     */
    public var textMemo: TextMemo?
    /**
     * Refund memo
     */
    public var refundMemo: RefundMemo?
    /**
     * Coin purchase memo
     */
    public var coinPurchaseMemo: CoinPurchaseMemo?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Text memo
         */textMemo: TextMemo?, 
        /**
         * Refund memo
         */refundMemo: RefundMemo?, 
        /**
         * Coin purchase memo
         */coinPurchaseMemo: CoinPurchaseMemo?) {
        self.textMemo = textMemo
        self.refundMemo = refundMemo
        self.coinPurchaseMemo = coinPurchaseMemo
    }
}



extension PaymentRequestMemo: Equatable, Hashable {
    public static func ==(lhs: PaymentRequestMemo, rhs: PaymentRequestMemo) -> Bool {
        if lhs.textMemo != rhs.textMemo {
            return false
        }
        if lhs.refundMemo != rhs.refundMemo {
            return false
        }
        if lhs.coinPurchaseMemo != rhs.coinPurchaseMemo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(textMemo)
        hasher.combine(refundMemo)
        hasher.combine(coinPurchaseMemo)
    }
}


public struct FfiConverterTypePaymentRequestMemo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentRequestMemo {
        return
            try PaymentRequestMemo(
                textMemo: FfiConverterOptionTypeTextMemo.read(from: &buf), 
                refundMemo: FfiConverterOptionTypeRefundMemo.read(from: &buf), 
                coinPurchaseMemo: FfiConverterOptionTypeCoinPurchaseMemo.read(from: &buf)
        )
    }

    public static func write(_ value: PaymentRequestMemo, into buf: inout [UInt8]) {
        FfiConverterOptionTypeTextMemo.write(value.textMemo, into: &buf)
        FfiConverterOptionTypeRefundMemo.write(value.refundMemo, into: &buf)
        FfiConverterOptionTypeCoinPurchaseMemo.write(value.coinPurchaseMemo, into: &buf)
    }
}


public func FfiConverterTypePaymentRequestMemo_lift(_ buf: RustBuffer) throws -> PaymentRequestMemo {
    return try FfiConverterTypePaymentRequestMemo.lift(buf)
}

public func FfiConverterTypePaymentRequestMemo_lower(_ value: PaymentRequestMemo) -> RustBuffer {
    return FfiConverterTypePaymentRequestMemo.lower(value)
}


/**
 * Precomposed transaction input
 */
public struct PrecomposedInput {
    /**
     * BIP32 derivation path
     */
    public var addressN: [UInt32]
    /**
     * Amount in satoshis
     */
    public var amount: String
    /**
     * Previous transaction hash
     */
    public var prevHash: String
    /**
     * Previous output index
     */
    public var prevIndex: UInt32
    /**
     * Script type
     */
    public var scriptType: ScriptType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * BIP32 derivation path
         */addressN: [UInt32], 
        /**
         * Amount in satoshis
         */amount: String, 
        /**
         * Previous transaction hash
         */prevHash: String, 
        /**
         * Previous output index
         */prevIndex: UInt32, 
        /**
         * Script type
         */scriptType: ScriptType) {
        self.addressN = addressN
        self.amount = amount
        self.prevHash = prevHash
        self.prevIndex = prevIndex
        self.scriptType = scriptType
    }
}



extension PrecomposedInput: Equatable, Hashable {
    public static func ==(lhs: PrecomposedInput, rhs: PrecomposedInput) -> Bool {
        if lhs.addressN != rhs.addressN {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.prevHash != rhs.prevHash {
            return false
        }
        if lhs.prevIndex != rhs.prevIndex {
            return false
        }
        if lhs.scriptType != rhs.scriptType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addressN)
        hasher.combine(amount)
        hasher.combine(prevHash)
        hasher.combine(prevIndex)
        hasher.combine(scriptType)
    }
}


public struct FfiConverterTypePrecomposedInput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrecomposedInput {
        return
            try PrecomposedInput(
                addressN: FfiConverterSequenceUInt32.read(from: &buf), 
                amount: FfiConverterString.read(from: &buf), 
                prevHash: FfiConverterString.read(from: &buf), 
                prevIndex: FfiConverterUInt32.read(from: &buf), 
                scriptType: FfiConverterTypeScriptType.read(from: &buf)
        )
    }

    public static func write(_ value: PrecomposedInput, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt32.write(value.addressN, into: &buf)
        FfiConverterString.write(value.amount, into: &buf)
        FfiConverterString.write(value.prevHash, into: &buf)
        FfiConverterUInt32.write(value.prevIndex, into: &buf)
        FfiConverterTypeScriptType.write(value.scriptType, into: &buf)
    }
}


public func FfiConverterTypePrecomposedInput_lift(_ buf: RustBuffer) throws -> PrecomposedInput {
    return try FfiConverterTypePrecomposedInput.lift(buf)
}

public func FfiConverterTypePrecomposedInput_lower(_ value: PrecomposedInput) -> RustBuffer {
    return FfiConverterTypePrecomposedInput.lower(value)
}


/**
 * Precomposed transaction output
 */
public struct PrecomposedOutput {
    /**
     * BIP32 derivation path (for change outputs)
     */
    public var addressN: [UInt32]?
    /**
     * Amount in satoshis
     */
    public var amount: String
    /**
     * Address (for regular outputs)
     */
    public var address: String?
    /**
     * Script type
     */
    public var scriptType: ScriptType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * BIP32 derivation path (for change outputs)
         */addressN: [UInt32]?, 
        /**
         * Amount in satoshis
         */amount: String, 
        /**
         * Address (for regular outputs)
         */address: String?, 
        /**
         * Script type
         */scriptType: ScriptType) {
        self.addressN = addressN
        self.amount = amount
        self.address = address
        self.scriptType = scriptType
    }
}



extension PrecomposedOutput: Equatable, Hashable {
    public static func ==(lhs: PrecomposedOutput, rhs: PrecomposedOutput) -> Bool {
        if lhs.addressN != rhs.addressN {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.address != rhs.address {
            return false
        }
        if lhs.scriptType != rhs.scriptType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addressN)
        hasher.combine(amount)
        hasher.combine(address)
        hasher.combine(scriptType)
    }
}


public struct FfiConverterTypePrecomposedOutput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrecomposedOutput {
        return
            try PrecomposedOutput(
                addressN: FfiConverterOptionSequenceUInt32.read(from: &buf), 
                amount: FfiConverterString.read(from: &buf), 
                address: FfiConverterOptionString.read(from: &buf), 
                scriptType: FfiConverterTypeScriptType.read(from: &buf)
        )
    }

    public static func write(_ value: PrecomposedOutput, into buf: inout [UInt8]) {
        FfiConverterOptionSequenceUInt32.write(value.addressN, into: &buf)
        FfiConverterString.write(value.amount, into: &buf)
        FfiConverterOptionString.write(value.address, into: &buf)
        FfiConverterTypeScriptType.write(value.scriptType, into: &buf)
    }
}


public func FfiConverterTypePrecomposedOutput_lift(_ buf: RustBuffer) throws -> PrecomposedOutput {
    return try FfiConverterTypePrecomposedOutput.lift(buf)
}

public func FfiConverterTypePrecomposedOutput_lower(_ value: PrecomposedOutput) -> RustBuffer {
    return FfiConverterTypePrecomposedOutput.lower(value)
}


/**
 * Precomposed transaction
 */
public struct PrecomposedTransaction {
    /**
     * Transaction type (usually "final" or "error")
     */
    public var txType: String
    /**
     * Total amount spent (including fee)
     */
    public var totalSpent: String?
    /**
     * Transaction fee
     */
    public var fee: String?
    /**
     * Fee per byte
     */
    public var feePerByte: String?
    /**
     * Transaction size in bytes
     */
    public var bytes: UInt32?
    /**
     * Transaction inputs
     */
    public var inputs: [PrecomposedInput]?
    /**
     * Transaction outputs
     */
    public var outputs: [PrecomposedOutput]?
    /**
     * Output permutation indices
     */
    public var outputsPermutation: [UInt32]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Transaction type (usually "final" or "error")
         */txType: String, 
        /**
         * Total amount spent (including fee)
         */totalSpent: String?, 
        /**
         * Transaction fee
         */fee: String?, 
        /**
         * Fee per byte
         */feePerByte: String?, 
        /**
         * Transaction size in bytes
         */bytes: UInt32?, 
        /**
         * Transaction inputs
         */inputs: [PrecomposedInput]?, 
        /**
         * Transaction outputs
         */outputs: [PrecomposedOutput]?, 
        /**
         * Output permutation indices
         */outputsPermutation: [UInt32]?) {
        self.txType = txType
        self.totalSpent = totalSpent
        self.fee = fee
        self.feePerByte = feePerByte
        self.bytes = bytes
        self.inputs = inputs
        self.outputs = outputs
        self.outputsPermutation = outputsPermutation
    }
}



extension PrecomposedTransaction: Equatable, Hashable {
    public static func ==(lhs: PrecomposedTransaction, rhs: PrecomposedTransaction) -> Bool {
        if lhs.txType != rhs.txType {
            return false
        }
        if lhs.totalSpent != rhs.totalSpent {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.feePerByte != rhs.feePerByte {
            return false
        }
        if lhs.bytes != rhs.bytes {
            return false
        }
        if lhs.inputs != rhs.inputs {
            return false
        }
        if lhs.outputs != rhs.outputs {
            return false
        }
        if lhs.outputsPermutation != rhs.outputsPermutation {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txType)
        hasher.combine(totalSpent)
        hasher.combine(fee)
        hasher.combine(feePerByte)
        hasher.combine(bytes)
        hasher.combine(inputs)
        hasher.combine(outputs)
        hasher.combine(outputsPermutation)
    }
}


public struct FfiConverterTypePrecomposedTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrecomposedTransaction {
        return
            try PrecomposedTransaction(
                txType: FfiConverterString.read(from: &buf), 
                totalSpent: FfiConverterOptionString.read(from: &buf), 
                fee: FfiConverterOptionString.read(from: &buf), 
                feePerByte: FfiConverterOptionString.read(from: &buf), 
                bytes: FfiConverterOptionUInt32.read(from: &buf), 
                inputs: FfiConverterOptionSequenceTypePrecomposedInput.read(from: &buf), 
                outputs: FfiConverterOptionSequenceTypePrecomposedOutput.read(from: &buf), 
                outputsPermutation: FfiConverterOptionSequenceUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: PrecomposedTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.txType, into: &buf)
        FfiConverterOptionString.write(value.totalSpent, into: &buf)
        FfiConverterOptionString.write(value.fee, into: &buf)
        FfiConverterOptionString.write(value.feePerByte, into: &buf)
        FfiConverterOptionUInt32.write(value.bytes, into: &buf)
        FfiConverterOptionSequenceTypePrecomposedInput.write(value.inputs, into: &buf)
        FfiConverterOptionSequenceTypePrecomposedOutput.write(value.outputs, into: &buf)
        FfiConverterOptionSequenceUInt32.write(value.outputsPermutation, into: &buf)
    }
}


public func FfiConverterTypePrecomposedTransaction_lift(_ buf: RustBuffer) throws -> PrecomposedTransaction {
    return try FfiConverterTypePrecomposedTransaction.lift(buf)
}

public func FfiConverterTypePrecomposedTransaction_lower(_ value: PrecomposedTransaction) -> RustBuffer {
    return FfiConverterTypePrecomposedTransaction.lower(value)
}


public struct PubkyAuth {
    public var data: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: String) {
        self.data = data
    }
}



extension PubkyAuth: Equatable, Hashable {
    public static func ==(lhs: PubkyAuth, rhs: PubkyAuth) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
    }
}


public struct FfiConverterTypePubkyAuth: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAuth {
        return
            try PubkyAuth(
                data: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAuth, into buf: inout [UInt8]) {
        FfiConverterString.write(value.data, into: &buf)
    }
}


public func FfiConverterTypePubkyAuth_lift(_ buf: RustBuffer) throws -> PubkyAuth {
    return try FfiConverterTypePubkyAuth.lift(buf)
}

public func FfiConverterTypePubkyAuth_lower(_ value: PubkyAuth) -> RustBuffer {
    return FfiConverterTypePubkyAuth.lower(value)
}


/**
 * Public key response containing the derived public key information
 */
public struct PublicKeyResponse {
    public var path: [UInt32]
    public var serializedPath: String
    public var xpub: String
    public var xpubSegwit: String?
    public var chainCode: String
    public var childNum: UInt32
    public var publicKey: String
    public var fingerprint: UInt32
    public var depth: UInt32
    public var descriptor: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(path: [UInt32], serializedPath: String, xpub: String, xpubSegwit: String?, chainCode: String, childNum: UInt32, publicKey: String, fingerprint: UInt32, depth: UInt32, descriptor: String?) {
        self.path = path
        self.serializedPath = serializedPath
        self.xpub = xpub
        self.xpubSegwit = xpubSegwit
        self.chainCode = chainCode
        self.childNum = childNum
        self.publicKey = publicKey
        self.fingerprint = fingerprint
        self.depth = depth
        self.descriptor = descriptor
    }
}



extension PublicKeyResponse: Equatable, Hashable {
    public static func ==(lhs: PublicKeyResponse, rhs: PublicKeyResponse) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        if lhs.serializedPath != rhs.serializedPath {
            return false
        }
        if lhs.xpub != rhs.xpub {
            return false
        }
        if lhs.xpubSegwit != rhs.xpubSegwit {
            return false
        }
        if lhs.chainCode != rhs.chainCode {
            return false
        }
        if lhs.childNum != rhs.childNum {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.fingerprint != rhs.fingerprint {
            return false
        }
        if lhs.depth != rhs.depth {
            return false
        }
        if lhs.descriptor != rhs.descriptor {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
        hasher.combine(serializedPath)
        hasher.combine(xpub)
        hasher.combine(xpubSegwit)
        hasher.combine(chainCode)
        hasher.combine(childNum)
        hasher.combine(publicKey)
        hasher.combine(fingerprint)
        hasher.combine(depth)
        hasher.combine(descriptor)
    }
}


public struct FfiConverterTypePublicKeyResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKeyResponse {
        return
            try PublicKeyResponse(
                path: FfiConverterSequenceUInt32.read(from: &buf), 
                serializedPath: FfiConverterString.read(from: &buf), 
                xpub: FfiConverterString.read(from: &buf), 
                xpubSegwit: FfiConverterOptionString.read(from: &buf), 
                chainCode: FfiConverterString.read(from: &buf), 
                childNum: FfiConverterUInt32.read(from: &buf), 
                publicKey: FfiConverterString.read(from: &buf), 
                fingerprint: FfiConverterUInt32.read(from: &buf), 
                depth: FfiConverterUInt32.read(from: &buf), 
                descriptor: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKeyResponse, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt32.write(value.path, into: &buf)
        FfiConverterString.write(value.serializedPath, into: &buf)
        FfiConverterString.write(value.xpub, into: &buf)
        FfiConverterOptionString.write(value.xpubSegwit, into: &buf)
        FfiConverterString.write(value.chainCode, into: &buf)
        FfiConverterUInt32.write(value.childNum, into: &buf)
        FfiConverterString.write(value.publicKey, into: &buf)
        FfiConverterUInt32.write(value.fingerprint, into: &buf)
        FfiConverterUInt32.write(value.depth, into: &buf)
        FfiConverterOptionString.write(value.descriptor, into: &buf)
    }
}


public func FfiConverterTypePublicKeyResponse_lift(_ buf: RustBuffer) throws -> PublicKeyResponse {
    return try FfiConverterTypePublicKeyResponse.lift(buf)
}

public func FfiConverterTypePublicKeyResponse_lower(_ value: PublicKeyResponse) -> RustBuffer {
    return FfiConverterTypePublicKeyResponse.lower(value)
}


/**
 * Reference transaction for transaction signing
 */
public struct RefTransaction {
    /**
     * Transaction hash
     */
    public var hash: String
    /**
     * Transaction version
     */
    public var version: UInt32?
    /**
     * Transaction inputs
     */
    public var inputs: [RefTxInput]
    /**
     * Transaction outputs (binary format)
     */
    public var binOutputs: [RefTxOutput]
    /**
     * Lock time
     */
    public var lockTime: UInt32?
    /**
     * Expiry (for Zcash/Decred)
     */
    public var expiry: UInt32?
    /**
     * Version group ID (for Zcash)
     */
    public var versionGroupId: UInt32?
    /**
     * Overwintered flag (for Zcash)
     */
    public var overwintered: Bool?
    /**
     * Timestamp (for Capricoin)
     */
    public var timestamp: UInt32?
    /**
     * Branch ID (for Zcash)
     */
    public var branchId: UInt32?
    /**
     * Extra data
     */
    public var extraData: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Transaction hash
         */hash: String, 
        /**
         * Transaction version
         */version: UInt32?, 
        /**
         * Transaction inputs
         */inputs: [RefTxInput], 
        /**
         * Transaction outputs (binary format)
         */binOutputs: [RefTxOutput], 
        /**
         * Lock time
         */lockTime: UInt32?, 
        /**
         * Expiry (for Zcash/Decred)
         */expiry: UInt32?, 
        /**
         * Version group ID (for Zcash)
         */versionGroupId: UInt32?, 
        /**
         * Overwintered flag (for Zcash)
         */overwintered: Bool?, 
        /**
         * Timestamp (for Capricoin)
         */timestamp: UInt32?, 
        /**
         * Branch ID (for Zcash)
         */branchId: UInt32?, 
        /**
         * Extra data
         */extraData: String?) {
        self.hash = hash
        self.version = version
        self.inputs = inputs
        self.binOutputs = binOutputs
        self.lockTime = lockTime
        self.expiry = expiry
        self.versionGroupId = versionGroupId
        self.overwintered = overwintered
        self.timestamp = timestamp
        self.branchId = branchId
        self.extraData = extraData
    }
}



extension RefTransaction: Equatable, Hashable {
    public static func ==(lhs: RefTransaction, rhs: RefTransaction) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        if lhs.inputs != rhs.inputs {
            return false
        }
        if lhs.binOutputs != rhs.binOutputs {
            return false
        }
        if lhs.lockTime != rhs.lockTime {
            return false
        }
        if lhs.expiry != rhs.expiry {
            return false
        }
        if lhs.versionGroupId != rhs.versionGroupId {
            return false
        }
        if lhs.overwintered != rhs.overwintered {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.branchId != rhs.branchId {
            return false
        }
        if lhs.extraData != rhs.extraData {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
        hasher.combine(version)
        hasher.combine(inputs)
        hasher.combine(binOutputs)
        hasher.combine(lockTime)
        hasher.combine(expiry)
        hasher.combine(versionGroupId)
        hasher.combine(overwintered)
        hasher.combine(timestamp)
        hasher.combine(branchId)
        hasher.combine(extraData)
    }
}


public struct FfiConverterTypeRefTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RefTransaction {
        return
            try RefTransaction(
                hash: FfiConverterString.read(from: &buf), 
                version: FfiConverterOptionUInt32.read(from: &buf), 
                inputs: FfiConverterSequenceTypeRefTxInput.read(from: &buf), 
                binOutputs: FfiConverterSequenceTypeRefTxOutput.read(from: &buf), 
                lockTime: FfiConverterOptionUInt32.read(from: &buf), 
                expiry: FfiConverterOptionUInt32.read(from: &buf), 
                versionGroupId: FfiConverterOptionUInt32.read(from: &buf), 
                overwintered: FfiConverterOptionBool.read(from: &buf), 
                timestamp: FfiConverterOptionUInt32.read(from: &buf), 
                branchId: FfiConverterOptionUInt32.read(from: &buf), 
                extraData: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: RefTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hash, into: &buf)
        FfiConverterOptionUInt32.write(value.version, into: &buf)
        FfiConverterSequenceTypeRefTxInput.write(value.inputs, into: &buf)
        FfiConverterSequenceTypeRefTxOutput.write(value.binOutputs, into: &buf)
        FfiConverterOptionUInt32.write(value.lockTime, into: &buf)
        FfiConverterOptionUInt32.write(value.expiry, into: &buf)
        FfiConverterOptionUInt32.write(value.versionGroupId, into: &buf)
        FfiConverterOptionBool.write(value.overwintered, into: &buf)
        FfiConverterOptionUInt32.write(value.timestamp, into: &buf)
        FfiConverterOptionUInt32.write(value.branchId, into: &buf)
        FfiConverterOptionString.write(value.extraData, into: &buf)
    }
}


public func FfiConverterTypeRefTransaction_lift(_ buf: RustBuffer) throws -> RefTransaction {
    return try FfiConverterTypeRefTransaction.lift(buf)
}

public func FfiConverterTypeRefTransaction_lower(_ value: RefTransaction) -> RustBuffer {
    return FfiConverterTypeRefTransaction.lower(value)
}


/**
 * Reference transaction input
 */
public struct RefTxInput {
    /**
     * Previous transaction hash
     */
    public var prevHash: String
    /**
     * Previous transaction output index
     */
    public var prevIndex: UInt32
    /**
     * Script signature
     */
    public var scriptSig: String
    /**
     * Sequence number
     */
    public var sequence: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Previous transaction hash
         */prevHash: String, 
        /**
         * Previous transaction output index
         */prevIndex: UInt32, 
        /**
         * Script signature
         */scriptSig: String, 
        /**
         * Sequence number
         */sequence: UInt32) {
        self.prevHash = prevHash
        self.prevIndex = prevIndex
        self.scriptSig = scriptSig
        self.sequence = sequence
    }
}



extension RefTxInput: Equatable, Hashable {
    public static func ==(lhs: RefTxInput, rhs: RefTxInput) -> Bool {
        if lhs.prevHash != rhs.prevHash {
            return false
        }
        if lhs.prevIndex != rhs.prevIndex {
            return false
        }
        if lhs.scriptSig != rhs.scriptSig {
            return false
        }
        if lhs.sequence != rhs.sequence {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(prevHash)
        hasher.combine(prevIndex)
        hasher.combine(scriptSig)
        hasher.combine(sequence)
    }
}


public struct FfiConverterTypeRefTxInput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RefTxInput {
        return
            try RefTxInput(
                prevHash: FfiConverterString.read(from: &buf), 
                prevIndex: FfiConverterUInt32.read(from: &buf), 
                scriptSig: FfiConverterString.read(from: &buf), 
                sequence: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: RefTxInput, into buf: inout [UInt8]) {
        FfiConverterString.write(value.prevHash, into: &buf)
        FfiConverterUInt32.write(value.prevIndex, into: &buf)
        FfiConverterString.write(value.scriptSig, into: &buf)
        FfiConverterUInt32.write(value.sequence, into: &buf)
    }
}


public func FfiConverterTypeRefTxInput_lift(_ buf: RustBuffer) throws -> RefTxInput {
    return try FfiConverterTypeRefTxInput.lift(buf)
}

public func FfiConverterTypeRefTxInput_lower(_ value: RefTxInput) -> RustBuffer {
    return FfiConverterTypeRefTxInput.lower(value)
}


/**
 * Reference transaction output (binary format)
 */
public struct RefTxOutput {
    /**
     * Amount in satoshis
     */
    public var amount: UInt64
    /**
     * Script public key (binary hex)
     */
    public var scriptPubkey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Amount in satoshis
         */amount: UInt64, 
        /**
         * Script public key (binary hex)
         */scriptPubkey: String) {
        self.amount = amount
        self.scriptPubkey = scriptPubkey
    }
}



extension RefTxOutput: Equatable, Hashable {
    public static func ==(lhs: RefTxOutput, rhs: RefTxOutput) -> Bool {
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.scriptPubkey != rhs.scriptPubkey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount)
        hasher.combine(scriptPubkey)
    }
}


public struct FfiConverterTypeRefTxOutput: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RefTxOutput {
        return
            try RefTxOutput(
                amount: FfiConverterUInt64.read(from: &buf), 
                scriptPubkey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: RefTxOutput, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterString.write(value.scriptPubkey, into: &buf)
    }
}


public func FfiConverterTypeRefTxOutput_lift(_ buf: RustBuffer) throws -> RefTxOutput {
    return try FfiConverterTypeRefTxOutput.lift(buf)
}

public func FfiConverterTypeRefTxOutput_lower(_ value: RefTxOutput) -> RustBuffer {
    return FfiConverterTypeRefTxOutput.lower(value)
}


/**
 * Refund memo
 */
public struct RefundMemo {
    /**
     * Refund address
     */
    public var address: String
    /**
     * MAC
     */
    public var mac: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Refund address
         */address: String, 
        /**
         * MAC
         */mac: String) {
        self.address = address
        self.mac = mac
    }
}



extension RefundMemo: Equatable, Hashable {
    public static func ==(lhs: RefundMemo, rhs: RefundMemo) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.mac != rhs.mac {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(mac)
    }
}


public struct FfiConverterTypeRefundMemo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RefundMemo {
        return
            try RefundMemo(
                address: FfiConverterString.read(from: &buf), 
                mac: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: RefundMemo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.mac, into: &buf)
    }
}


public func FfiConverterTypeRefundMemo_lift(_ buf: RustBuffer) throws -> RefundMemo {
    return try FfiConverterTypeRefundMemo.lift(buf)
}

public func FfiConverterTypeRefundMemo_lower(_ value: RefundMemo) -> RustBuffer {
    return FfiConverterTypeRefundMemo.lower(value)
}


/**
 * Signed transaction response
 */
public struct SignedTransactionResponse {
    /**
     * Array of signer signatures
     */
    public var signatures: [String]
    /**
     * Serialized transaction
     */
    public var serializedTx: String
    /**
     * Broadcasted transaction ID (if push was true)
     */
    public var txid: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Array of signer signatures
         */signatures: [String], 
        /**
         * Serialized transaction
         */serializedTx: String, 
        /**
         * Broadcasted transaction ID (if push was true)
         */txid: String?) {
        self.signatures = signatures
        self.serializedTx = serializedTx
        self.txid = txid
    }
}



extension SignedTransactionResponse: Equatable, Hashable {
    public static func ==(lhs: SignedTransactionResponse, rhs: SignedTransactionResponse) -> Bool {
        if lhs.signatures != rhs.signatures {
            return false
        }
        if lhs.serializedTx != rhs.serializedTx {
            return false
        }
        if lhs.txid != rhs.txid {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(signatures)
        hasher.combine(serializedTx)
        hasher.combine(txid)
    }
}


public struct FfiConverterTypeSignedTransactionResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignedTransactionResponse {
        return
            try SignedTransactionResponse(
                signatures: FfiConverterSequenceString.read(from: &buf), 
                serializedTx: FfiConverterString.read(from: &buf), 
                txid: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: SignedTransactionResponse, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.signatures, into: &buf)
        FfiConverterString.write(value.serializedTx, into: &buf)
        FfiConverterOptionString.write(value.txid, into: &buf)
    }
}


public func FfiConverterTypeSignedTransactionResponse_lift(_ buf: RustBuffer) throws -> SignedTransactionResponse {
    return try FfiConverterTypeSignedTransactionResponse.lift(buf)
}

public func FfiConverterTypeSignedTransactionResponse_lower(_ value: SignedTransactionResponse) -> RustBuffer {
    return FfiConverterTypeSignedTransactionResponse.lower(value)
}


/**
 * Text memo
 */
public struct TextMemo {
    /**
     * Text content
     */
    public var text: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Text content
         */text: String) {
        self.text = text
    }
}



extension TextMemo: Equatable, Hashable {
    public static func ==(lhs: TextMemo, rhs: TextMemo) -> Bool {
        if lhs.text != rhs.text {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(text)
    }
}


public struct FfiConverterTypeTextMemo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TextMemo {
        return
            try TextMemo(
                text: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: TextMemo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.text, into: &buf)
    }
}


public func FfiConverterTypeTextMemo_lift(_ buf: RustBuffer) throws -> TextMemo {
    return try FfiConverterTypeTextMemo.lift(buf)
}

public func FfiConverterTypeTextMemo_lower(_ value: TextMemo) -> RustBuffer {
    return FfiConverterTypeTextMemo.lower(value)
}


/**
 * Payment request
 */
public struct TxAckPaymentRequest {
    /**
     * Nonce
     */
    public var nonce: String?
    /**
     * Recipient name
     */
    public var recipientName: String
    /**
     * Memos
     */
    public var memos: [PaymentRequestMemo]?
    /**
     * Amount
     */
    public var amount: UInt64?
    /**
     * Signature
     */
    public var signature: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Nonce
         */nonce: String?, 
        /**
         * Recipient name
         */recipientName: String, 
        /**
         * Memos
         */memos: [PaymentRequestMemo]?, 
        /**
         * Amount
         */amount: UInt64?, 
        /**
         * Signature
         */signature: String) {
        self.nonce = nonce
        self.recipientName = recipientName
        self.memos = memos
        self.amount = amount
        self.signature = signature
    }
}



extension TxAckPaymentRequest: Equatable, Hashable {
    public static func ==(lhs: TxAckPaymentRequest, rhs: TxAckPaymentRequest) -> Bool {
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.recipientName != rhs.recipientName {
            return false
        }
        if lhs.memos != rhs.memos {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(nonce)
        hasher.combine(recipientName)
        hasher.combine(memos)
        hasher.combine(amount)
        hasher.combine(signature)
    }
}


public struct FfiConverterTypeTxAckPaymentRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxAckPaymentRequest {
        return
            try TxAckPaymentRequest(
                nonce: FfiConverterOptionString.read(from: &buf), 
                recipientName: FfiConverterString.read(from: &buf), 
                memos: FfiConverterOptionSequenceTypePaymentRequestMemo.read(from: &buf), 
                amount: FfiConverterOptionUInt64.read(from: &buf), 
                signature: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: TxAckPaymentRequest, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.nonce, into: &buf)
        FfiConverterString.write(value.recipientName, into: &buf)
        FfiConverterOptionSequenceTypePaymentRequestMemo.write(value.memos, into: &buf)
        FfiConverterOptionUInt64.write(value.amount, into: &buf)
        FfiConverterString.write(value.signature, into: &buf)
    }
}


public func FfiConverterTypeTxAckPaymentRequest_lift(_ buf: RustBuffer) throws -> TxAckPaymentRequest {
    return try FfiConverterTypeTxAckPaymentRequest.lift(buf)
}

public func FfiConverterTypeTxAckPaymentRequest_lower(_ value: TxAckPaymentRequest) -> RustBuffer {
    return FfiConverterTypeTxAckPaymentRequest.lower(value)
}


/**
 * Transaction input type
 */
public struct TxInputType {
    /**
     * Previous transaction hash
     */
    public var prevHash: String
    /**
     * Previous transaction output index
     */
    public var prevIndex: UInt32
    /**
     * Amount in satoshis
     */
    public var amount: UInt64
    /**
     * Transaction sequence
     */
    public var sequence: UInt32?
    /**
     * BIP32 derivation path
     */
    public var addressN: [UInt32]?
    /**
     * Script type
     */
    public var scriptType: ScriptType?
    /**
     * Multisig information
     */
    public var multisig: MultisigRedeemScriptType?
    /**
     * Script public key (for external inputs)
     */
    public var scriptPubkey: String?
    /**
     * Script signature
     */
    public var scriptSig: String?
    /**
     * Witness data
     */
    public var witness: String?
    /**
     * Ownership proof
     */
    public var ownershipProof: String?
    /**
     * Commitment data
     */
    public var commitmentData: String?
    /**
     * Original hash for RBF
     */
    public var origHash: String?
    /**
     * Original index for RBF
     */
    public var origIndex: UInt32?
    /**
     * Coinjoin flags
     */
    public var coinjoinFlags: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Previous transaction hash
         */prevHash: String, 
        /**
         * Previous transaction output index
         */prevIndex: UInt32, 
        /**
         * Amount in satoshis
         */amount: UInt64, 
        /**
         * Transaction sequence
         */sequence: UInt32?, 
        /**
         * BIP32 derivation path
         */addressN: [UInt32]?, 
        /**
         * Script type
         */scriptType: ScriptType?, 
        /**
         * Multisig information
         */multisig: MultisigRedeemScriptType?, 
        /**
         * Script public key (for external inputs)
         */scriptPubkey: String?, 
        /**
         * Script signature
         */scriptSig: String?, 
        /**
         * Witness data
         */witness: String?, 
        /**
         * Ownership proof
         */ownershipProof: String?, 
        /**
         * Commitment data
         */commitmentData: String?, 
        /**
         * Original hash for RBF
         */origHash: String?, 
        /**
         * Original index for RBF
         */origIndex: UInt32?, 
        /**
         * Coinjoin flags
         */coinjoinFlags: UInt32?) {
        self.prevHash = prevHash
        self.prevIndex = prevIndex
        self.amount = amount
        self.sequence = sequence
        self.addressN = addressN
        self.scriptType = scriptType
        self.multisig = multisig
        self.scriptPubkey = scriptPubkey
        self.scriptSig = scriptSig
        self.witness = witness
        self.ownershipProof = ownershipProof
        self.commitmentData = commitmentData
        self.origHash = origHash
        self.origIndex = origIndex
        self.coinjoinFlags = coinjoinFlags
    }
}



extension TxInputType: Equatable, Hashable {
    public static func ==(lhs: TxInputType, rhs: TxInputType) -> Bool {
        if lhs.prevHash != rhs.prevHash {
            return false
        }
        if lhs.prevIndex != rhs.prevIndex {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.sequence != rhs.sequence {
            return false
        }
        if lhs.addressN != rhs.addressN {
            return false
        }
        if lhs.scriptType != rhs.scriptType {
            return false
        }
        if lhs.multisig != rhs.multisig {
            return false
        }
        if lhs.scriptPubkey != rhs.scriptPubkey {
            return false
        }
        if lhs.scriptSig != rhs.scriptSig {
            return false
        }
        if lhs.witness != rhs.witness {
            return false
        }
        if lhs.ownershipProof != rhs.ownershipProof {
            return false
        }
        if lhs.commitmentData != rhs.commitmentData {
            return false
        }
        if lhs.origHash != rhs.origHash {
            return false
        }
        if lhs.origIndex != rhs.origIndex {
            return false
        }
        if lhs.coinjoinFlags != rhs.coinjoinFlags {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(prevHash)
        hasher.combine(prevIndex)
        hasher.combine(amount)
        hasher.combine(sequence)
        hasher.combine(addressN)
        hasher.combine(scriptType)
        hasher.combine(multisig)
        hasher.combine(scriptPubkey)
        hasher.combine(scriptSig)
        hasher.combine(witness)
        hasher.combine(ownershipProof)
        hasher.combine(commitmentData)
        hasher.combine(origHash)
        hasher.combine(origIndex)
        hasher.combine(coinjoinFlags)
    }
}


public struct FfiConverterTypeTxInputType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxInputType {
        return
            try TxInputType(
                prevHash: FfiConverterString.read(from: &buf), 
                prevIndex: FfiConverterUInt32.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                sequence: FfiConverterOptionUInt32.read(from: &buf), 
                addressN: FfiConverterOptionSequenceUInt32.read(from: &buf), 
                scriptType: FfiConverterOptionTypeScriptType.read(from: &buf), 
                multisig: FfiConverterOptionTypeMultisigRedeemScriptType.read(from: &buf), 
                scriptPubkey: FfiConverterOptionString.read(from: &buf), 
                scriptSig: FfiConverterOptionString.read(from: &buf), 
                witness: FfiConverterOptionString.read(from: &buf), 
                ownershipProof: FfiConverterOptionString.read(from: &buf), 
                commitmentData: FfiConverterOptionString.read(from: &buf), 
                origHash: FfiConverterOptionString.read(from: &buf), 
                origIndex: FfiConverterOptionUInt32.read(from: &buf), 
                coinjoinFlags: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: TxInputType, into buf: inout [UInt8]) {
        FfiConverterString.write(value.prevHash, into: &buf)
        FfiConverterUInt32.write(value.prevIndex, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterOptionUInt32.write(value.sequence, into: &buf)
        FfiConverterOptionSequenceUInt32.write(value.addressN, into: &buf)
        FfiConverterOptionTypeScriptType.write(value.scriptType, into: &buf)
        FfiConverterOptionTypeMultisigRedeemScriptType.write(value.multisig, into: &buf)
        FfiConverterOptionString.write(value.scriptPubkey, into: &buf)
        FfiConverterOptionString.write(value.scriptSig, into: &buf)
        FfiConverterOptionString.write(value.witness, into: &buf)
        FfiConverterOptionString.write(value.ownershipProof, into: &buf)
        FfiConverterOptionString.write(value.commitmentData, into: &buf)
        FfiConverterOptionString.write(value.origHash, into: &buf)
        FfiConverterOptionUInt32.write(value.origIndex, into: &buf)
        FfiConverterOptionUInt32.write(value.coinjoinFlags, into: &buf)
    }
}


public func FfiConverterTypeTxInputType_lift(_ buf: RustBuffer) throws -> TxInputType {
    return try FfiConverterTypeTxInputType.lift(buf)
}

public func FfiConverterTypeTxInputType_lower(_ value: TxInputType) -> RustBuffer {
    return FfiConverterTypeTxInputType.lower(value)
}


/**
 * Transaction output type
 */
public struct TxOutputType {
    /**
     * Output address (for address outputs)
     */
    public var address: String?
    /**
     * BIP32 derivation path (for change outputs)
     */
    public var addressN: [UInt32]?
    /**
     * Amount in satoshis
     */
    public var amount: UInt64
    /**
     * Script type
     */
    public var scriptType: ScriptType
    /**
     * Multisig information
     */
    public var multisig: MultisigRedeemScriptType?
    /**
     * OP_RETURN data
     */
    public var opReturnData: String?
    /**
     * Original hash for RBF
     */
    public var origHash: String?
    /**
     * Original index for RBF
     */
    public var origIndex: UInt32?
    /**
     * Payment request index
     */
    public var paymentReqIndex: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Output address (for address outputs)
         */address: String?, 
        /**
         * BIP32 derivation path (for change outputs)
         */addressN: [UInt32]?, 
        /**
         * Amount in satoshis
         */amount: UInt64, 
        /**
         * Script type
         */scriptType: ScriptType, 
        /**
         * Multisig information
         */multisig: MultisigRedeemScriptType?, 
        /**
         * OP_RETURN data
         */opReturnData: String?, 
        /**
         * Original hash for RBF
         */origHash: String?, 
        /**
         * Original index for RBF
         */origIndex: UInt32?, 
        /**
         * Payment request index
         */paymentReqIndex: UInt32?) {
        self.address = address
        self.addressN = addressN
        self.amount = amount
        self.scriptType = scriptType
        self.multisig = multisig
        self.opReturnData = opReturnData
        self.origHash = origHash
        self.origIndex = origIndex
        self.paymentReqIndex = paymentReqIndex
    }
}



extension TxOutputType: Equatable, Hashable {
    public static func ==(lhs: TxOutputType, rhs: TxOutputType) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.addressN != rhs.addressN {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.scriptType != rhs.scriptType {
            return false
        }
        if lhs.multisig != rhs.multisig {
            return false
        }
        if lhs.opReturnData != rhs.opReturnData {
            return false
        }
        if lhs.origHash != rhs.origHash {
            return false
        }
        if lhs.origIndex != rhs.origIndex {
            return false
        }
        if lhs.paymentReqIndex != rhs.paymentReqIndex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(addressN)
        hasher.combine(amount)
        hasher.combine(scriptType)
        hasher.combine(multisig)
        hasher.combine(opReturnData)
        hasher.combine(origHash)
        hasher.combine(origIndex)
        hasher.combine(paymentReqIndex)
    }
}


public struct FfiConverterTypeTxOutputType: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxOutputType {
        return
            try TxOutputType(
                address: FfiConverterOptionString.read(from: &buf), 
                addressN: FfiConverterOptionSequenceUInt32.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                scriptType: FfiConverterTypeScriptType.read(from: &buf), 
                multisig: FfiConverterOptionTypeMultisigRedeemScriptType.read(from: &buf), 
                opReturnData: FfiConverterOptionString.read(from: &buf), 
                origHash: FfiConverterOptionString.read(from: &buf), 
                origIndex: FfiConverterOptionUInt32.read(from: &buf), 
                paymentReqIndex: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: TxOutputType, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.address, into: &buf)
        FfiConverterOptionSequenceUInt32.write(value.addressN, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterTypeScriptType.write(value.scriptType, into: &buf)
        FfiConverterOptionTypeMultisigRedeemScriptType.write(value.multisig, into: &buf)
        FfiConverterOptionString.write(value.opReturnData, into: &buf)
        FfiConverterOptionString.write(value.origHash, into: &buf)
        FfiConverterOptionUInt32.write(value.origIndex, into: &buf)
        FfiConverterOptionUInt32.write(value.paymentReqIndex, into: &buf)
    }
}


public func FfiConverterTypeTxOutputType_lift(_ buf: RustBuffer) throws -> TxOutputType {
    return try FfiConverterTypeTxOutputType.lift(buf)
}

public func FfiConverterTypeTxOutputType_lower(_ value: TxOutputType) -> RustBuffer {
    return FfiConverterTypeTxOutputType.lower(value)
}


/**
 * Unlock Path parameters
 */
public struct UnlockPath {
    /**
     * BIP32 derivation path
     */
    public var addressN: [UInt32]
    /**
     * MAC (optional)
     */
    public var mac: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * BIP32 derivation path
         */addressN: [UInt32], 
        /**
         * MAC (optional)
         */mac: String?) {
        self.addressN = addressN
        self.mac = mac
    }
}



extension UnlockPath: Equatable, Hashable {
    public static func ==(lhs: UnlockPath, rhs: UnlockPath) -> Bool {
        if lhs.addressN != rhs.addressN {
            return false
        }
        if lhs.mac != rhs.mac {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addressN)
        hasher.combine(mac)
    }
}


public struct FfiConverterTypeUnlockPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnlockPath {
        return
            try UnlockPath(
                addressN: FfiConverterSequenceUInt32.read(from: &buf), 
                mac: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: UnlockPath, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt32.write(value.addressN, into: &buf)
        FfiConverterOptionString.write(value.mac, into: &buf)
    }
}


public func FfiConverterTypeUnlockPath_lift(_ buf: RustBuffer) throws -> UnlockPath {
    return try FfiConverterTypeUnlockPath.lift(buf)
}

public func FfiConverterTypeUnlockPath_lower(_ value: UnlockPath) -> RustBuffer {
    return FfiConverterTypeUnlockPath.lower(value)
}


public struct ValidationResult {
    public var address: String
    public var network: NetworkType
    public var addressType: AddressType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, network: NetworkType, addressType: AddressType) {
        self.address = address
        self.network = network
        self.addressType = addressType
    }
}



extension ValidationResult: Equatable, Hashable {
    public static func ==(lhs: ValidationResult, rhs: ValidationResult) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.addressType != rhs.addressType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(network)
        hasher.combine(addressType)
    }
}


public struct FfiConverterTypeValidationResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ValidationResult {
        return
            try ValidationResult(
                address: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetworkType.read(from: &buf), 
                addressType: FfiConverterTypeAddressType.read(from: &buf)
        )
    }

    public static func write(_ value: ValidationResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterTypeNetworkType.write(value.network, into: &buf)
        FfiConverterTypeAddressType.write(value.addressType, into: &buf)
    }
}


public func FfiConverterTypeValidationResult_lift(_ buf: RustBuffer) throws -> ValidationResult {
    return try FfiConverterTypeValidationResult.lift(buf)
}

public func FfiConverterTypeValidationResult_lower(_ value: ValidationResult) -> RustBuffer {
    return FfiConverterTypeValidationResult.lower(value)
}


/**
 * Verify message response
 */
public struct VerifyMessageResponse {
    /**
     * Verification result message
     */
    public var message: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Verification result message
         */message: String) {
        self.message = message
    }
}



extension VerifyMessageResponse: Equatable, Hashable {
    public static func ==(lhs: VerifyMessageResponse, rhs: VerifyMessageResponse) -> Bool {
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(message)
    }
}


public struct FfiConverterTypeVerifyMessageResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerifyMessageResponse {
        return
            try VerifyMessageResponse(
                message: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: VerifyMessageResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.message, into: &buf)
    }
}


public func FfiConverterTypeVerifyMessageResponse_lift(_ buf: RustBuffer) throws -> VerifyMessageResponse {
    return try FfiConverterTypeVerifyMessageResponse.lift(buf)
}

public func FfiConverterTypeVerifyMessageResponse_lower(_ value: VerifyMessageResponse) -> RustBuffer {
    return FfiConverterTypeVerifyMessageResponse.lower(value)
}


/**
 * Marker object for XRP accounts
 */
public struct XrpMarker {
    /**
     * Ledger number
     */
    public var ledger: UInt64
    /**
     * Sequence number
     */
    public var seq: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Ledger number
         */ledger: UInt64, 
        /**
         * Sequence number
         */seq: UInt64) {
        self.ledger = ledger
        self.seq = seq
    }
}



extension XrpMarker: Equatable, Hashable {
    public static func ==(lhs: XrpMarker, rhs: XrpMarker) -> Bool {
        if lhs.ledger != rhs.ledger {
            return false
        }
        if lhs.seq != rhs.seq {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ledger)
        hasher.combine(seq)
    }
}


public struct FfiConverterTypeXrpMarker: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> XrpMarker {
        return
            try XrpMarker(
                ledger: FfiConverterUInt64.read(from: &buf), 
                seq: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: XrpMarker, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.ledger, into: &buf)
        FfiConverterUInt64.write(value.seq, into: &buf)
    }
}


public func FfiConverterTypeXrpMarker_lift(_ buf: RustBuffer) throws -> XrpMarker {
    return try FfiConverterTypeXrpMarker.lift(buf)
}

public func FfiConverterTypeXrpMarker_lower(_ value: XrpMarker) -> RustBuffer {
    return FfiConverterTypeXrpMarker.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Level of details to be returned by getAccountInfo
 */

public enum AccountInfoDetails {
    
    /**
     * Return only account balances (default)
     */
    case basic
    /**
     * Return with derived addresses or ERC20 tokens
     */
    case tokens
    /**
     * Same as tokens with balances
     */
    case tokenBalances
    /**
     * TokenBalances + complete account transaction history
     */
    case txs
}


public struct FfiConverterTypeAccountInfoDetails: FfiConverterRustBuffer {
    typealias SwiftType = AccountInfoDetails

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountInfoDetails {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .basic
        
        case 2: return .tokens
        
        case 3: return .tokenBalances
        
        case 4: return .txs
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AccountInfoDetails, into buf: inout [UInt8]) {
        switch value {
        
        
        case .basic:
            writeInt(&buf, Int32(1))
        
        
        case .tokens:
            writeInt(&buf, Int32(2))
        
        
        case .tokenBalances:
            writeInt(&buf, Int32(3))
        
        
        case .txs:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeAccountInfoDetails_lift(_ buf: RustBuffer) throws -> AccountInfoDetails {
    return try FfiConverterTypeAccountInfoDetails.lift(buf)
}

public func FfiConverterTypeAccountInfoDetails_lower(_ value: AccountInfoDetails) -> RustBuffer {
    return FfiConverterTypeAccountInfoDetails.lower(value)
}



extension AccountInfoDetails: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Activity {
    
    case onchain(OnchainActivity
    )
    case lightning(LightningActivity
    )
}


public struct FfiConverterTypeActivity: FfiConverterRustBuffer {
    typealias SwiftType = Activity

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Activity {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onchain(try FfiConverterTypeOnchainActivity.read(from: &buf)
        )
        
        case 2: return .lightning(try FfiConverterTypeLightningActivity.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Activity, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .onchain(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeOnchainActivity.write(v1, into: &buf)
            
        
        case let .lightning(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLightningActivity.write(v1, into: &buf)
            
        }
    }
}


public func FfiConverterTypeActivity_lift(_ buf: RustBuffer) throws -> Activity {
    return try FfiConverterTypeActivity.lift(buf)
}

public func FfiConverterTypeActivity_lower(_ value: Activity) -> RustBuffer {
    return FfiConverterTypeActivity.lower(value)
}



extension Activity: Equatable, Hashable {}




public enum ActivityError {

    
    
    case InvalidActivity(errorDetails: String
    )
    case InitializationError(errorDetails: String
    )
    case InsertError(errorDetails: String
    )
    case RetrievalError(errorDetails: String
    )
    case DataError(errorDetails: String
    )
    case ConnectionError(errorDetails: String
    )
    case SerializationError(errorDetails: String
    )
}


public struct FfiConverterTypeActivityError: FfiConverterRustBuffer {
    typealias SwiftType = ActivityError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActivityError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidActivity(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 2: return .InitializationError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 3: return .InsertError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 4: return .RetrievalError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 5: return .DataError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 6: return .ConnectionError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 7: return .SerializationError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ActivityError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidActivity(errorDetails):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .InitializationError(errorDetails):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .InsertError(errorDetails):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .RetrievalError(errorDetails):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .DataError(errorDetails):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .ConnectionError(errorDetails):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .SerializationError(errorDetails):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(errorDetails, into: &buf)
            
        }
    }
}


extension ActivityError: Equatable, Hashable {}

extension ActivityError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ActivityFilter {
    
    case all
    case lightning
    case onchain
}


public struct FfiConverterTypeActivityFilter: FfiConverterRustBuffer {
    typealias SwiftType = ActivityFilter

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActivityFilter {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .all
        
        case 2: return .lightning
        
        case 3: return .onchain
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ActivityFilter, into buf: inout [UInt8]) {
        switch value {
        
        
        case .all:
            writeInt(&buf, Int32(1))
        
        
        case .lightning:
            writeInt(&buf, Int32(2))
        
        
        case .onchain:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeActivityFilter_lift(_ buf: RustBuffer) throws -> ActivityFilter {
    return try FfiConverterTypeActivityFilter.lift(buf)
}

public func FfiConverterTypeActivityFilter_lower(_ value: ActivityFilter) -> RustBuffer {
    return FfiConverterTypeActivityFilter.lower(value)
}



extension ActivityFilter: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ActivityType {
    
    case onchain
    case lightning
}


public struct FfiConverterTypeActivityType: FfiConverterRustBuffer {
    typealias SwiftType = ActivityType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActivityType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onchain
        
        case 2: return .lightning
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ActivityType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .onchain:
            writeInt(&buf, Int32(1))
        
        
        case .lightning:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeActivityType_lift(_ buf: RustBuffer) throws -> ActivityType {
    return try FfiConverterTypeActivityType.lift(buf)
}

public func FfiConverterTypeActivityType_lower(_ value: ActivityType) -> RustBuffer {
    return FfiConverterTypeActivityType.lower(value)
}



extension ActivityType: Equatable, Hashable {}




public enum AddressError {

    
    
    case InvalidAddress
    case InvalidNetwork
    case MnemonicGenerationFailed
    case InvalidMnemonic
    case AddressDerivationFailed
}


public struct FfiConverterTypeAddressError: FfiConverterRustBuffer {
    typealias SwiftType = AddressError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidAddress
        case 2: return .InvalidNetwork
        case 3: return .MnemonicGenerationFailed
        case 4: return .InvalidMnemonic
        case 5: return .AddressDerivationFailed

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidAddress:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidNetwork:
            writeInt(&buf, Int32(2))
        
        
        case .MnemonicGenerationFailed:
            writeInt(&buf, Int32(3))
        
        
        case .InvalidMnemonic:
            writeInt(&buf, Int32(4))
        
        
        case .AddressDerivationFailed:
            writeInt(&buf, Int32(5))
        
        }
    }
}


extension AddressError: Equatable, Hashable {}

extension AddressError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AddressType {
    
    case p2pkh
    case p2sh
    case p2wpkh
    case p2wsh
    case p2tr
    case unknown
}


public struct FfiConverterTypeAddressType: FfiConverterRustBuffer {
    typealias SwiftType = AddressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .p2pkh
        
        case 2: return .p2sh
        
        case 3: return .p2wpkh
        
        case 4: return .p2wsh
        
        case 5: return .p2tr
        
        case 6: return .unknown
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .p2pkh:
            writeInt(&buf, Int32(1))
        
        
        case .p2sh:
            writeInt(&buf, Int32(2))
        
        
        case .p2wpkh:
            writeInt(&buf, Int32(3))
        
        
        case .p2wsh:
            writeInt(&buf, Int32(4))
        
        
        case .p2tr:
            writeInt(&buf, Int32(5))
        
        
        case .unknown:
            writeInt(&buf, Int32(6))
        
        }
    }
}


public func FfiConverterTypeAddressType_lift(_ buf: RustBuffer) throws -> AddressType {
    return try FfiConverterTypeAddressType.lift(buf)
}

public func FfiConverterTypeAddressType_lower(_ value: AddressType) -> RustBuffer {
    return FfiConverterTypeAddressType.lower(value)
}



extension AddressType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Amount unit for display
 */

public enum AmountUnit {
    
    case bitcoin
    case milliBitcoin
    case microBitcoin
    case satoshi
}


public struct FfiConverterTypeAmountUnit: FfiConverterRustBuffer {
    typealias SwiftType = AmountUnit

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AmountUnit {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .milliBitcoin
        
        case 3: return .microBitcoin
        
        case 4: return .satoshi
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AmountUnit, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .milliBitcoin:
            writeInt(&buf, Int32(2))
        
        
        case .microBitcoin:
            writeInt(&buf, Int32(3))
        
        
        case .satoshi:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeAmountUnit_lift(_ buf: RustBuffer) throws -> AmountUnit {
    return try FfiConverterTypeAmountUnit.lift(buf)
}

public func FfiConverterTypeAmountUnit_lower(_ value: AmountUnit) -> RustBuffer {
    return FfiConverterTypeAmountUnit.lower(value)
}



extension AmountUnit: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BitcoinNetworkEnum {
    
    case mainnet
    case testnet
    case signet
    case regtest
}


public struct FfiConverterTypeBitcoinNetworkEnum: FfiConverterRustBuffer {
    typealias SwiftType = BitcoinNetworkEnum

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BitcoinNetworkEnum {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .mainnet
        
        case 2: return .testnet
        
        case 3: return .signet
        
        case 4: return .regtest
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BitcoinNetworkEnum, into buf: inout [UInt8]) {
        switch value {
        
        
        case .mainnet:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .signet:
            writeInt(&buf, Int32(3))
        
        
        case .regtest:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeBitcoinNetworkEnum_lift(_ buf: RustBuffer) throws -> BitcoinNetworkEnum {
    return try FfiConverterTypeBitcoinNetworkEnum.lift(buf)
}

public func FfiConverterTypeBitcoinNetworkEnum_lower(_ value: BitcoinNetworkEnum) -> RustBuffer {
    return FfiConverterTypeBitcoinNetworkEnum.lower(value)
}



extension BitcoinNetworkEnum: Equatable, Hashable {}




public enum BlocktankError {

    
    
    case HttpClient(errorDetails: String
    )
    case BlocktankClient(errorDetails: String
    )
    case InvalidBlocktank(errorDetails: String
    )
    case InitializationError(errorDetails: String
    )
    case InsertError(errorDetails: String
    )
    case RetrievalError(errorDetails: String
    )
    case DataError(errorDetails: String
    )
    case ConnectionError(errorDetails: String
    )
    case SerializationError(errorDetails: String
    )
    case ChannelOpen(errorType: BtChannelOrderErrorType, errorDetails: String
    )
    case OrderState(errorDetails: String
    )
    case InvalidParameter(errorDetails: String
    )
    case DatabaseError(errorDetails: String
    )
}


public struct FfiConverterTypeBlocktankError: FfiConverterRustBuffer {
    typealias SwiftType = BlocktankError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlocktankError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .HttpClient(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 2: return .BlocktankClient(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 3: return .InvalidBlocktank(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 4: return .InitializationError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 5: return .InsertError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 6: return .RetrievalError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 7: return .DataError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 8: return .ConnectionError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 9: return .SerializationError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 10: return .ChannelOpen(
            errorType: try FfiConverterTypeBtChannelOrderErrorType.read(from: &buf), 
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 11: return .OrderState(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 12: return .InvalidParameter(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 13: return .DatabaseError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BlocktankError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .HttpClient(errorDetails):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .BlocktankClient(errorDetails):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .InvalidBlocktank(errorDetails):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .InitializationError(errorDetails):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .InsertError(errorDetails):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .RetrievalError(errorDetails):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .DataError(errorDetails):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .ConnectionError(errorDetails):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .SerializationError(errorDetails):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .ChannelOpen(errorType,errorDetails):
            writeInt(&buf, Int32(10))
            FfiConverterTypeBtChannelOrderErrorType.write(errorType, into: &buf)
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .OrderState(errorDetails):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .InvalidParameter(errorDetails):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .DatabaseError(errorDetails):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(errorDetails, into: &buf)
            
        }
    }
}


extension BlocktankError: Equatable, Hashable {}

extension BlocktankError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BtBolt11InvoiceState {
    
    case pending
    case holding
    case paid
    case canceled
}


public struct FfiConverterTypeBtBolt11InvoiceState: FfiConverterRustBuffer {
    typealias SwiftType = BtBolt11InvoiceState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BtBolt11InvoiceState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pending
        
        case 2: return .holding
        
        case 3: return .paid
        
        case 4: return .canceled
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BtBolt11InvoiceState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .pending:
            writeInt(&buf, Int32(1))
        
        
        case .holding:
            writeInt(&buf, Int32(2))
        
        
        case .paid:
            writeInt(&buf, Int32(3))
        
        
        case .canceled:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeBtBolt11InvoiceState_lift(_ buf: RustBuffer) throws -> BtBolt11InvoiceState {
    return try FfiConverterTypeBtBolt11InvoiceState.lift(buf)
}

public func FfiConverterTypeBtBolt11InvoiceState_lower(_ value: BtBolt11InvoiceState) -> RustBuffer {
    return FfiConverterTypeBtBolt11InvoiceState.lower(value)
}



extension BtBolt11InvoiceState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BtChannelOrderErrorType {
    
    case wrongOrderState
    case peerNotReachable
    case channelRejectedByDestination
    case channelRejectedByLsp
    case blocktankNotReady
}


public struct FfiConverterTypeBtChannelOrderErrorType: FfiConverterRustBuffer {
    typealias SwiftType = BtChannelOrderErrorType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BtChannelOrderErrorType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .wrongOrderState
        
        case 2: return .peerNotReachable
        
        case 3: return .channelRejectedByDestination
        
        case 4: return .channelRejectedByLsp
        
        case 5: return .blocktankNotReady
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BtChannelOrderErrorType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .wrongOrderState:
            writeInt(&buf, Int32(1))
        
        
        case .peerNotReachable:
            writeInt(&buf, Int32(2))
        
        
        case .channelRejectedByDestination:
            writeInt(&buf, Int32(3))
        
        
        case .channelRejectedByLsp:
            writeInt(&buf, Int32(4))
        
        
        case .blocktankNotReady:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeBtChannelOrderErrorType_lift(_ buf: RustBuffer) throws -> BtChannelOrderErrorType {
    return try FfiConverterTypeBtChannelOrderErrorType.lift(buf)
}

public func FfiConverterTypeBtChannelOrderErrorType_lower(_ value: BtChannelOrderErrorType) -> RustBuffer {
    return FfiConverterTypeBtChannelOrderErrorType.lower(value)
}



extension BtChannelOrderErrorType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BtOpenChannelState {
    
    case opening
    case `open`
    case closed
}


public struct FfiConverterTypeBtOpenChannelState: FfiConverterRustBuffer {
    typealias SwiftType = BtOpenChannelState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BtOpenChannelState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .opening
        
        case 2: return .`open`
        
        case 3: return .closed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BtOpenChannelState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .opening:
            writeInt(&buf, Int32(1))
        
        
        case .`open`:
            writeInt(&buf, Int32(2))
        
        
        case .closed:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeBtOpenChannelState_lift(_ buf: RustBuffer) throws -> BtOpenChannelState {
    return try FfiConverterTypeBtOpenChannelState.lift(buf)
}

public func FfiConverterTypeBtOpenChannelState_lower(_ value: BtOpenChannelState) -> RustBuffer {
    return FfiConverterTypeBtOpenChannelState.lower(value)
}



extension BtOpenChannelState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BtOrderState {
    
    case created
    case expired
    case `open`
    case closed
}


public struct FfiConverterTypeBtOrderState: FfiConverterRustBuffer {
    typealias SwiftType = BtOrderState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BtOrderState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .expired
        
        case 3: return .`open`
        
        case 4: return .closed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BtOrderState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .expired:
            writeInt(&buf, Int32(2))
        
        
        case .`open`:
            writeInt(&buf, Int32(3))
        
        
        case .closed:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeBtOrderState_lift(_ buf: RustBuffer) throws -> BtOrderState {
    return try FfiConverterTypeBtOrderState.lift(buf)
}

public func FfiConverterTypeBtOrderState_lower(_ value: BtOrderState) -> RustBuffer {
    return FfiConverterTypeBtOrderState.lower(value)
}



extension BtOrderState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BtOrderState2 {
    
    case created
    case expired
    case executed
    case paid
}


public struct FfiConverterTypeBtOrderState2: FfiConverterRustBuffer {
    typealias SwiftType = BtOrderState2

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BtOrderState2 {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .expired
        
        case 3: return .executed
        
        case 4: return .paid
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BtOrderState2, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .expired:
            writeInt(&buf, Int32(2))
        
        
        case .executed:
            writeInt(&buf, Int32(3))
        
        
        case .paid:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeBtOrderState2_lift(_ buf: RustBuffer) throws -> BtOrderState2 {
    return try FfiConverterTypeBtOrderState2.lift(buf)
}

public func FfiConverterTypeBtOrderState2_lower(_ value: BtOrderState2) -> RustBuffer {
    return FfiConverterTypeBtOrderState2.lower(value)
}



extension BtOrderState2: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BtPaymentState {
    
    case created
    case partiallyPaid
    case paid
    case refunded
    case refundAvailable
}


public struct FfiConverterTypeBtPaymentState: FfiConverterRustBuffer {
    typealias SwiftType = BtPaymentState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BtPaymentState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .partiallyPaid
        
        case 3: return .paid
        
        case 4: return .refunded
        
        case 5: return .refundAvailable
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BtPaymentState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .partiallyPaid:
            writeInt(&buf, Int32(2))
        
        
        case .paid:
            writeInt(&buf, Int32(3))
        
        
        case .refunded:
            writeInt(&buf, Int32(4))
        
        
        case .refundAvailable:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeBtPaymentState_lift(_ buf: RustBuffer) throws -> BtPaymentState {
    return try FfiConverterTypeBtPaymentState.lift(buf)
}

public func FfiConverterTypeBtPaymentState_lower(_ value: BtPaymentState) -> RustBuffer {
    return FfiConverterTypeBtPaymentState.lower(value)
}



extension BtPaymentState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BtPaymentState2 {
    
    case created
    case paid
    case refunded
    case refundAvailable
    case canceled
}


public struct FfiConverterTypeBtPaymentState2: FfiConverterRustBuffer {
    typealias SwiftType = BtPaymentState2

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BtPaymentState2 {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .paid
        
        case 3: return .refunded
        
        case 4: return .refundAvailable
        
        case 5: return .canceled
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BtPaymentState2, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .paid:
            writeInt(&buf, Int32(2))
        
        
        case .refunded:
            writeInt(&buf, Int32(3))
        
        
        case .refundAvailable:
            writeInt(&buf, Int32(4))
        
        
        case .canceled:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeBtPaymentState2_lift(_ buf: RustBuffer) throws -> BtPaymentState2 {
    return try FfiConverterTypeBtPaymentState2.lift(buf)
}

public func FfiConverterTypeBtPaymentState2_lower(_ value: BtPaymentState2) -> RustBuffer {
    return FfiConverterTypeBtPaymentState2.lower(value)
}



extension BtPaymentState2: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum CJitStateEnum {
    
    case created
    case completed
    case expired
    case failed
}


public struct FfiConverterTypeCJitStateEnum: FfiConverterRustBuffer {
    typealias SwiftType = CJitStateEnum

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CJitStateEnum {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .completed
        
        case 3: return .expired
        
        case 4: return .failed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CJitStateEnum, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .completed:
            writeInt(&buf, Int32(2))
        
        
        case .expired:
            writeInt(&buf, Int32(3))
        
        
        case .failed:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeCJitStateEnum_lift(_ buf: RustBuffer) throws -> CJitStateEnum {
    return try FfiConverterTypeCJitStateEnum.lift(buf)
}

public func FfiConverterTypeCJitStateEnum_lower(_ value: CJitStateEnum) -> RustBuffer {
    return FfiConverterTypeCJitStateEnum.lower(value)
}



extension CJitStateEnum: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Output type for compose transaction
 */

public enum ComposeOutput {
    
    /**
     * Regular output with amount and address
     */
    case regular(
        /**
         * Amount in satoshis
         */amount: String, 
        /**
         * Recipient address
         */address: String
    )
    /**
     * Send max output
     */
    case sendMax(
        /**
         * Recipient address
         */address: String
    )
    /**
     * OP_RETURN output
     */
    case opReturn(
        /**
         * Hexadecimal string with arbitrary data
         */dataHex: String
    )
    /**
     * Payment without address (precompose only)
     */
    case paymentNoAddress(
        /**
         * Amount in satoshis
         */amount: String
    )
    /**
     * Send max without address (precompose only)
     */
    case sendMaxNoAddress
}


public struct FfiConverterTypeComposeOutput: FfiConverterRustBuffer {
    typealias SwiftType = ComposeOutput

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComposeOutput {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .regular(amount: try FfiConverterString.read(from: &buf), address: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .sendMax(address: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .opReturn(dataHex: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .paymentNoAddress(amount: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .sendMaxNoAddress
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ComposeOutput, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .regular(amount,address):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(amount, into: &buf)
            FfiConverterString.write(address, into: &buf)
            
        
        case let .sendMax(address):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(address, into: &buf)
            
        
        case let .opReturn(dataHex):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(dataHex, into: &buf)
            
        
        case let .paymentNoAddress(amount):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(amount, into: &buf)
            
        
        case .sendMaxNoAddress:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeComposeOutput_lift(_ buf: RustBuffer) throws -> ComposeOutput {
    return try FfiConverterTypeComposeOutput.lift(buf)
}

public func FfiConverterTypeComposeOutput_lower(_ value: ComposeOutput) -> RustBuffer {
    return FfiConverterTypeComposeOutput.lower(value)
}



extension ComposeOutput: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Compose transaction response
 */

public enum ComposeTransactionResponse {
    
    /**
     * Signed transaction (payment mode)
     */
    case signedTransaction(SignedTransactionResponse
    )
    /**
     * Precomposed transactions (precompose mode)
     */
    case precomposedTransactions([PrecomposedTransaction]
    )
}


public struct FfiConverterTypeComposeTransactionResponse: FfiConverterRustBuffer {
    typealias SwiftType = ComposeTransactionResponse

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComposeTransactionResponse {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .signedTransaction(try FfiConverterTypeSignedTransactionResponse.read(from: &buf)
        )
        
        case 2: return .precomposedTransactions(try FfiConverterSequenceTypePrecomposedTransaction.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ComposeTransactionResponse, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .signedTransaction(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSignedTransactionResponse.write(v1, into: &buf)
            
        
        case let .precomposedTransactions(v1):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceTypePrecomposedTransaction.write(v1, into: &buf)
            
        }
    }
}


public func FfiConverterTypeComposeTransactionResponse_lift(_ buf: RustBuffer) throws -> ComposeTransactionResponse {
    return try FfiConverterTypeComposeTransactionResponse.lift(buf)
}

public func FfiConverterTypeComposeTransactionResponse_lower(_ value: ComposeTransactionResponse) -> RustBuffer {
    return FfiConverterTypeComposeTransactionResponse.lower(value)
}



extension ComposeTransactionResponse: Equatable, Hashable {}




public enum DbError {

    
    
    case DbActivityError(errorDetails: ActivityError
    )
    case DbBlocktankError(errorDetails: BlocktankError
    )
    case InitializationError(errorDetails: String
    )
}


public struct FfiConverterTypeDbError: FfiConverterRustBuffer {
    typealias SwiftType = DbError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DbError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DbActivityError(
            errorDetails: try FfiConverterTypeActivityError.read(from: &buf)
            )
        case 2: return .DbBlocktankError(
            errorDetails: try FfiConverterTypeBlocktankError.read(from: &buf)
            )
        case 3: return .InitializationError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DbError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .DbActivityError(errorDetails):
            writeInt(&buf, Int32(1))
            FfiConverterTypeActivityError.write(errorDetails, into: &buf)
            
        
        case let .DbBlocktankError(errorDetails):
            writeInt(&buf, Int32(2))
            FfiConverterTypeBlocktankError.write(errorDetails, into: &buf)
            
        
        case let .InitializationError(errorDetails):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(errorDetails, into: &buf)
            
        }
    }
}


extension DbError: Equatable, Hashable {}

extension DbError: Error { }


public enum DecodingError {

    
    
    case InvalidFormat
    case InvalidNetwork
    case InvalidAmount
    case InvalidLnurlPayAmount(amountSatoshis: UInt64, min: UInt64, max: UInt64
    )
    case InvalidTimestamp
    case InvalidChecksum
    case InvalidResponse
    case UnsupportedType
    case InvalidAddress
    case RequestFailed
    case ClientCreationFailed
    case InvoiceCreationFailed(errorMessage: String
    )
}


public struct FfiConverterTypeDecodingError: FfiConverterRustBuffer {
    typealias SwiftType = DecodingError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecodingError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidFormat
        case 2: return .InvalidNetwork
        case 3: return .InvalidAmount
        case 4: return .InvalidLnurlPayAmount(
            amountSatoshis: try FfiConverterUInt64.read(from: &buf), 
            min: try FfiConverterUInt64.read(from: &buf), 
            max: try FfiConverterUInt64.read(from: &buf)
            )
        case 5: return .InvalidTimestamp
        case 6: return .InvalidChecksum
        case 7: return .InvalidResponse
        case 8: return .UnsupportedType
        case 9: return .InvalidAddress
        case 10: return .RequestFailed
        case 11: return .ClientCreationFailed
        case 12: return .InvoiceCreationFailed(
            errorMessage: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DecodingError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidFormat:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidNetwork:
            writeInt(&buf, Int32(2))
        
        
        case .InvalidAmount:
            writeInt(&buf, Int32(3))
        
        
        case let .InvalidLnurlPayAmount(amountSatoshis,min,max):
            writeInt(&buf, Int32(4))
            FfiConverterUInt64.write(amountSatoshis, into: &buf)
            FfiConverterUInt64.write(min, into: &buf)
            FfiConverterUInt64.write(max, into: &buf)
            
        
        case .InvalidTimestamp:
            writeInt(&buf, Int32(5))
        
        
        case .InvalidChecksum:
            writeInt(&buf, Int32(6))
        
        
        case .InvalidResponse:
            writeInt(&buf, Int32(7))
        
        
        case .UnsupportedType:
            writeInt(&buf, Int32(8))
        
        
        case .InvalidAddress:
            writeInt(&buf, Int32(9))
        
        
        case .RequestFailed:
            writeInt(&buf, Int32(10))
        
        
        case .ClientCreationFailed:
            writeInt(&buf, Int32(11))
        
        
        case let .InvoiceCreationFailed(errorMessage):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(errorMessage, into: &buf)
            
        }
    }
}


extension DecodingError: Equatable, Hashable {}

extension DecodingError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Bitcoin account types for default display
 */

public enum DefaultAccountType {
    
    /**
     * Normal account
     */
    case normal
    /**
     * SegWit account
     */
    case segwit
    /**
     * Legacy account
     */
    case legacy
}


public struct FfiConverterTypeDefaultAccountType: FfiConverterRustBuffer {
    typealias SwiftType = DefaultAccountType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DefaultAccountType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .normal
        
        case 2: return .segwit
        
        case 3: return .legacy
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DefaultAccountType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .normal:
            writeInt(&buf, Int32(1))
        
        
        case .segwit:
            writeInt(&buf, Int32(2))
        
        
        case .legacy:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeDefaultAccountType_lift(_ buf: RustBuffer) throws -> DefaultAccountType {
    return try FfiConverterTypeDefaultAccountType.lift(buf)
}

public func FfiConverterTypeDefaultAccountType_lower(_ value: DefaultAccountType) -> RustBuffer {
    return FfiConverterTypeDefaultAccountType.lower(value)
}



extension DefaultAccountType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Union type for HD Node (either a String or HDNodeType)
 */

public enum HdNodeTypeOrString {
    
    /**
     * HD Node as a string
     */
    case string(String
    )
    /**
     * HD Node as an object
     */
    case node(HdNodeType
    )
}


public struct FfiConverterTypeHDNodeTypeOrString: FfiConverterRustBuffer {
    typealias SwiftType = HdNodeTypeOrString

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HdNodeTypeOrString {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .string(try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .node(try FfiConverterTypeHDNodeType.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HdNodeTypeOrString, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .string(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .node(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeHDNodeType.write(v1, into: &buf)
            
        }
    }
}


public func FfiConverterTypeHDNodeTypeOrString_lift(_ buf: RustBuffer) throws -> HdNodeTypeOrString {
    return try FfiConverterTypeHDNodeTypeOrString.lift(buf)
}

public func FfiConverterTypeHDNodeTypeOrString_lower(_ value: HdNodeTypeOrString) -> RustBuffer {
    return FfiConverterTypeHDNodeTypeOrString.lower(value)
}



extension HdNodeTypeOrString: Equatable, Hashable {}




public enum LnurlError {

    
    
    case InvalidAddress
    case ClientCreationFailed
    case RequestFailed
    case InvalidResponse
    case InvalidAmount(amountSatoshis: UInt64, min: UInt64, max: UInt64
    )
    case InvoiceCreationFailed(errorDetails: String
    )
    case AuthenticationFailed
}


public struct FfiConverterTypeLnurlError: FfiConverterRustBuffer {
    typealias SwiftType = LnurlError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidAddress
        case 2: return .ClientCreationFailed
        case 3: return .RequestFailed
        case 4: return .InvalidResponse
        case 5: return .InvalidAmount(
            amountSatoshis: try FfiConverterUInt64.read(from: &buf), 
            min: try FfiConverterUInt64.read(from: &buf), 
            max: try FfiConverterUInt64.read(from: &buf)
            )
        case 6: return .InvoiceCreationFailed(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 7: return .AuthenticationFailed

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnurlError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidAddress:
            writeInt(&buf, Int32(1))
        
        
        case .ClientCreationFailed:
            writeInt(&buf, Int32(2))
        
        
        case .RequestFailed:
            writeInt(&buf, Int32(3))
        
        
        case .InvalidResponse:
            writeInt(&buf, Int32(4))
        
        
        case let .InvalidAmount(amountSatoshis,min,max):
            writeInt(&buf, Int32(5))
            FfiConverterUInt64.write(amountSatoshis, into: &buf)
            FfiConverterUInt64.write(min, into: &buf)
            FfiConverterUInt64.write(max, into: &buf)
            
        
        case let .InvoiceCreationFailed(errorDetails):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case .AuthenticationFailed:
            writeInt(&buf, Int32(7))
        
        }
    }
}


extension LnurlError: Equatable, Hashable {}

extension LnurlError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ManualRefundStateEnum {
    
    case created
    case approved
    case rejected
    case sent
}


public struct FfiConverterTypeManualRefundStateEnum: FfiConverterRustBuffer {
    typealias SwiftType = ManualRefundStateEnum

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManualRefundStateEnum {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .created
        
        case 2: return .approved
        
        case 3: return .rejected
        
        case 4: return .sent
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ManualRefundStateEnum, into buf: inout [UInt8]) {
        switch value {
        
        
        case .created:
            writeInt(&buf, Int32(1))
        
        
        case .approved:
            writeInt(&buf, Int32(2))
        
        
        case .rejected:
            writeInt(&buf, Int32(3))
        
        
        case .sent:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeManualRefundStateEnum_lift(_ buf: RustBuffer) throws -> ManualRefundStateEnum {
    return try FfiConverterTypeManualRefundStateEnum.lift(buf)
}

public func FfiConverterTypeManualRefundStateEnum_lower(_ value: ManualRefundStateEnum) -> RustBuffer {
    return FfiConverterTypeManualRefundStateEnum.lower(value)
}



extension ManualRefundStateEnum: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Network {
    
    /**
     * Mainnet Bitcoin.
     */
    case bitcoin
    /**
     * Bitcoin's testnet network.
     */
    case testnet
    /**
     * Bitcoin's testnet4 network.
     */
    case testnet4
    /**
     * Bitcoin's signet network.
     */
    case signet
    /**
     * Bitcoin's regtest network.
     */
    case regtest
}


public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .testnet
        
        case 3: return .testnet4
        
        case 4: return .signet
        
        case 5: return .regtest
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .testnet4:
            writeInt(&buf, Int32(3))
        
        
        case .signet:
            writeInt(&buf, Int32(4))
        
        
        case .regtest:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}



extension Network: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NetworkType {
    
    case bitcoin
    case testnet
    case regtest
    case signet
}


public struct FfiConverterTypeNetworkType: FfiConverterRustBuffer {
    typealias SwiftType = NetworkType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NetworkType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .testnet
        
        case 3: return .regtest
        
        case 4: return .signet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NetworkType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .regtest:
            writeInt(&buf, Int32(3))
        
        
        case .signet:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeNetworkType_lift(_ buf: RustBuffer) throws -> NetworkType {
    return try FfiConverterTypeNetworkType.lift(buf)
}

public func FfiConverterTypeNetworkType_lower(_ value: NetworkType) -> RustBuffer {
    return FfiConverterTypeNetworkType.lower(value)
}



extension NetworkType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentState {
    
    case pending
    case succeeded
    case failed
}


public struct FfiConverterTypePaymentState: FfiConverterRustBuffer {
    typealias SwiftType = PaymentState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pending
        
        case 2: return .succeeded
        
        case 3: return .failed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentState, into buf: inout [UInt8]) {
        switch value {
        
        
        case .pending:
            writeInt(&buf, Int32(1))
        
        
        case .succeeded:
            writeInt(&buf, Int32(2))
        
        
        case .failed:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypePaymentState_lift(_ buf: RustBuffer) throws -> PaymentState {
    return try FfiConverterTypePaymentState.lift(buf)
}

public func FfiConverterTypePaymentState_lower(_ value: PaymentState) -> RustBuffer {
    return FfiConverterTypePaymentState.lower(value)
}



extension PaymentState: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum PaymentType {
    
    case sent
    case received
}


public struct FfiConverterTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = PaymentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .sent
        
        case 2: return .received
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PaymentType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .sent:
            writeInt(&buf, Int32(1))
        
        
        case .received:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypePaymentType_lift(_ buf: RustBuffer) throws -> PaymentType {
    return try FfiConverterTypePaymentType.lift(buf)
}

public func FfiConverterTypePaymentType_lower(_ value: PaymentType) -> RustBuffer {
    return FfiConverterTypePaymentType.lower(value)
}



extension PaymentType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Scanner {
    
    case onChain(invoice: OnChainInvoice
    )
    case lightning(invoice: LightningInvoice
    )
    case pubkyAuth(data: String
    )
    case lnurlChannel(data: LnurlChannelData
    )
    case lnurlAuth(data: LnurlAuthData
    )
    case lnurlWithdraw(data: LnurlWithdrawData
    )
    case lnurlAddress(data: LnurlAddressData
    )
    case lnurlPay(data: LnurlPayData
    )
    case nodeId(url: String, network: NetworkType
    )
    case gift(code: String, amount: UInt64
    )
}


public struct FfiConverterTypeScanner: FfiConverterRustBuffer {
    typealias SwiftType = Scanner

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Scanner {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onChain(invoice: try FfiConverterTypeOnChainInvoice.read(from: &buf)
        )
        
        case 2: return .lightning(invoice: try FfiConverterTypeLightningInvoice.read(from: &buf)
        )
        
        case 3: return .pubkyAuth(data: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .lnurlChannel(data: try FfiConverterTypeLnurlChannelData.read(from: &buf)
        )
        
        case 5: return .lnurlAuth(data: try FfiConverterTypeLnurlAuthData.read(from: &buf)
        )
        
        case 6: return .lnurlWithdraw(data: try FfiConverterTypeLnurlWithdrawData.read(from: &buf)
        )
        
        case 7: return .lnurlAddress(data: try FfiConverterTypeLnurlAddressData.read(from: &buf)
        )
        
        case 8: return .lnurlPay(data: try FfiConverterTypeLnurlPayData.read(from: &buf)
        )
        
        case 9: return .nodeId(url: try FfiConverterString.read(from: &buf), network: try FfiConverterTypeNetworkType.read(from: &buf)
        )
        
        case 10: return .gift(code: try FfiConverterString.read(from: &buf), amount: try FfiConverterUInt64.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Scanner, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .onChain(invoice):
            writeInt(&buf, Int32(1))
            FfiConverterTypeOnChainInvoice.write(invoice, into: &buf)
            
        
        case let .lightning(invoice):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLightningInvoice.write(invoice, into: &buf)
            
        
        case let .pubkyAuth(data):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(data, into: &buf)
            
        
        case let .lnurlChannel(data):
            writeInt(&buf, Int32(4))
            FfiConverterTypeLnurlChannelData.write(data, into: &buf)
            
        
        case let .lnurlAuth(data):
            writeInt(&buf, Int32(5))
            FfiConverterTypeLnurlAuthData.write(data, into: &buf)
            
        
        case let .lnurlWithdraw(data):
            writeInt(&buf, Int32(6))
            FfiConverterTypeLnurlWithdrawData.write(data, into: &buf)
            
        
        case let .lnurlAddress(data):
            writeInt(&buf, Int32(7))
            FfiConverterTypeLnurlAddressData.write(data, into: &buf)
            
        
        case let .lnurlPay(data):
            writeInt(&buf, Int32(8))
            FfiConverterTypeLnurlPayData.write(data, into: &buf)
            
        
        case let .nodeId(url,network):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(url, into: &buf)
            FfiConverterTypeNetworkType.write(network, into: &buf)
            
        
        case let .gift(code,amount):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(code, into: &buf)
            FfiConverterUInt64.write(amount, into: &buf)
            
        }
    }
}


public func FfiConverterTypeScanner_lift(_ buf: RustBuffer) throws -> Scanner {
    return try FfiConverterTypeScanner.lift(buf)
}

public func FfiConverterTypeScanner_lower(_ value: Scanner) -> RustBuffer {
    return FfiConverterTypeScanner.lower(value)
}



extension Scanner: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Script type for inputs and outputs
 */

public enum ScriptType {
    
    case spendAddress
    case spendMultisig
    case spendWitness
    case spendP2shWitness
    case spendTaproot
    case external
    case payToAddress
    case payToScriptHash
    case payToMultisig
    case payToWitness
    case payToP2shWitness
    case payToTaproot
    case payToOpReturn
}


public struct FfiConverterTypeScriptType: FfiConverterRustBuffer {
    typealias SwiftType = ScriptType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ScriptType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .spendAddress
        
        case 2: return .spendMultisig
        
        case 3: return .spendWitness
        
        case 4: return .spendP2shWitness
        
        case 5: return .spendTaproot
        
        case 6: return .external
        
        case 7: return .payToAddress
        
        case 8: return .payToScriptHash
        
        case 9: return .payToMultisig
        
        case 10: return .payToWitness
        
        case 11: return .payToP2shWitness
        
        case 12: return .payToTaproot
        
        case 13: return .payToOpReturn
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ScriptType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .spendAddress:
            writeInt(&buf, Int32(1))
        
        
        case .spendMultisig:
            writeInt(&buf, Int32(2))
        
        
        case .spendWitness:
            writeInt(&buf, Int32(3))
        
        
        case .spendP2shWitness:
            writeInt(&buf, Int32(4))
        
        
        case .spendTaproot:
            writeInt(&buf, Int32(5))
        
        
        case .external:
            writeInt(&buf, Int32(6))
        
        
        case .payToAddress:
            writeInt(&buf, Int32(7))
        
        
        case .payToScriptHash:
            writeInt(&buf, Int32(8))
        
        
        case .payToMultisig:
            writeInt(&buf, Int32(9))
        
        
        case .payToWitness:
            writeInt(&buf, Int32(10))
        
        
        case .payToP2shWitness:
            writeInt(&buf, Int32(11))
        
        
        case .payToTaproot:
            writeInt(&buf, Int32(12))
        
        
        case .payToOpReturn:
            writeInt(&buf, Int32(13))
        
        }
    }
}


public func FfiConverterTypeScriptType_lift(_ buf: RustBuffer) throws -> ScriptType {
    return try FfiConverterTypeScriptType.lift(buf)
}

public func FfiConverterTypeScriptType_lower(_ value: ScriptType) -> RustBuffer {
    return FfiConverterTypeScriptType.lower(value)
}



extension ScriptType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SortDirection {
    
    case asc
    case desc
}


public struct FfiConverterTypeSortDirection: FfiConverterRustBuffer {
    typealias SwiftType = SortDirection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortDirection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .asc
        
        case 2: return .desc
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortDirection, into buf: inout [UInt8]) {
        switch value {
        
        
        case .asc:
            writeInt(&buf, Int32(1))
        
        
        case .desc:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeSortDirection_lift(_ buf: RustBuffer) throws -> SortDirection {
    return try FfiConverterTypeSortDirection.lift(buf)
}

public func FfiConverterTypeSortDirection_lower(_ value: SortDirection) -> RustBuffer {
    return FfiConverterTypeSortDirection.lower(value)
}



extension SortDirection: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Token filter options for getAccountInfo
 */

public enum TokenFilter {
    
    /**
     * Return only addresses with nonzero balance (default)
     */
    case nonzero
    /**
     * Return addresses with at least one transaction
     */
    case used
    /**
     * Return all derived addresses
     */
    case derived
}


public struct FfiConverterTypeTokenFilter: FfiConverterRustBuffer {
    typealias SwiftType = TokenFilter

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TokenFilter {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .nonzero
        
        case 2: return .used
        
        case 3: return .derived
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TokenFilter, into buf: inout [UInt8]) {
        switch value {
        
        
        case .nonzero:
            writeInt(&buf, Int32(1))
        
        
        case .used:
            writeInt(&buf, Int32(2))
        
        
        case .derived:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeTokenFilter_lift(_ buf: RustBuffer) throws -> TokenFilter {
    return try FfiConverterTypeTokenFilter.lift(buf)
}

public func FfiConverterTypeTokenFilter_lower(_ value: TokenFilter) -> RustBuffer {
    return FfiConverterTypeTokenFilter.lower(value)
}



extension TokenFilter: Equatable, Hashable {}




/**
 * Error types for Trezor Connect operations
 */
public enum TrezorConnectError {

    
    
    /**
     * Error during serialization/deserialization
     */
    case SerdeError(errorDetails: String
    )
    /**
     * Error with URL parsing or formatting
     */
    case UrlError(errorDetails: String
    )
    /**
     * Environment-related errors
     */
    case EnvironmentError(errorDetails: String
    )
    /**
     * General errors
     */
    case Other(errorDetails: String
    )
    case ClientError(errorDetails: String
    )
}


public struct FfiConverterTypeTrezorConnectError: FfiConverterRustBuffer {
    typealias SwiftType = TrezorConnectError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrezorConnectError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .SerdeError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 2: return .UrlError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 3: return .EnvironmentError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 4: return .Other(
            errorDetails: try FfiConverterString.read(from: &buf)
            )
        case 5: return .ClientError(
            errorDetails: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrezorConnectError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .SerdeError(errorDetails):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .UrlError(errorDetails):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .EnvironmentError(errorDetails):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .Other(errorDetails):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(errorDetails, into: &buf)
            
        
        case let .ClientError(errorDetails):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(errorDetails, into: &buf)
            
        }
    }
}


extension TrezorConnectError: Equatable, Hashable {}

extension TrezorConnectError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Environment options for Trezor deep linking
 */

public enum TrezorEnvironment {
    
    /**
     * Production environment (currently unavailable according to docs)
     */
    case production
    /**
     * Development environment
     */
    case development
    /**
     * Local environment
     */
    case local
}


public struct FfiConverterTypeTrezorEnvironment: FfiConverterRustBuffer {
    typealias SwiftType = TrezorEnvironment

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrezorEnvironment {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .production
        
        case 2: return .development
        
        case 3: return .local
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrezorEnvironment, into buf: inout [UInt8]) {
        switch value {
        
        
        case .production:
            writeInt(&buf, Int32(1))
        
        
        case .development:
            writeInt(&buf, Int32(2))
        
        
        case .local:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeTrezorEnvironment_lift(_ buf: RustBuffer) throws -> TrezorEnvironment {
    return try FfiConverterTypeTrezorEnvironment.lift(buf)
}

public func FfiConverterTypeTrezorEnvironment_lower(_ value: TrezorEnvironment) -> RustBuffer {
    return FfiConverterTypeTrezorEnvironment.lower(value)
}



extension TrezorEnvironment: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Enum representing the different types of Trezor responses
 */

public enum TrezorResponsePayload {
    
    /**
     * Response from getFeatures method
     */
    case features(FeatureResponse
    )
    /**
     * Response from getAddress method
     */
    case address(AddressResponse
    )
    /**
     * Response from getPublicKey method
     */
    case publicKey(PublicKeyResponse
    )
    /**
     * Response from getAccountInfo method
     */
    case accountInfo(AccountInfoResponse
    )
    /**
     * Response from composeTransaction method
     */
    case composeTransaction(ComposeTransactionResponse
    )
    /**
     * Response from verifyMessage method
     */
    case verifyMessage(VerifyMessageResponse
    )
    /**
     * Response from signMessage method
     */
    case messageSignature(MessageSignatureResponse
    )
    /**
     * Response from signTransaction method
     */
    case signedTransaction(SignedTransactionResponse
    )
}


public struct FfiConverterTypeTrezorResponsePayload: FfiConverterRustBuffer {
    typealias SwiftType = TrezorResponsePayload

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrezorResponsePayload {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .features(try FfiConverterTypeFeatureResponse.read(from: &buf)
        )
        
        case 2: return .address(try FfiConverterTypeAddressResponse.read(from: &buf)
        )
        
        case 3: return .publicKey(try FfiConverterTypePublicKeyResponse.read(from: &buf)
        )
        
        case 4: return .accountInfo(try FfiConverterTypeAccountInfoResponse.read(from: &buf)
        )
        
        case 5: return .composeTransaction(try FfiConverterTypeComposeTransactionResponse.read(from: &buf)
        )
        
        case 6: return .verifyMessage(try FfiConverterTypeVerifyMessageResponse.read(from: &buf)
        )
        
        case 7: return .messageSignature(try FfiConverterTypeMessageSignatureResponse.read(from: &buf)
        )
        
        case 8: return .signedTransaction(try FfiConverterTypeSignedTransactionResponse.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrezorResponsePayload, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .features(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeFeatureResponse.write(v1, into: &buf)
            
        
        case let .address(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeAddressResponse.write(v1, into: &buf)
            
        
        case let .publicKey(v1):
            writeInt(&buf, Int32(3))
            FfiConverterTypePublicKeyResponse.write(v1, into: &buf)
            
        
        case let .accountInfo(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeAccountInfoResponse.write(v1, into: &buf)
            
        
        case let .composeTransaction(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeComposeTransactionResponse.write(v1, into: &buf)
            
        
        case let .verifyMessage(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeVerifyMessageResponse.write(v1, into: &buf)
            
        
        case let .messageSignature(v1):
            writeInt(&buf, Int32(7))
            FfiConverterTypeMessageSignatureResponse.write(v1, into: &buf)
            
        
        case let .signedTransaction(v1):
            writeInt(&buf, Int32(8))
            FfiConverterTypeSignedTransactionResponse.write(v1, into: &buf)
            
        }
    }
}


public func FfiConverterTypeTrezorResponsePayload_lift(_ buf: RustBuffer) throws -> TrezorResponsePayload {
    return try FfiConverterTypeTrezorResponsePayload.lift(buf)
}

public func FfiConverterTypeTrezorResponsePayload_lower(_ value: TrezorResponsePayload) -> RustBuffer {
    return FfiConverterTypeTrezorResponsePayload.lower(value)
}



extension TrezorResponsePayload: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WordCount {
    
    /**
     * 12-word mnemonic (128 bits of entropy)
     */
    case words12
    /**
     * 15-word mnemonic (160 bits of entropy)
     */
    case words15
    /**
     * 18-word mnemonic (192 bits of entropy)
     */
    case words18
    /**
     * 21-word mnemonic (224 bits of entropy)
     */
    case words21
    /**
     * 24-word mnemonic (256 bits of entropy)
     */
    case words24
}


public struct FfiConverterTypeWordCount: FfiConverterRustBuffer {
    typealias SwiftType = WordCount

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WordCount {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .words12
        
        case 2: return .words15
        
        case 3: return .words18
        
        case 4: return .words21
        
        case 5: return .words24
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WordCount, into buf: inout [UInt8]) {
        switch value {
        
        
        case .words12:
            writeInt(&buf, Int32(1))
        
        
        case .words15:
            writeInt(&buf, Int32(2))
        
        
        case .words18:
            writeInt(&buf, Int32(3))
        
        
        case .words21:
            writeInt(&buf, Int32(4))
        
        
        case .words24:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeWordCount_lift(_ buf: RustBuffer) throws -> WordCount {
    return try FfiConverterTypeWordCount.lift(buf)
}

public func FfiConverterTypeWordCount_lower(_ value: WordCount) -> RustBuffer {
    return FfiConverterTypeWordCount.lower(value)
}



extension WordCount: Equatable, Hashable {}



fileprivate struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCoinPurchaseMemo: FfiConverterRustBuffer {
    typealias SwiftType = CoinPurchaseMemo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCoinPurchaseMemo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCoinPurchaseMemo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCommonParams: FfiConverterRustBuffer {
    typealias SwiftType = CommonParams?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCommonParams.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCommonParams.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeComposeAccount: FfiConverterRustBuffer {
    typealias SwiftType = ComposeAccount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeComposeAccount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeComposeAccount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCreateCjitOptions: FfiConverterRustBuffer {
    typealias SwiftType = CreateCjitOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCreateCjitOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCreateCjitOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCreateOrderOptions: FfiConverterRustBuffer {
    typealias SwiftType = CreateOrderOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCreateOrderOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCreateOrderOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeDeviceParams: FfiConverterRustBuffer {
    typealias SwiftType = DeviceParams?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDeviceParams.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDeviceParams.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIBtChannel: FfiConverterRustBuffer {
    typealias SwiftType = IBtChannel?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIBtChannel.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIBtChannel.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIBtChannelClose: FfiConverterRustBuffer {
    typealias SwiftType = IBtChannelClose?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIBtChannelClose.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIBtChannelClose.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIBtInfo: FfiConverterRustBuffer {
    typealias SwiftType = IBtInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIBtInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIBtInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIBtOrder: FfiConverterRustBuffer {
    typealias SwiftType = IBtOrder?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIBtOrder.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIBtOrder.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIBtPayment: FfiConverterRustBuffer {
    typealias SwiftType = IBtPayment?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIBtPayment.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIBtPayment.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIDiscount: FfiConverterRustBuffer {
    typealias SwiftType = IDiscount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIDiscount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIDiscount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeIGiftCode: FfiConverterRustBuffer {
    typealias SwiftType = IGiftCode?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIGiftCode.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIGiftCode.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeMultisigRedeemScriptType: FfiConverterRustBuffer {
    typealias SwiftType = MultisigRedeemScriptType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMultisigRedeemScriptType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMultisigRedeemScriptType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeRefundMemo: FfiConverterRustBuffer {
    typealias SwiftType = RefundMemo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRefundMemo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRefundMemo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeTextMemo: FfiConverterRustBuffer {
    typealias SwiftType = TextMemo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTextMemo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTextMemo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeUnlockPath: FfiConverterRustBuffer {
    typealias SwiftType = UnlockPath?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUnlockPath.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUnlockPath.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeXrpMarker: FfiConverterRustBuffer {
    typealias SwiftType = XrpMarker?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeXrpMarker.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeXrpMarker.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeAccountInfoDetails: FfiConverterRustBuffer {
    typealias SwiftType = AccountInfoDetails?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAccountInfoDetails.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAccountInfoDetails.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeActivity: FfiConverterRustBuffer {
    typealias SwiftType = Activity?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeActivity.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeActivity.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeActivityFilter: FfiConverterRustBuffer {
    typealias SwiftType = ActivityFilter?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeActivityFilter.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeActivityFilter.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeAmountUnit: FfiConverterRustBuffer {
    typealias SwiftType = AmountUnit?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAmountUnit.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAmountUnit.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeBtOrderState2: FfiConverterRustBuffer {
    typealias SwiftType = BtOrderState2?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBtOrderState2.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBtOrderState2.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCJitStateEnum: FfiConverterRustBuffer {
    typealias SwiftType = CJitStateEnum?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCJitStateEnum.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCJitStateEnum.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeDefaultAccountType: FfiConverterRustBuffer {
    typealias SwiftType = DefaultAccountType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDefaultAccountType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDefaultAccountType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNetwork.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNetwork.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePaymentType: FfiConverterRustBuffer {
    typealias SwiftType = PaymentType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePaymentType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePaymentType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeScriptType: FfiConverterRustBuffer {
    typealias SwiftType = ScriptType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeScriptType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeScriptType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeSortDirection: FfiConverterRustBuffer {
    typealias SwiftType = SortDirection?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSortDirection.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSortDirection.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeTokenFilter: FfiConverterRustBuffer {
    typealias SwiftType = TokenFilter?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTokenFilter.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTokenFilter.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeTrezorEnvironment: FfiConverterRustBuffer {
    typealias SwiftType = TrezorEnvironment?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTrezorEnvironment.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTrezorEnvironment.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeWordCount: FfiConverterRustBuffer {
    typealias SwiftType = WordCount?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWordCount.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWordCount.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeFeeLevel: FfiConverterRustBuffer {
    typealias SwiftType = [FeeLevel]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeFeeLevel.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeFeeLevel.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeHDNodeType: FfiConverterRustBuffer {
    typealias SwiftType = [HdNodeType]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeHDNodeType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeHDNodeType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeIManualRefund: FfiConverterRustBuffer {
    typealias SwiftType = [IManualRefund]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeIManualRefund.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeIManualRefund.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypePaymentRequestMemo: FfiConverterRustBuffer {
    typealias SwiftType = [PaymentRequestMemo]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypePaymentRequestMemo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypePaymentRequestMemo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypePrecomposedInput: FfiConverterRustBuffer {
    typealias SwiftType = [PrecomposedInput]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypePrecomposedInput.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypePrecomposedInput.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypePrecomposedOutput: FfiConverterRustBuffer {
    typealias SwiftType = [PrecomposedOutput]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypePrecomposedOutput.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypePrecomposedOutput.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeRefTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [RefTransaction]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeRefTransaction.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeRefTransaction.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeTxAckPaymentRequest: FfiConverterRustBuffer {
    typealias SwiftType = [TxAckPaymentRequest]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeTxAckPaymentRequest.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeTxAckPaymentRequest.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt32: FfiConverterRustBuffer {
    typealias SwiftType = [UInt32]

    public static func write(_ value: [UInt32], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt32.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt32] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt32]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt32.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeAccountUtxo: FfiConverterRustBuffer {
    typealias SwiftType = [AccountUtxo]

    public static func write(_ value: [AccountUtxo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAccountUtxo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AccountUtxo] {
        let len: Int32 = try readInt(&buf)
        var seq = [AccountUtxo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAccountUtxo.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeAddressInfo: FfiConverterRustBuffer {
    typealias SwiftType = [AddressInfo]

    public static func write(_ value: [AddressInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAddressInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AddressInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [AddressInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAddressInfo.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeFeeLevel: FfiConverterRustBuffer {
    typealias SwiftType = [FeeLevel]

    public static func write(_ value: [FeeLevel], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFeeLevel.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FeeLevel] {
        let len: Int32 = try readInt(&buf)
        var seq = [FeeLevel]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFeeLevel.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeGetAddressResponse: FfiConverterRustBuffer {
    typealias SwiftType = [GetAddressResponse]

    public static func write(_ value: [GetAddressResponse], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeGetAddressResponse.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [GetAddressResponse] {
        let len: Int32 = try readInt(&buf)
        var seq = [GetAddressResponse]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeGetAddressResponse.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeHDNodePathType: FfiConverterRustBuffer {
    typealias SwiftType = [HdNodePathType]

    public static func write(_ value: [HdNodePathType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeHDNodePathType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [HdNodePathType] {
        let len: Int32 = try readInt(&buf)
        var seq = [HdNodePathType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeHDNodePathType.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeHDNodeType: FfiConverterRustBuffer {
    typealias SwiftType = [HdNodeType]

    public static func write(_ value: [HdNodeType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeHDNodeType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [HdNodeType] {
        let len: Int32 = try readInt(&buf)
        var seq = [HdNodeType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeHDNodeType.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIBtOnchainTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [IBtOnchainTransaction]

    public static func write(_ value: [IBtOnchainTransaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIBtOnchainTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IBtOnchainTransaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [IBtOnchainTransaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIBtOnchainTransaction.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIBtOrder: FfiConverterRustBuffer {
    typealias SwiftType = [IBtOrder]

    public static func write(_ value: [IBtOrder], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIBtOrder.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IBtOrder] {
        let len: Int32 = try readInt(&buf)
        var seq = [IBtOrder]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIBtOrder.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeICJitEntry: FfiConverterRustBuffer {
    typealias SwiftType = [IcJitEntry]

    public static func write(_ value: [IcJitEntry], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeICJitEntry.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IcJitEntry] {
        let len: Int32 = try readInt(&buf)
        var seq = [IcJitEntry]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeICJitEntry.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeILspNode: FfiConverterRustBuffer {
    typealias SwiftType = [ILspNode]

    public static func write(_ value: [ILspNode], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeILspNode.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ILspNode] {
        let len: Int32 = try readInt(&buf)
        var seq = [ILspNode]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeILspNode.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeIManualRefund: FfiConverterRustBuffer {
    typealias SwiftType = [IManualRefund]

    public static func write(_ value: [IManualRefund], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIManualRefund.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IManualRefund] {
        let len: Int32 = try readInt(&buf)
        var seq = [IManualRefund]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIManualRefund.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePaymentRequestMemo: FfiConverterRustBuffer {
    typealias SwiftType = [PaymentRequestMemo]

    public static func write(_ value: [PaymentRequestMemo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePaymentRequestMemo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PaymentRequestMemo] {
        let len: Int32 = try readInt(&buf)
        var seq = [PaymentRequestMemo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePaymentRequestMemo.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePrecomposedInput: FfiConverterRustBuffer {
    typealias SwiftType = [PrecomposedInput]

    public static func write(_ value: [PrecomposedInput], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePrecomposedInput.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PrecomposedInput] {
        let len: Int32 = try readInt(&buf)
        var seq = [PrecomposedInput]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePrecomposedInput.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePrecomposedOutput: FfiConverterRustBuffer {
    typealias SwiftType = [PrecomposedOutput]

    public static func write(_ value: [PrecomposedOutput], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePrecomposedOutput.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PrecomposedOutput] {
        let len: Int32 = try readInt(&buf)
        var seq = [PrecomposedOutput]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePrecomposedOutput.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePrecomposedTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [PrecomposedTransaction]

    public static func write(_ value: [PrecomposedTransaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePrecomposedTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PrecomposedTransaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [PrecomposedTransaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePrecomposedTransaction.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRefTransaction: FfiConverterRustBuffer {
    typealias SwiftType = [RefTransaction]

    public static func write(_ value: [RefTransaction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRefTransaction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RefTransaction] {
        let len: Int32 = try readInt(&buf)
        var seq = [RefTransaction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRefTransaction.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRefTxInput: FfiConverterRustBuffer {
    typealias SwiftType = [RefTxInput]

    public static func write(_ value: [RefTxInput], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRefTxInput.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RefTxInput] {
        let len: Int32 = try readInt(&buf)
        var seq = [RefTxInput]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRefTxInput.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRefTxOutput: FfiConverterRustBuffer {
    typealias SwiftType = [RefTxOutput]

    public static func write(_ value: [RefTxOutput], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRefTxOutput.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RefTxOutput] {
        let len: Int32 = try readInt(&buf)
        var seq = [RefTxOutput]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRefTxOutput.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeTxAckPaymentRequest: FfiConverterRustBuffer {
    typealias SwiftType = [TxAckPaymentRequest]

    public static func write(_ value: [TxAckPaymentRequest], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTxAckPaymentRequest.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TxAckPaymentRequest] {
        let len: Int32 = try readInt(&buf)
        var seq = [TxAckPaymentRequest]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTxAckPaymentRequest.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeTxInputType: FfiConverterRustBuffer {
    typealias SwiftType = [TxInputType]

    public static func write(_ value: [TxInputType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTxInputType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TxInputType] {
        let len: Int32 = try readInt(&buf)
        var seq = [TxInputType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTxInputType.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeTxOutputType: FfiConverterRustBuffer {
    typealias SwiftType = [TxOutputType]

    public static func write(_ value: [TxOutputType], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTxOutputType.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TxOutputType] {
        let len: Int32 = try readInt(&buf)
        var seq = [TxOutputType]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTxOutputType.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeActivity: FfiConverterRustBuffer {
    typealias SwiftType = [Activity]

    public static func write(_ value: [Activity], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeActivity.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Activity] {
        let len: Int32 = try readInt(&buf)
        var seq = [Activity]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeActivity.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeComposeOutput: FfiConverterRustBuffer {
    typealias SwiftType = [ComposeOutput]

    public static func write(_ value: [ComposeOutput], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeComposeOutput.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ComposeOutput] {
        let len: Int32 = try readInt(&buf)
        var seq = [ComposeOutput]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeComposeOutput.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
public func addTags(activityId: String, tags: [String])throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_add_tags(
        FfiConverterString.lower(activityId),
        FfiConverterSequenceString.lower(tags),$0
    )
}
}
public func createChannelRequestUrl(k1: String, callback: String, localNodeId: String, isPrivate: Bool, cancel: Bool)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeLnurlError.lift) {
    uniffi_bitkitcore_fn_func_create_channel_request_url(
        FfiConverterString.lower(k1),
        FfiConverterString.lower(callback),
        FfiConverterString.lower(localNodeId),
        FfiConverterBool.lower(isPrivate),
        FfiConverterBool.lower(cancel),$0
    )
})
}
public func createCjitEntry(channelSizeSat: UInt64, invoiceSat: UInt64, invoiceDescription: String, nodeId: String, channelExpiryWeeks: UInt32, options: CreateCjitOptions?)async throws  -> IcJitEntry {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_create_cjit_entry(FfiConverterUInt64.lower(channelSizeSat),FfiConverterUInt64.lower(invoiceSat),FfiConverterString.lower(invoiceDescription),FfiConverterString.lower(nodeId),FfiConverterUInt32.lower(channelExpiryWeeks),FfiConverterOptionTypeCreateCjitOptions.lower(options)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeICJitEntry.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func createOrder(lspBalanceSat: UInt64, channelExpiryWeeks: UInt32, options: CreateOrderOptions?)async throws  -> IBtOrder {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_create_order(FfiConverterUInt64.lower(lspBalanceSat),FfiConverterUInt32.lower(channelExpiryWeeks),FfiConverterOptionTypeCreateOrderOptions.lower(options)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIBtOrder.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func createWithdrawCallbackUrl(k1: String, callback: String, paymentRequest: String)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeLnurlError.lift) {
    uniffi_bitkitcore_fn_func_create_withdraw_callback_url(
        FfiConverterString.lower(k1),
        FfiConverterString.lower(callback),
        FfiConverterString.lower(paymentRequest),$0
    )
})
}
public func decode(invoice: String)async throws  -> Scanner {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_decode(FfiConverterString.lower(invoice)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeScanner.lift,
            errorHandler: FfiConverterTypeDecodingError.lift
        )
}
public func deleteActivityById(activityId: String)throws  -> Bool {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_delete_activity_by_id(
        FfiConverterString.lower(activityId),$0
    )
})
}
public func deriveBitcoinAddress(mnemonicPhrase: String, derivationPathStr: String?, network: Network?, bip39Passphrase: String?)throws  -> GetAddressResponse {
    return try  FfiConverterTypeGetAddressResponse.lift(try rustCallWithError(FfiConverterTypeAddressError.lift) {
    uniffi_bitkitcore_fn_func_derive_bitcoin_address(
        FfiConverterString.lower(mnemonicPhrase),
        FfiConverterOptionString.lower(derivationPathStr),
        FfiConverterOptionTypeNetwork.lower(network),
        FfiConverterOptionString.lower(bip39Passphrase),$0
    )
})
}
public func deriveBitcoinAddresses(mnemonicPhrase: String, derivationPathStr: String?, network: Network?, bip39Passphrase: String?, isChange: Bool?, startIndex: UInt32?, count: UInt32?)throws  -> GetAddressesResponse {
    return try  FfiConverterTypeGetAddressesResponse.lift(try rustCallWithError(FfiConverterTypeAddressError.lift) {
    uniffi_bitkitcore_fn_func_derive_bitcoin_addresses(
        FfiConverterString.lower(mnemonicPhrase),
        FfiConverterOptionString.lower(derivationPathStr),
        FfiConverterOptionTypeNetwork.lower(network),
        FfiConverterOptionString.lower(bip39Passphrase),
        FfiConverterOptionBool.lower(isChange),
        FfiConverterOptionUInt32.lower(startIndex),
        FfiConverterOptionUInt32.lower(count),$0
    )
})
}
public func derivePrivateKey(mnemonicPhrase: String, derivationPathStr: String?, network: Network?, bip39Passphrase: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeAddressError.lift) {
    uniffi_bitkitcore_fn_func_derive_private_key(
        FfiConverterString.lower(mnemonicPhrase),
        FfiConverterOptionString.lower(derivationPathStr),
        FfiConverterOptionTypeNetwork.lower(network),
        FfiConverterOptionString.lower(bip39Passphrase),$0
    )
})
}
public func estimateOrderFee(lspBalanceSat: UInt64, channelExpiryWeeks: UInt32, options: CreateOrderOptions?)async throws  -> IBtEstimateFeeResponse {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_estimate_order_fee(FfiConverterUInt64.lower(lspBalanceSat),FfiConverterUInt32.lower(channelExpiryWeeks),FfiConverterOptionTypeCreateOrderOptions.lower(options)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIBtEstimateFeeResponse.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func estimateOrderFeeFull(lspBalanceSat: UInt64, channelExpiryWeeks: UInt32, options: CreateOrderOptions?)async throws  -> IBtEstimateFeeResponse2 {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_estimate_order_fee_full(FfiConverterUInt64.lower(lspBalanceSat),FfiConverterUInt32.lower(channelExpiryWeeks),FfiConverterOptionTypeCreateOrderOptions.lower(options)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIBtEstimateFeeResponse2.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func generateMnemonic(wordCount: WordCount?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeAddressError.lift) {
    uniffi_bitkitcore_fn_func_generate_mnemonic(
        FfiConverterOptionTypeWordCount.lower(wordCount),$0
    )
})
}
public func getActivities(filter: ActivityFilter?, txType: PaymentType?, tags: [String]?, search: String?, minDate: UInt64?, maxDate: UInt64?, limit: UInt32?, sortDirection: SortDirection?)throws  -> [Activity] {
    return try  FfiConverterSequenceTypeActivity.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_activities(
        FfiConverterOptionTypeActivityFilter.lower(filter),
        FfiConverterOptionTypePaymentType.lower(txType),
        FfiConverterOptionSequenceString.lower(tags),
        FfiConverterOptionString.lower(search),
        FfiConverterOptionUInt64.lower(minDate),
        FfiConverterOptionUInt64.lower(maxDate),
        FfiConverterOptionUInt32.lower(limit),
        FfiConverterOptionTypeSortDirection.lower(sortDirection),$0
    )
})
}
public func getActivitiesByTag(tag: String, limit: UInt32?, sortDirection: SortDirection?)throws  -> [Activity] {
    return try  FfiConverterSequenceTypeActivity.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_activities_by_tag(
        FfiConverterString.lower(tag),
        FfiConverterOptionUInt32.lower(limit),
        FfiConverterOptionTypeSortDirection.lower(sortDirection),$0
    )
})
}
public func getActivityById(activityId: String)throws  -> Activity? {
    return try  FfiConverterOptionTypeActivity.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_activity_by_id(
        FfiConverterString.lower(activityId),$0
    )
})
}
public func getAllUniqueTags()throws  -> [String] {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_all_unique_tags($0
    )
})
}
public func getCjitEntries(entryIds: [String]?, filter: CJitStateEnum?, refresh: Bool)async throws  -> [IcJitEntry] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_cjit_entries(FfiConverterOptionSequenceString.lower(entryIds),FfiConverterOptionTypeCJitStateEnum.lower(filter),FfiConverterBool.lower(refresh)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeICJitEntry.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func getGift(giftId: String)async throws  -> IGift {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_gift(FfiConverterString.lower(giftId)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIGift.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func getInfo(refresh: Bool?)async throws  -> IBtInfo? {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_info(FfiConverterOptionBool.lower(refresh)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeIBtInfo.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func getLnurlInvoice(address: String, amountSatoshis: UInt64)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_lnurl_invoice(FfiConverterString.lower(address),FfiConverterUInt64.lower(amountSatoshis)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLnurlError.lift
        )
}
public func getMinZeroConfTxFee(orderId: String)async throws  -> IBt0ConfMinTxFeeWindow {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_min_zero_conf_tx_fee(FfiConverterString.lower(orderId)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIBt0ConfMinTxFeeWindow.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func getOrders(orderIds: [String]?, filter: BtOrderState2?, refresh: Bool)async throws  -> [IBtOrder] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_orders(FfiConverterOptionSequenceString.lower(orderIds),FfiConverterOptionTypeBtOrderState2.lower(filter),FfiConverterBool.lower(refresh)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeIBtOrder.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func getPayment(paymentId: String)async throws  -> IBtBolt11Invoice {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_get_payment(FfiConverterString.lower(paymentId)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIBtBolt11Invoice.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func getTags(activityId: String)throws  -> [String] {
    return try  FfiConverterSequenceString.lift(try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_get_tags(
        FfiConverterString.lower(activityId),$0
    )
})
}
public func giftOrder(clientNodeId: String, code: String)async throws  -> IGift {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_gift_order(FfiConverterString.lower(clientNodeId),FfiConverterString.lower(code)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIGift.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func giftPay(invoice: String)async throws  -> IGift {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_gift_pay(FfiConverterString.lower(invoice)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIGift.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func initDb(basePath: String)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeDbError.lift) {
    uniffi_bitkitcore_fn_func_init_db(
        FfiConverterString.lower(basePath),$0
    )
})
}
public func insertActivity(activity: Activity)throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_insert_activity(
        FfiConverterTypeActivity.lower(activity),$0
    )
}
}
public func lnurlAuth(domain: String, k1: String, callback: String, bip32Mnemonic: String, network: Network?, bip39Passphrase: String?)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_lnurl_auth(FfiConverterString.lower(domain),FfiConverterString.lower(k1),FfiConverterString.lower(callback),FfiConverterString.lower(bip32Mnemonic),FfiConverterOptionTypeNetwork.lower(network),FfiConverterOptionString.lower(bip39Passphrase)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLnurlError.lift
        )
}
public func openChannel(orderId: String, connectionString: String)async throws  -> IBtOrder {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_open_channel(FfiConverterString.lower(orderId),FfiConverterString.lower(connectionString)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIBtOrder.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
/**
 * Refresh all active CJIT entries in the database with latest data from the LSP
 */
public func refreshActiveCjitEntries()async throws  -> [IcJitEntry] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_refresh_active_cjit_entries(
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeICJitEntry.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
/**
 * Refresh all active orders in the database with latest data from the LSP
 */
public func refreshActiveOrders()async throws  -> [IBtOrder] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_refresh_active_orders(
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeIBtOrder.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func registerDevice(deviceToken: String, publicKey: String, features: [String], nodeId: String, isoTimestamp: String, signature: String, isProduction: Bool?, customUrl: String?)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_register_device(FfiConverterString.lower(deviceToken),FfiConverterString.lower(publicKey),FfiConverterSequenceString.lower(features),FfiConverterString.lower(nodeId),FfiConverterString.lower(isoTimestamp),FfiConverterString.lower(signature),FfiConverterOptionBool.lower(isProduction),FfiConverterOptionString.lower(customUrl)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func regtestCloseChannel(fundingTxId: String, vout: UInt32, forceCloseAfterS: UInt64?)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_regtest_close_channel(FfiConverterString.lower(fundingTxId),FfiConverterUInt32.lower(vout),FfiConverterOptionUInt64.lower(forceCloseAfterS)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func regtestDeposit(address: String, amountSat: UInt64?)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_regtest_deposit(FfiConverterString.lower(address),FfiConverterOptionUInt64.lower(amountSat)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func regtestGetPayment(paymentId: String)async throws  -> IBtBolt11Invoice {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_regtest_get_payment(FfiConverterString.lower(paymentId)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeIBtBolt11Invoice.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func regtestMine(count: UInt32?)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_regtest_mine(FfiConverterOptionUInt32.lower(count)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_void,
            completeFunc: ffi_bitkitcore_rust_future_complete_void,
            freeFunc: ffi_bitkitcore_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func regtestPay(invoice: String, amountSat: UInt64?)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_regtest_pay(FfiConverterString.lower(invoice),FfiConverterOptionUInt64.lower(amountSat)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func removeTags(activityId: String, tags: [String])throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_remove_tags(
        FfiConverterString.lower(activityId),
        FfiConverterSequenceString.lower(tags),$0
    )
}
}
public func testNotification(deviceToken: String, secretMessage: String, notificationType: String?, customUrl: String?)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_test_notification(FfiConverterString.lower(deviceToken),FfiConverterString.lower(secretMessage),FfiConverterOptionString.lower(notificationType),FfiConverterOptionString.lower(customUrl)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
            completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
            freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func trezorComposeTransaction(outputs: [ComposeOutput], coin: String, callbackUrl: String, requestId: String?, trezorEnvironment: TrezorEnvironment?, push: Bool?, sequence: UInt32?, account: ComposeAccount?, feeLevels: [FeeLevel]?, skipPermutation: Bool?, common: CommonParams?)throws  -> DeepLinkResult {
    return try  FfiConverterTypeDeepLinkResult.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_compose_transaction(
        FfiConverterSequenceTypeComposeOutput.lower(outputs),
        FfiConverterString.lower(coin),
        FfiConverterString.lower(callbackUrl),
        FfiConverterOptionString.lower(requestId),
        FfiConverterOptionTypeTrezorEnvironment.lower(trezorEnvironment),
        FfiConverterOptionBool.lower(push),
        FfiConverterOptionUInt32.lower(sequence),
        FfiConverterOptionTypeComposeAccount.lower(account),
        FfiConverterOptionSequenceTypeFeeLevel.lower(feeLevels),
        FfiConverterOptionBool.lower(skipPermutation),
        FfiConverterOptionTypeCommonParams.lower(common),$0
    )
})
}
public func trezorGetAccountInfo(coin: String, callbackUrl: String, requestId: String?, trezorEnvironment: TrezorEnvironment?, path: String?, descriptor: String?, details: AccountInfoDetails?, tokens: TokenFilter?, page: UInt32?, pageSize: UInt32?, from: UInt32?, to: UInt32?, gap: UInt32?, contractFilter: String?, marker: XrpMarker?, defaultAccountType: DefaultAccountType?, suppressBackupWarning: Bool?, common: CommonParams?)throws  -> DeepLinkResult {
    return try  FfiConverterTypeDeepLinkResult.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_get_account_info(
        FfiConverterString.lower(coin),
        FfiConverterString.lower(callbackUrl),
        FfiConverterOptionString.lower(requestId),
        FfiConverterOptionTypeTrezorEnvironment.lower(trezorEnvironment),
        FfiConverterOptionString.lower(path),
        FfiConverterOptionString.lower(descriptor),
        FfiConverterOptionTypeAccountInfoDetails.lower(details),
        FfiConverterOptionTypeTokenFilter.lower(tokens),
        FfiConverterOptionUInt32.lower(page),
        FfiConverterOptionUInt32.lower(pageSize),
        FfiConverterOptionUInt32.lower(from),
        FfiConverterOptionUInt32.lower(to),
        FfiConverterOptionUInt32.lower(gap),
        FfiConverterOptionString.lower(contractFilter),
        FfiConverterOptionTypeXrpMarker.lower(marker),
        FfiConverterOptionTypeDefaultAccountType.lower(defaultAccountType),
        FfiConverterOptionBool.lower(suppressBackupWarning),
        FfiConverterOptionTypeCommonParams.lower(common),$0
    )
})
}
public func trezorGetAddress(path: String, callbackUrl: String, requestId: String?, trezorEnvironment: TrezorEnvironment?, address: String?, showOnTrezor: Bool?, chunkify: Bool?, useEventListener: Bool?, coin: String?, crossChain: Bool?, multisig: MultisigRedeemScriptType?, scriptType: String?, unlockPath: UnlockPath?, common: CommonParams?)throws  -> DeepLinkResult {
    return try  FfiConverterTypeDeepLinkResult.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_get_address(
        FfiConverterString.lower(path),
        FfiConverterString.lower(callbackUrl),
        FfiConverterOptionString.lower(requestId),
        FfiConverterOptionTypeTrezorEnvironment.lower(trezorEnvironment),
        FfiConverterOptionString.lower(address),
        FfiConverterOptionBool.lower(showOnTrezor),
        FfiConverterOptionBool.lower(chunkify),
        FfiConverterOptionBool.lower(useEventListener),
        FfiConverterOptionString.lower(coin),
        FfiConverterOptionBool.lower(crossChain),
        FfiConverterOptionTypeMultisigRedeemScriptType.lower(multisig),
        FfiConverterOptionString.lower(scriptType),
        FfiConverterOptionTypeUnlockPath.lower(unlockPath),
        FfiConverterOptionTypeCommonParams.lower(common),$0
    )
})
}
public func trezorGetFeatures(callbackUrl: String, requestId: String?, trezorEnvironment: TrezorEnvironment?)throws  -> DeepLinkResult {
    return try  FfiConverterTypeDeepLinkResult.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_get_features(
        FfiConverterString.lower(callbackUrl),
        FfiConverterOptionString.lower(requestId),
        FfiConverterOptionTypeTrezorEnvironment.lower(trezorEnvironment),$0
    )
})
}
public func trezorHandleDeepLink(callbackUrl: String)throws  -> TrezorResponsePayload {
    return try  FfiConverterTypeTrezorResponsePayload.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_handle_deep_link(
        FfiConverterString.lower(callbackUrl),$0
    )
})
}
public func trezorSignMessage(path: String, message: String, callbackUrl: String, requestId: String?, trezorEnvironment: TrezorEnvironment?, coin: String?, hex: Bool?, noScriptType: Bool?, common: CommonParams?)throws  -> DeepLinkResult {
    return try  FfiConverterTypeDeepLinkResult.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_sign_message(
        FfiConverterString.lower(path),
        FfiConverterString.lower(message),
        FfiConverterString.lower(callbackUrl),
        FfiConverterOptionString.lower(requestId),
        FfiConverterOptionTypeTrezorEnvironment.lower(trezorEnvironment),
        FfiConverterOptionString.lower(coin),
        FfiConverterOptionBool.lower(hex),
        FfiConverterOptionBool.lower(noScriptType),
        FfiConverterOptionTypeCommonParams.lower(common),$0
    )
})
}
public func trezorSignTransaction(coin: String, inputs: [TxInputType], outputs: [TxOutputType], callbackUrl: String, requestId: String?, trezorEnvironment: TrezorEnvironment?, refTxs: [RefTransaction]?, paymentRequests: [TxAckPaymentRequest]?, locktime: UInt32?, version: UInt32?, expiry: UInt32?, versionGroupId: UInt32?, overwintered: Bool?, timestamp: UInt32?, branchId: UInt32?, push: Bool?, amountUnit: AmountUnit?, unlockPath: UnlockPath?, serialize: Bool?, chunkify: Bool?, common: CommonParams?)throws  -> DeepLinkResult {
    return try  FfiConverterTypeDeepLinkResult.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_sign_transaction(
        FfiConverterString.lower(coin),
        FfiConverterSequenceTypeTxInputType.lower(inputs),
        FfiConverterSequenceTypeTxOutputType.lower(outputs),
        FfiConverterString.lower(callbackUrl),
        FfiConverterOptionString.lower(requestId),
        FfiConverterOptionTypeTrezorEnvironment.lower(trezorEnvironment),
        FfiConverterOptionSequenceTypeRefTransaction.lower(refTxs),
        FfiConverterOptionSequenceTypeTxAckPaymentRequest.lower(paymentRequests),
        FfiConverterOptionUInt32.lower(locktime),
        FfiConverterOptionUInt32.lower(version),
        FfiConverterOptionUInt32.lower(expiry),
        FfiConverterOptionUInt32.lower(versionGroupId),
        FfiConverterOptionBool.lower(overwintered),
        FfiConverterOptionUInt32.lower(timestamp),
        FfiConverterOptionUInt32.lower(branchId),
        FfiConverterOptionBool.lower(push),
        FfiConverterOptionTypeAmountUnit.lower(amountUnit),
        FfiConverterOptionTypeUnlockPath.lower(unlockPath),
        FfiConverterOptionBool.lower(serialize),
        FfiConverterOptionBool.lower(chunkify),
        FfiConverterOptionTypeCommonParams.lower(common),$0
    )
})
}
public func trezorVerifyMessage(address: String, signature: String, message: String, coin: String, callbackUrl: String, requestId: String?, trezorEnvironment: TrezorEnvironment?, hex: Bool?, common: CommonParams?)throws  -> DeepLinkResult {
    return try  FfiConverterTypeDeepLinkResult.lift(try rustCallWithError(FfiConverterTypeTrezorConnectError.lift) {
    uniffi_bitkitcore_fn_func_trezor_verify_message(
        FfiConverterString.lower(address),
        FfiConverterString.lower(signature),
        FfiConverterString.lower(message),
        FfiConverterString.lower(coin),
        FfiConverterString.lower(callbackUrl),
        FfiConverterOptionString.lower(requestId),
        FfiConverterOptionTypeTrezorEnvironment.lower(trezorEnvironment),
        FfiConverterOptionBool.lower(hex),
        FfiConverterOptionTypeCommonParams.lower(common),$0
    )
})
}
public func updateActivity(activityId: String, activity: Activity)throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_update_activity(
        FfiConverterString.lower(activityId),
        FfiConverterTypeActivity.lower(activity),$0
    )
}
}
public func updateBlocktankUrl(newUrl: String)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_bitkitcore_fn_func_update_blocktank_url(FfiConverterString.lower(newUrl)
                )
            },
            pollFunc: ffi_bitkitcore_rust_future_poll_void,
            completeFunc: ffi_bitkitcore_rust_future_complete_void,
            freeFunc: ffi_bitkitcore_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeBlocktankError.lift
        )
}
public func upsertActivity(activity: Activity)throws  {try rustCallWithError(FfiConverterTypeActivityError.lift) {
    uniffi_bitkitcore_fn_func_upsert_activity(
        FfiConverterTypeActivity.lower(activity),$0
    )
}
}
public func validateBitcoinAddress(address: String)throws  -> ValidationResult {
    return try  FfiConverterTypeValidationResult.lift(try rustCallWithError(FfiConverterTypeAddressError.lift) {
    uniffi_bitkitcore_fn_func_validate_bitcoin_address(
        FfiConverterString.lower(address),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_bitkitcore_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_bitkitcore_checksum_func_add_tags() != 63739) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_create_channel_request_url() != 9305) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_create_cjit_entry() != 51504) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_create_order() != 33461) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_create_withdraw_callback_url() != 39350) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_decode() != 28437) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_delete_activity_by_id() != 29867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_derive_bitcoin_address() != 35090) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_derive_bitcoin_addresses() != 34371) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_derive_private_key() != 25155) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_estimate_order_fee() != 9548) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_estimate_order_fee_full() != 13361) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_generate_mnemonic() != 19292) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_activities() != 21347) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_activities_by_tag() != 52823) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_activity_by_id() != 44227) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_all_unique_tags() != 25431) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_cjit_entries() != 29342) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_gift() != 386) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_info() != 43607) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_lnurl_invoice() != 5475) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_min_zero_conf_tx_fee() != 6427) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_orders() != 47460) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_payment() != 29170) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_tags() != 11308) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_gift_order() != 22040) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_gift_pay() != 22142) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_init_db() != 9643) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_insert_activity() != 1510) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_lnurl_auth() != 58593) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_open_channel() != 21402) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_refresh_active_cjit_entries() != 5324) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_refresh_active_orders() != 50661) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_register_device() != 14576) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_regtest_close_channel() != 48652) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_regtest_deposit() != 30356) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_regtest_get_payment() != 56623) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_regtest_mine() != 58685) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_regtest_pay() != 48342) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_remove_tags() != 58873) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_test_notification() != 32857) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_compose_transaction() != 25990) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_get_account_info() != 14813) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_get_address() != 42202) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_get_features() != 52582) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_handle_deep_link() != 32721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_sign_message() != 18023) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_sign_transaction() != 59932) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_trezor_verify_message() != 44040) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_update_activity() != 42510) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_update_blocktank_url() != 52161) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_upsert_activity() != 32175) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_validate_bitcoin_address() != 56003) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all