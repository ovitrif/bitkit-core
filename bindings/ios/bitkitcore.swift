// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(bitkitcoreFFI)
import bitkitcoreFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_bitkitcore_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_bitkitcore_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
                throw CancellationError()

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct LightningInvoice {
    public var paymentHash: Data
    public var amountSatoshis: UInt64
    public var timestampSeconds: UInt64
    public var expirySeconds: UInt64
    public var isExpired: Bool
    public var description: String?
    public var networkType: NetworkType
    public var payeeNodeId: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(paymentHash: Data, amountSatoshis: UInt64, timestampSeconds: UInt64, expirySeconds: UInt64, isExpired: Bool, description: String?, networkType: NetworkType, payeeNodeId: Data?) {
        self.paymentHash = paymentHash
        self.amountSatoshis = amountSatoshis
        self.timestampSeconds = timestampSeconds
        self.expirySeconds = expirySeconds
        self.isExpired = isExpired
        self.description = description
        self.networkType = networkType
        self.payeeNodeId = payeeNodeId
    }
}


extension LightningInvoice: Equatable, Hashable {
    public static func ==(lhs: LightningInvoice, rhs: LightningInvoice) -> Bool {
        if lhs.paymentHash != rhs.paymentHash {
            return false
        }
        if lhs.amountSatoshis != rhs.amountSatoshis {
            return false
        }
        if lhs.timestampSeconds != rhs.timestampSeconds {
            return false
        }
        if lhs.expirySeconds != rhs.expirySeconds {
            return false
        }
        if lhs.isExpired != rhs.isExpired {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.networkType != rhs.networkType {
            return false
        }
        if lhs.payeeNodeId != rhs.payeeNodeId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paymentHash)
        hasher.combine(amountSatoshis)
        hasher.combine(timestampSeconds)
        hasher.combine(expirySeconds)
        hasher.combine(isExpired)
        hasher.combine(description)
        hasher.combine(networkType)
        hasher.combine(payeeNodeId)
    }
}


public struct FfiConverterTypeLightningInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LightningInvoice {
        return try LightningInvoice(
            paymentHash: FfiConverterData.read(from: &buf), 
            amountSatoshis: FfiConverterUInt64.read(from: &buf), 
            timestampSeconds: FfiConverterUInt64.read(from: &buf), 
            expirySeconds: FfiConverterUInt64.read(from: &buf), 
            isExpired: FfiConverterBool.read(from: &buf), 
            description: FfiConverterOptionString.read(from: &buf), 
            networkType: FfiConverterTypeNetworkType.read(from: &buf), 
            payeeNodeId: FfiConverterOptionData.read(from: &buf)
        )
    }

    public static func write(_ value: LightningInvoice, into buf: inout [UInt8]) {
        FfiConverterData.write(value.paymentHash, into: &buf)
        FfiConverterUInt64.write(value.amountSatoshis, into: &buf)
        FfiConverterUInt64.write(value.timestampSeconds, into: &buf)
        FfiConverterUInt64.write(value.expirySeconds, into: &buf)
        FfiConverterBool.write(value.isExpired, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterTypeNetworkType.write(value.networkType, into: &buf)
        FfiConverterOptionData.write(value.payeeNodeId, into: &buf)
    }
}


public func FfiConverterTypeLightningInvoice_lift(_ buf: RustBuffer) throws -> LightningInvoice {
    return try FfiConverterTypeLightningInvoice.lift(buf)
}

public func FfiConverterTypeLightningInvoice_lower(_ value: LightningInvoice) -> RustBuffer {
    return FfiConverterTypeLightningInvoice.lower(value)
}


public struct LnurlAddressData {
    public var uri: String
    public var domain: String
    public var username: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, domain: String, username: String) {
        self.uri = uri
        self.domain = domain
        self.username = username
    }
}


extension LnurlAddressData: Equatable, Hashable {
    public static func ==(lhs: LnurlAddressData, rhs: LnurlAddressData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.domain != rhs.domain {
            return false
        }
        if lhs.username != rhs.username {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(domain)
        hasher.combine(username)
    }
}


public struct FfiConverterTypeLnurlAddressData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlAddressData {
        return try LnurlAddressData(
            uri: FfiConverterString.read(from: &buf), 
            domain: FfiConverterString.read(from: &buf), 
            username: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlAddressData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.domain, into: &buf)
        FfiConverterString.write(value.username, into: &buf)
    }
}


public func FfiConverterTypeLnurlAddressData_lift(_ buf: RustBuffer) throws -> LnurlAddressData {
    return try FfiConverterTypeLnurlAddressData.lift(buf)
}

public func FfiConverterTypeLnurlAddressData_lower(_ value: LnurlAddressData) -> RustBuffer {
    return FfiConverterTypeLnurlAddressData.lower(value)
}


public struct LnurlAuthData {
    public var uri: String
    public var tag: String
    public var k1: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, tag: String, k1: String) {
        self.uri = uri
        self.tag = tag
        self.k1 = k1
    }
}


extension LnurlAuthData: Equatable, Hashable {
    public static func ==(lhs: LnurlAuthData, rhs: LnurlAuthData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(tag)
        hasher.combine(k1)
    }
}


public struct FfiConverterTypeLnurlAuthData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlAuthData {
        return try LnurlAuthData(
            uri: FfiConverterString.read(from: &buf), 
            tag: FfiConverterString.read(from: &buf), 
            k1: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlAuthData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
    }
}


public func FfiConverterTypeLnurlAuthData_lift(_ buf: RustBuffer) throws -> LnurlAuthData {
    return try FfiConverterTypeLnurlAuthData.lift(buf)
}

public func FfiConverterTypeLnurlAuthData_lower(_ value: LnurlAuthData) -> RustBuffer {
    return FfiConverterTypeLnurlAuthData.lower(value)
}


public struct LnurlChannelData {
    public var uri: String
    public var callback: String
    public var k1: String
    public var tag: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, k1: String, tag: String) {
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.tag = tag
    }
}


extension LnurlChannelData: Equatable, Hashable {
    public static func ==(lhs: LnurlChannelData, rhs: LnurlChannelData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(k1)
        hasher.combine(tag)
    }
}


public struct FfiConverterTypeLnurlChannelData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlChannelData {
        return try LnurlChannelData(
            uri: FfiConverterString.read(from: &buf), 
            callback: FfiConverterString.read(from: &buf), 
            k1: FfiConverterString.read(from: &buf), 
            tag: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlChannelData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
    }
}


public func FfiConverterTypeLnurlChannelData_lift(_ buf: RustBuffer) throws -> LnurlChannelData {
    return try FfiConverterTypeLnurlChannelData.lift(buf)
}

public func FfiConverterTypeLnurlChannelData_lower(_ value: LnurlChannelData) -> RustBuffer {
    return FfiConverterTypeLnurlChannelData.lower(value)
}


public struct LnurlPayData {
    public var uri: String
    public var callback: String
    public var minSendable: UInt64
    public var maxSendable: UInt64
    public var metadataStr: String
    public var commentAllowed: UInt32?
    public var allowsNostr: Bool
    public var nostrPubkey: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, minSendable: UInt64, maxSendable: UInt64, metadataStr: String, commentAllowed: UInt32?, allowsNostr: Bool, nostrPubkey: Data?) {
        self.uri = uri
        self.callback = callback
        self.minSendable = minSendable
        self.maxSendable = maxSendable
        self.metadataStr = metadataStr
        self.commentAllowed = commentAllowed
        self.allowsNostr = allowsNostr
        self.nostrPubkey = nostrPubkey
    }
}


extension LnurlPayData: Equatable, Hashable {
    public static func ==(lhs: LnurlPayData, rhs: LnurlPayData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.minSendable != rhs.minSendable {
            return false
        }
        if lhs.maxSendable != rhs.maxSendable {
            return false
        }
        if lhs.metadataStr != rhs.metadataStr {
            return false
        }
        if lhs.commentAllowed != rhs.commentAllowed {
            return false
        }
        if lhs.allowsNostr != rhs.allowsNostr {
            return false
        }
        if lhs.nostrPubkey != rhs.nostrPubkey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(minSendable)
        hasher.combine(maxSendable)
        hasher.combine(metadataStr)
        hasher.combine(commentAllowed)
        hasher.combine(allowsNostr)
        hasher.combine(nostrPubkey)
    }
}


public struct FfiConverterTypeLnurlPayData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlPayData {
        return try LnurlPayData(
            uri: FfiConverterString.read(from: &buf), 
            callback: FfiConverterString.read(from: &buf), 
            minSendable: FfiConverterUInt64.read(from: &buf), 
            maxSendable: FfiConverterUInt64.read(from: &buf), 
            metadataStr: FfiConverterString.read(from: &buf), 
            commentAllowed: FfiConverterOptionUInt32.read(from: &buf), 
            allowsNostr: FfiConverterBool.read(from: &buf), 
            nostrPubkey: FfiConverterOptionData.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlPayData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterUInt64.write(value.minSendable, into: &buf)
        FfiConverterUInt64.write(value.maxSendable, into: &buf)
        FfiConverterString.write(value.metadataStr, into: &buf)
        FfiConverterOptionUInt32.write(value.commentAllowed, into: &buf)
        FfiConverterBool.write(value.allowsNostr, into: &buf)
        FfiConverterOptionData.write(value.nostrPubkey, into: &buf)
    }
}


public func FfiConverterTypeLnurlPayData_lift(_ buf: RustBuffer) throws -> LnurlPayData {
    return try FfiConverterTypeLnurlPayData.lift(buf)
}

public func FfiConverterTypeLnurlPayData_lower(_ value: LnurlPayData) -> RustBuffer {
    return FfiConverterTypeLnurlPayData.lower(value)
}


public struct LnurlWithdrawData {
    public var uri: String
    public var callback: String
    public var k1: String
    public var defaultDescription: String
    public var minWithdrawable: UInt64?
    public var maxWithdrawable: UInt64
    public var tag: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, callback: String, k1: String, defaultDescription: String, minWithdrawable: UInt64?, maxWithdrawable: UInt64, tag: String) {
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.defaultDescription = defaultDescription
        self.minWithdrawable = minWithdrawable
        self.maxWithdrawable = maxWithdrawable
        self.tag = tag
    }
}


extension LnurlWithdrawData: Equatable, Hashable {
    public static func ==(lhs: LnurlWithdrawData, rhs: LnurlWithdrawData) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.callback != rhs.callback {
            return false
        }
        if lhs.k1 != rhs.k1 {
            return false
        }
        if lhs.defaultDescription != rhs.defaultDescription {
            return false
        }
        if lhs.minWithdrawable != rhs.minWithdrawable {
            return false
        }
        if lhs.maxWithdrawable != rhs.maxWithdrawable {
            return false
        }
        if lhs.tag != rhs.tag {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(callback)
        hasher.combine(k1)
        hasher.combine(defaultDescription)
        hasher.combine(minWithdrawable)
        hasher.combine(maxWithdrawable)
        hasher.combine(tag)
    }
}


public struct FfiConverterTypeLnurlWithdrawData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlWithdrawData {
        return try LnurlWithdrawData(
            uri: FfiConverterString.read(from: &buf), 
            callback: FfiConverterString.read(from: &buf), 
            k1: FfiConverterString.read(from: &buf), 
            defaultDescription: FfiConverterString.read(from: &buf), 
            minWithdrawable: FfiConverterOptionUInt64.read(from: &buf), 
            maxWithdrawable: FfiConverterUInt64.read(from: &buf), 
            tag: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: LnurlWithdrawData, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.callback, into: &buf)
        FfiConverterString.write(value.k1, into: &buf)
        FfiConverterString.write(value.defaultDescription, into: &buf)
        FfiConverterOptionUInt64.write(value.minWithdrawable, into: &buf)
        FfiConverterUInt64.write(value.maxWithdrawable, into: &buf)
        FfiConverterString.write(value.tag, into: &buf)
    }
}


public func FfiConverterTypeLnurlWithdrawData_lift(_ buf: RustBuffer) throws -> LnurlWithdrawData {
    return try FfiConverterTypeLnurlWithdrawData.lift(buf)
}

public func FfiConverterTypeLnurlWithdrawData_lower(_ value: LnurlWithdrawData) -> RustBuffer {
    return FfiConverterTypeLnurlWithdrawData.lower(value)
}


public struct OnChainInvoice {
    public var address: String
    public var amountSatoshis: UInt64
    public var label: String?
    public var message: String?
    public var params: [String: String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, amountSatoshis: UInt64, label: String?, message: String?, params: [String: String]?) {
        self.address = address
        self.amountSatoshis = amountSatoshis
        self.label = label
        self.message = message
        self.params = params
    }
}


extension OnChainInvoice: Equatable, Hashable {
    public static func ==(lhs: OnChainInvoice, rhs: OnChainInvoice) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.amountSatoshis != rhs.amountSatoshis {
            return false
        }
        if lhs.label != rhs.label {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.params != rhs.params {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(amountSatoshis)
        hasher.combine(label)
        hasher.combine(message)
        hasher.combine(params)
    }
}


public struct FfiConverterTypeOnChainInvoice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OnChainInvoice {
        return try OnChainInvoice(
            address: FfiConverterString.read(from: &buf), 
            amountSatoshis: FfiConverterUInt64.read(from: &buf), 
            label: FfiConverterOptionString.read(from: &buf), 
            message: FfiConverterOptionString.read(from: &buf), 
            params: FfiConverterOptionDictionaryStringString.read(from: &buf)
        )
    }

    public static func write(_ value: OnChainInvoice, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterUInt64.write(value.amountSatoshis, into: &buf)
        FfiConverterOptionString.write(value.label, into: &buf)
        FfiConverterOptionString.write(value.message, into: &buf)
        FfiConverterOptionDictionaryStringString.write(value.params, into: &buf)
    }
}


public func FfiConverterTypeOnChainInvoice_lift(_ buf: RustBuffer) throws -> OnChainInvoice {
    return try FfiConverterTypeOnChainInvoice.lift(buf)
}

public func FfiConverterTypeOnChainInvoice_lower(_ value: OnChainInvoice) -> RustBuffer {
    return FfiConverterTypeOnChainInvoice.lower(value)
}


public struct PubkyAuth {
    public var data: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: String) {
        self.data = data
    }
}


extension PubkyAuth: Equatable, Hashable {
    public static func ==(lhs: PubkyAuth, rhs: PubkyAuth) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
    }
}


public struct FfiConverterTypePubkyAuth: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAuth {
        return try PubkyAuth(
            data: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAuth, into buf: inout [UInt8]) {
        FfiConverterString.write(value.data, into: &buf)
    }
}


public func FfiConverterTypePubkyAuth_lift(_ buf: RustBuffer) throws -> PubkyAuth {
    return try FfiConverterTypePubkyAuth.lift(buf)
}

public func FfiConverterTypePubkyAuth_lower(_ value: PubkyAuth) -> RustBuffer {
    return FfiConverterTypePubkyAuth.lower(value)
}


public struct ValidationResult {
    public var address: String
    public var network: NetworkType
    public var addressType: AddressType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, network: NetworkType, addressType: AddressType) {
        self.address = address
        self.network = network
        self.addressType = addressType
    }
}


extension ValidationResult: Equatable, Hashable {
    public static func ==(lhs: ValidationResult, rhs: ValidationResult) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.addressType != rhs.addressType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(network)
        hasher.combine(addressType)
    }
}


public struct FfiConverterTypeValidationResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ValidationResult {
        return try ValidationResult(
            address: FfiConverterString.read(from: &buf), 
            network: FfiConverterTypeNetworkType.read(from: &buf), 
            addressType: FfiConverterTypeAddressType.read(from: &buf)
        )
    }

    public static func write(_ value: ValidationResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterTypeNetworkType.write(value.network, into: &buf)
        FfiConverterTypeAddressType.write(value.addressType, into: &buf)
    }
}


public func FfiConverterTypeValidationResult_lift(_ buf: RustBuffer) throws -> ValidationResult {
    return try FfiConverterTypeValidationResult.lift(buf)
}

public func FfiConverterTypeValidationResult_lower(_ value: ValidationResult) -> RustBuffer {
    return FfiConverterTypeValidationResult.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AddressError {
    
    case invalidAddress
    case invalidNetwork
}

public struct FfiConverterTypeAddressError: FfiConverterRustBuffer {
    typealias SwiftType = AddressError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .invalidAddress
        
        case 2: return .invalidNetwork
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .invalidAddress:
            writeInt(&buf, Int32(1))
        
        
        case .invalidNetwork:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeAddressError_lift(_ buf: RustBuffer) throws -> AddressError {
    return try FfiConverterTypeAddressError.lift(buf)
}

public func FfiConverterTypeAddressError_lower(_ value: AddressError) -> RustBuffer {
    return FfiConverterTypeAddressError.lower(value)
}


extension AddressError: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AddressType {
    
    case p2pkh
    case p2sh
    case p2wpkh
    case p2wsh
    case p2tr
    case unknown
}

public struct FfiConverterTypeAddressType: FfiConverterRustBuffer {
    typealias SwiftType = AddressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .p2pkh
        
        case 2: return .p2sh
        
        case 3: return .p2wpkh
        
        case 4: return .p2wsh
        
        case 5: return .p2tr
        
        case 6: return .unknown
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .p2pkh:
            writeInt(&buf, Int32(1))
        
        
        case .p2sh:
            writeInt(&buf, Int32(2))
        
        
        case .p2wpkh:
            writeInt(&buf, Int32(3))
        
        
        case .p2wsh:
            writeInt(&buf, Int32(4))
        
        
        case .p2tr:
            writeInt(&buf, Int32(5))
        
        
        case .unknown:
            writeInt(&buf, Int32(6))
        
        }
    }
}


public func FfiConverterTypeAddressType_lift(_ buf: RustBuffer) throws -> AddressType {
    return try FfiConverterTypeAddressType.lift(buf)
}

public func FfiConverterTypeAddressType_lower(_ value: AddressType) -> RustBuffer {
    return FfiConverterTypeAddressType.lower(value)
}


extension AddressType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum DecodingError {
    
    case invalidFormat
    case invalidNetwork
    case invalidAmount
    case invalidLnurlPayAmount(amountSatoshis: UInt64, min: UInt64, max: UInt64)
    case invalidTimestamp
    case invalidChecksum
    case invalidResponse
    case unsupportedType
    case invalidAddress
    case requestFailed
    case clientCreationFailed
    case invoiceCreationFailed(message: String)
}

public struct FfiConverterTypeDecodingError: FfiConverterRustBuffer {
    typealias SwiftType = DecodingError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecodingError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .invalidFormat
        
        case 2: return .invalidNetwork
        
        case 3: return .invalidAmount
        
        case 4: return .invalidLnurlPayAmount(
            amountSatoshis: try FfiConverterUInt64.read(from: &buf), 
            min: try FfiConverterUInt64.read(from: &buf), 
            max: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 5: return .invalidTimestamp
        
        case 6: return .invalidChecksum
        
        case 7: return .invalidResponse
        
        case 8: return .unsupportedType
        
        case 9: return .invalidAddress
        
        case 10: return .requestFailed
        
        case 11: return .clientCreationFailed
        
        case 12: return .invoiceCreationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DecodingError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .invalidFormat:
            writeInt(&buf, Int32(1))
        
        
        case .invalidNetwork:
            writeInt(&buf, Int32(2))
        
        
        case .invalidAmount:
            writeInt(&buf, Int32(3))
        
        
        case let .invalidLnurlPayAmount(amountSatoshis,min,max):
            writeInt(&buf, Int32(4))
            FfiConverterUInt64.write(amountSatoshis, into: &buf)
            FfiConverterUInt64.write(min, into: &buf)
            FfiConverterUInt64.write(max, into: &buf)
            
        
        case .invalidTimestamp:
            writeInt(&buf, Int32(5))
        
        
        case .invalidChecksum:
            writeInt(&buf, Int32(6))
        
        
        case .invalidResponse:
            writeInt(&buf, Int32(7))
        
        
        case .unsupportedType:
            writeInt(&buf, Int32(8))
        
        
        case .invalidAddress:
            writeInt(&buf, Int32(9))
        
        
        case .requestFailed:
            writeInt(&buf, Int32(10))
        
        
        case .clientCreationFailed:
            writeInt(&buf, Int32(11))
        
        
        case let .invoiceCreationFailed(message):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(message, into: &buf)
            
        }
    }
}


public func FfiConverterTypeDecodingError_lift(_ buf: RustBuffer) throws -> DecodingError {
    return try FfiConverterTypeDecodingError.lift(buf)
}

public func FfiConverterTypeDecodingError_lower(_ value: DecodingError) -> RustBuffer {
    return FfiConverterTypeDecodingError.lower(value)
}


extension DecodingError: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LnurlError {
    
    case invalidAddress
    case clientCreationFailed
    case requestFailed
    case invalidResponse
    case invalidAmount(amountSatoshis: UInt64, min: UInt64, max: UInt64)
    case invoiceCreationFailed(message: String)
}

public struct FfiConverterTypeLnurlError: FfiConverterRustBuffer {
    typealias SwiftType = LnurlError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LnurlError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .invalidAddress
        
        case 2: return .clientCreationFailed
        
        case 3: return .requestFailed
        
        case 4: return .invalidResponse
        
        case 5: return .invalidAmount(
            amountSatoshis: try FfiConverterUInt64.read(from: &buf), 
            min: try FfiConverterUInt64.read(from: &buf), 
            max: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 6: return .invoiceCreationFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LnurlError, into buf: inout [UInt8]) {
        switch value {
        
        
        case .invalidAddress:
            writeInt(&buf, Int32(1))
        
        
        case .clientCreationFailed:
            writeInt(&buf, Int32(2))
        
        
        case .requestFailed:
            writeInt(&buf, Int32(3))
        
        
        case .invalidResponse:
            writeInt(&buf, Int32(4))
        
        
        case let .invalidAmount(amountSatoshis,min,max):
            writeInt(&buf, Int32(5))
            FfiConverterUInt64.write(amountSatoshis, into: &buf)
            FfiConverterUInt64.write(min, into: &buf)
            FfiConverterUInt64.write(max, into: &buf)
            
        
        case let .invoiceCreationFailed(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
            
        }
    }
}


public func FfiConverterTypeLnurlError_lift(_ buf: RustBuffer) throws -> LnurlError {
    return try FfiConverterTypeLnurlError.lift(buf)
}

public func FfiConverterTypeLnurlError_lower(_ value: LnurlError) -> RustBuffer {
    return FfiConverterTypeLnurlError.lower(value)
}


extension LnurlError: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum NetworkType {
    
    case bitcoin
    case testnet
    case regtest
    case signet
}

public struct FfiConverterTypeNetworkType: FfiConverterRustBuffer {
    typealias SwiftType = NetworkType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NetworkType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .testnet
        
        case 3: return .regtest
        
        case 4: return .signet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NetworkType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .regtest:
            writeInt(&buf, Int32(3))
        
        
        case .signet:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeNetworkType_lift(_ buf: RustBuffer) throws -> NetworkType {
    return try FfiConverterTypeNetworkType.lift(buf)
}

public func FfiConverterTypeNetworkType_lower(_ value: NetworkType) -> RustBuffer {
    return FfiConverterTypeNetworkType.lower(value)
}


extension NetworkType: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Scanner {
    
    case onChain(invoice: OnChainInvoice)
    case lightning(invoice: LightningInvoice)
    case pubkyAuth(auth: PubkyAuth)
    case lnurlChannel(data: LnurlChannelData)
    case lnurlAuth(data: LnurlAuthData)
    case lnurlWithdraw(data: LnurlWithdrawData)
    case lnurlAddress(data: LnurlAddressData)
    case lnurlPay(data: LnurlPayData)
    case nodeId(url: String, network: NetworkType)
    case treasureHunt(chestId: String)
    case orangeTicket(ticketId: String)
}

public struct FfiConverterTypeScanner: FfiConverterRustBuffer {
    typealias SwiftType = Scanner

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Scanner {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .onChain(
            invoice: try FfiConverterTypeOnChainInvoice.read(from: &buf)
        )
        
        case 2: return .lightning(
            invoice: try FfiConverterTypeLightningInvoice.read(from: &buf)
        )
        
        case 3: return .pubkyAuth(
            auth: try FfiConverterTypePubkyAuth.read(from: &buf)
        )
        
        case 4: return .lnurlChannel(
            data: try FfiConverterTypeLnurlChannelData.read(from: &buf)
        )
        
        case 5: return .lnurlAuth(
            data: try FfiConverterTypeLnurlAuthData.read(from: &buf)
        )
        
        case 6: return .lnurlWithdraw(
            data: try FfiConverterTypeLnurlWithdrawData.read(from: &buf)
        )
        
        case 7: return .lnurlAddress(
            data: try FfiConverterTypeLnurlAddressData.read(from: &buf)
        )
        
        case 8: return .lnurlPay(
            data: try FfiConverterTypeLnurlPayData.read(from: &buf)
        )
        
        case 9: return .nodeId(
            url: try FfiConverterString.read(from: &buf), 
            network: try FfiConverterTypeNetworkType.read(from: &buf)
        )
        
        case 10: return .treasureHunt(
            chestId: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .orangeTicket(
            ticketId: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Scanner, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .onChain(invoice):
            writeInt(&buf, Int32(1))
            FfiConverterTypeOnChainInvoice.write(invoice, into: &buf)
            
        
        case let .lightning(invoice):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLightningInvoice.write(invoice, into: &buf)
            
        
        case let .pubkyAuth(auth):
            writeInt(&buf, Int32(3))
            FfiConverterTypePubkyAuth.write(auth, into: &buf)
            
        
        case let .lnurlChannel(data):
            writeInt(&buf, Int32(4))
            FfiConverterTypeLnurlChannelData.write(data, into: &buf)
            
        
        case let .lnurlAuth(data):
            writeInt(&buf, Int32(5))
            FfiConverterTypeLnurlAuthData.write(data, into: &buf)
            
        
        case let .lnurlWithdraw(data):
            writeInt(&buf, Int32(6))
            FfiConverterTypeLnurlWithdrawData.write(data, into: &buf)
            
        
        case let .lnurlAddress(data):
            writeInt(&buf, Int32(7))
            FfiConverterTypeLnurlAddressData.write(data, into: &buf)
            
        
        case let .lnurlPay(data):
            writeInt(&buf, Int32(8))
            FfiConverterTypeLnurlPayData.write(data, into: &buf)
            
        
        case let .nodeId(url,network):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(url, into: &buf)
            FfiConverterTypeNetworkType.write(network, into: &buf)
            
        
        case let .treasureHunt(chestId):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(chestId, into: &buf)
            
        
        case let .orangeTicket(ticketId):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(ticketId, into: &buf)
            
        }
    }
}


public func FfiConverterTypeScanner_lift(_ buf: RustBuffer) throws -> Scanner {
    return try FfiConverterTypeScanner.lift(buf)
}

public func FfiConverterTypeScanner_lower(_ value: Scanner) -> RustBuffer {
    return FfiConverterTypeScanner.lower(value)
}


extension Scanner: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Unit {
    
    case bitcoin
    case satoshi
    case milliSatoshi
}

public struct FfiConverterTypeUnit: FfiConverterRustBuffer {
    typealias SwiftType = Unit

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Unit {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .satoshi
        
        case 3: return .milliSatoshi
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Unit, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .satoshi:
            writeInt(&buf, Int32(2))
        
        
        case .milliSatoshi:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeUnit_lift(_ buf: RustBuffer) throws -> Unit {
    return try FfiConverterTypeUnit.lift(buf)
}

public func FfiConverterTypeUnit_lower(_ value: Unit) -> RustBuffer {
    return FfiConverterTypeUnit.lower(value)
}


extension Unit: Equatable, Hashable {}



fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDictionaryStringString: FfiConverterRustBuffer {
    typealias SwiftType = [String: String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UnsafeMutableRawPointer,
    pollFunc: (UnsafeMutableRawPointer, UnsafeMutableRawPointer) -> (),
    completeFunc: (UnsafeMutableRawPointer, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UnsafeMutableRawPointer) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(rustFuture, ContinuationHolder($0).toOpaque())
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(ptr: UnsafeMutableRawPointer, pollResult: Int8) {
    ContinuationHolder.fromOpaque(ptr).resume(pollResult)
}

// Wraps UnsafeContinuation in a class so that we can use reference counting when passing it across
// the FFI
fileprivate class ContinuationHolder {
    let continuation: UnsafeContinuation<Int8, Never>

    init(_ continuation: UnsafeContinuation<Int8, Never>) {
        self.continuation = continuation
    }

    func resume(_ pollResult: Int8) {
        self.continuation.resume(returning: pollResult)
    }

    func toOpaque() -> UnsafeMutableRawPointer {
        return Unmanaged<ContinuationHolder>.passRetained(self).toOpaque()
    }

    static func fromOpaque(_ ptr: UnsafeRawPointer) -> ContinuationHolder {
        return Unmanaged<ContinuationHolder>.fromOpaque(ptr).takeRetainedValue()
    }
}

fileprivate func uniffiInitContinuationCallback() {
    ffi_bitkitcore_rust_future_continuation_callback_set(uniffiFutureContinuationCallback)
}

public func decode(invoice: String) async throws -> Scanner {
    return try  await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bitkitcore_fn_func_decode(
                FfiConverterString.lower(invoice)
            )
        },
        pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
        completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
        freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
        liftFunc: FfiConverterTypeScanner.lift,
        errorHandler: FfiConverterTypeDecodingError.lift
    )
}



public func getLnurlInvoice(address: String, amountSatoshis: UInt64) async throws -> String {
    return try  await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_bitkitcore_fn_func_get_lnurl_invoice(
                FfiConverterString.lower(address),
                FfiConverterUInt64.lower(amountSatoshis)
            )
        },
        pollFunc: ffi_bitkitcore_rust_future_poll_rust_buffer,
        completeFunc: ffi_bitkitcore_rust_future_complete_rust_buffer,
        freeFunc: ffi_bitkitcore_rust_future_free_rust_buffer,
        liftFunc: FfiConverterString.lift,
        errorHandler: FfiConverterTypeLnurlError.lift
    )
}



public func validateBitcoinAddress(address: String) throws -> ValidationResult {
    return try  FfiConverterTypeValidationResult.lift(
        try rustCallWithError(FfiConverterTypeAddressError.lift) {
    uniffi_bitkitcore_fn_func_validate_bitcoin_address(
        FfiConverterString.lower(address),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_bitkitcore_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_bitkitcore_checksum_func_decode() != 21596) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_get_lnurl_invoice() != 35835) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_bitkitcore_checksum_func_validate_bitcoin_address() != 30728) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiInitContinuationCallback()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}