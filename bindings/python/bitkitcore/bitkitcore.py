# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import asyncio
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_bitkitcore_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_bitkitcore_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_bitkitcore_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)

class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("bitkitcore")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 24
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_bitkitcore_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_bitkitcore_checksum_func_decode() != 21596:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice() != 35835:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address() != 30728:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_bitkitcore_fn_func_decode.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_bitkitcore_fn_func_decode.restype = ctypes.c_void_p
_UniffiLib.uniffi_bitkitcore_fn_func_get_lnurl_invoice.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_bitkitcore_fn_func_get_lnurl_invoice.restype = ctypes.c_void_p
_UniffiLib.uniffi_bitkitcore_fn_func_validate_bitcoin_address.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bitkitcore_fn_func_validate_bitcoin_address.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_free.restype = None
_UniffiLib.ffi_bitkitcore_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rust_future_continuation_callback_set.argtypes = (
    _UNIFFI_FUTURE_CONTINUATION_T,
)
_UniffiLib.ffi_bitkitcore_rust_future_continuation_callback_set.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_bitkitcore_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i8.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_bitkitcore_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_bitkitcore_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i16.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_bitkitcore_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_bitkitcore_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_bitkitcore_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_u64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_u64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_bitkitcore_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_i64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_i64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_bitkitcore_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_f32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_f32.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_bitkitcore_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_f64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_f64.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_bitkitcore_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_pointer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_bitkitcore_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bitkitcore_rust_future_poll_void.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_cancel_void.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bitkitcore_rust_future_free_void.restype = None
_UniffiLib.ffi_bitkitcore_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bitkitcore_rust_future_complete_void.restype = None
_UniffiLib.uniffi_bitkitcore_checksum_func_decode.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_decode.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_get_lnurl_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address.argtypes = (
)
_UniffiLib.uniffi_bitkitcore_checksum_func_validate_bitcoin_address.restype = ctypes.c_uint16
_UniffiLib.ffi_bitkitcore_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_bitkitcore_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationPointerManager = _UniffiPointerManager()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_FUTURE_CONTINUATION_T
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationPointerManager.release_pointer(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = asyncio.get_running_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _UniffiContinuationPointerManager.new_pointer((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)

_UniffiLib.ffi_bitkitcore_rust_future_continuation_callback_set(_uniffi_continuation_callback)

# Public interface members begin here.


class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u64(value)

class _UniffiConverterBool(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write_unchecked(cls, value, buf):
        buf.write_u8(value)

    @staticmethod
    def lift(value):
        return value != 0

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def write(value, buf):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))
        buf.write_i32(len(value))
        buf.write(value)


class LightningInvoice:
    payment_hash: "bytes";amount_satoshis: "int";timestamp_seconds: "int";expiry_seconds: "int";is_expired: "bool";description: "typing.Optional[str]";network_type: "NetworkType";payee_node_id: "typing.Optional[bytes]";

    @typing.no_type_check
    def __init__(self, payment_hash: "bytes", amount_satoshis: "int", timestamp_seconds: "int", expiry_seconds: "int", is_expired: "bool", description: "typing.Optional[str]", network_type: "NetworkType", payee_node_id: "typing.Optional[bytes]"):
        self.payment_hash = payment_hash
        self.amount_satoshis = amount_satoshis
        self.timestamp_seconds = timestamp_seconds
        self.expiry_seconds = expiry_seconds
        self.is_expired = is_expired
        self.description = description
        self.network_type = network_type
        self.payee_node_id = payee_node_id

    def __str__(self):
        return "LightningInvoice(payment_hash={}, amount_satoshis={}, timestamp_seconds={}, expiry_seconds={}, is_expired={}, description={}, network_type={}, payee_node_id={})".format(self.payment_hash, self.amount_satoshis, self.timestamp_seconds, self.expiry_seconds, self.is_expired, self.description, self.network_type, self.payee_node_id)

    def __eq__(self, other):
        if self.payment_hash != other.payment_hash:
            return False
        if self.amount_satoshis != other.amount_satoshis:
            return False
        if self.timestamp_seconds != other.timestamp_seconds:
            return False
        if self.expiry_seconds != other.expiry_seconds:
            return False
        if self.is_expired != other.is_expired:
            return False
        if self.description != other.description:
            return False
        if self.network_type != other.network_type:
            return False
        if self.payee_node_id != other.payee_node_id:
            return False
        return True

class _UniffiConverterTypeLightningInvoice(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LightningInvoice(
            payment_hash=_UniffiConverterBytes.read(buf),
            amount_satoshis=_UniffiConverterUInt64.read(buf),
            timestamp_seconds=_UniffiConverterUInt64.read(buf),
            expiry_seconds=_UniffiConverterUInt64.read(buf),
            is_expired=_UniffiConverterBool.read(buf),
            description=_UniffiConverterOptionalString.read(buf),
            network_type=_UniffiConverterTypeNetworkType.read(buf),
            payee_node_id=_UniffiConverterOptionalBytes.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterBytes.write(value.payment_hash, buf)
        _UniffiConverterUInt64.write(value.amount_satoshis, buf)
        _UniffiConverterUInt64.write(value.timestamp_seconds, buf)
        _UniffiConverterUInt64.write(value.expiry_seconds, buf)
        _UniffiConverterBool.write(value.is_expired, buf)
        _UniffiConverterOptionalString.write(value.description, buf)
        _UniffiConverterTypeNetworkType.write(value.network_type, buf)
        _UniffiConverterOptionalBytes.write(value.payee_node_id, buf)


class LnurlAddressData:
    uri: "str";domain: "str";username: "str";

    @typing.no_type_check
    def __init__(self, uri: "str", domain: "str", username: "str"):
        self.uri = uri
        self.domain = domain
        self.username = username

    def __str__(self):
        return "LnurlAddressData(uri={}, domain={}, username={})".format(self.uri, self.domain, self.username)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.domain != other.domain:
            return False
        if self.username != other.username:
            return False
        return True

class _UniffiConverterTypeLnurlAddressData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlAddressData(
            uri=_UniffiConverterString.read(buf),
            domain=_UniffiConverterString.read(buf),
            username=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.domain, buf)
        _UniffiConverterString.write(value.username, buf)


class LnurlAuthData:
    uri: "str";tag: "str";k1: "str";

    @typing.no_type_check
    def __init__(self, uri: "str", tag: "str", k1: "str"):
        self.uri = uri
        self.tag = tag
        self.k1 = k1

    def __str__(self):
        return "LnurlAuthData(uri={}, tag={}, k1={})".format(self.uri, self.tag, self.k1)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.tag != other.tag:
            return False
        if self.k1 != other.k1:
            return False
        return True

class _UniffiConverterTypeLnurlAuthData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlAuthData(
            uri=_UniffiConverterString.read(buf),
            tag=_UniffiConverterString.read(buf),
            k1=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.tag, buf)
        _UniffiConverterString.write(value.k1, buf)


class LnurlChannelData:
    uri: "str";callback: "str";k1: "str";tag: "str";

    @typing.no_type_check
    def __init__(self, uri: "str", callback: "str", k1: "str", tag: "str"):
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.tag = tag

    def __str__(self):
        return "LnurlChannelData(uri={}, callback={}, k1={}, tag={})".format(self.uri, self.callback, self.k1, self.tag)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.callback != other.callback:
            return False
        if self.k1 != other.k1:
            return False
        if self.tag != other.tag:
            return False
        return True

class _UniffiConverterTypeLnurlChannelData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlChannelData(
            uri=_UniffiConverterString.read(buf),
            callback=_UniffiConverterString.read(buf),
            k1=_UniffiConverterString.read(buf),
            tag=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.callback, buf)
        _UniffiConverterString.write(value.k1, buf)
        _UniffiConverterString.write(value.tag, buf)


class LnurlPayData:
    uri: "str";callback: "str";min_sendable: "int";max_sendable: "int";metadata_str: "str";comment_allowed: "typing.Optional[int]";allows_nostr: "bool";nostr_pubkey: "typing.Optional[bytes]";

    @typing.no_type_check
    def __init__(self, uri: "str", callback: "str", min_sendable: "int", max_sendable: "int", metadata_str: "str", comment_allowed: "typing.Optional[int]", allows_nostr: "bool", nostr_pubkey: "typing.Optional[bytes]"):
        self.uri = uri
        self.callback = callback
        self.min_sendable = min_sendable
        self.max_sendable = max_sendable
        self.metadata_str = metadata_str
        self.comment_allowed = comment_allowed
        self.allows_nostr = allows_nostr
        self.nostr_pubkey = nostr_pubkey

    def __str__(self):
        return "LnurlPayData(uri={}, callback={}, min_sendable={}, max_sendable={}, metadata_str={}, comment_allowed={}, allows_nostr={}, nostr_pubkey={})".format(self.uri, self.callback, self.min_sendable, self.max_sendable, self.metadata_str, self.comment_allowed, self.allows_nostr, self.nostr_pubkey)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.callback != other.callback:
            return False
        if self.min_sendable != other.min_sendable:
            return False
        if self.max_sendable != other.max_sendable:
            return False
        if self.metadata_str != other.metadata_str:
            return False
        if self.comment_allowed != other.comment_allowed:
            return False
        if self.allows_nostr != other.allows_nostr:
            return False
        if self.nostr_pubkey != other.nostr_pubkey:
            return False
        return True

class _UniffiConverterTypeLnurlPayData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlPayData(
            uri=_UniffiConverterString.read(buf),
            callback=_UniffiConverterString.read(buf),
            min_sendable=_UniffiConverterUInt64.read(buf),
            max_sendable=_UniffiConverterUInt64.read(buf),
            metadata_str=_UniffiConverterString.read(buf),
            comment_allowed=_UniffiConverterOptionalUInt32.read(buf),
            allows_nostr=_UniffiConverterBool.read(buf),
            nostr_pubkey=_UniffiConverterOptionalBytes.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.callback, buf)
        _UniffiConverterUInt64.write(value.min_sendable, buf)
        _UniffiConverterUInt64.write(value.max_sendable, buf)
        _UniffiConverterString.write(value.metadata_str, buf)
        _UniffiConverterOptionalUInt32.write(value.comment_allowed, buf)
        _UniffiConverterBool.write(value.allows_nostr, buf)
        _UniffiConverterOptionalBytes.write(value.nostr_pubkey, buf)


class LnurlWithdrawData:
    uri: "str";callback: "str";k1: "str";default_description: "str";min_withdrawable: "typing.Optional[int]";max_withdrawable: "int";tag: "str";

    @typing.no_type_check
    def __init__(self, uri: "str", callback: "str", k1: "str", default_description: "str", min_withdrawable: "typing.Optional[int]", max_withdrawable: "int", tag: "str"):
        self.uri = uri
        self.callback = callback
        self.k1 = k1
        self.default_description = default_description
        self.min_withdrawable = min_withdrawable
        self.max_withdrawable = max_withdrawable
        self.tag = tag

    def __str__(self):
        return "LnurlWithdrawData(uri={}, callback={}, k1={}, default_description={}, min_withdrawable={}, max_withdrawable={}, tag={})".format(self.uri, self.callback, self.k1, self.default_description, self.min_withdrawable, self.max_withdrawable, self.tag)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.callback != other.callback:
            return False
        if self.k1 != other.k1:
            return False
        if self.default_description != other.default_description:
            return False
        if self.min_withdrawable != other.min_withdrawable:
            return False
        if self.max_withdrawable != other.max_withdrawable:
            return False
        if self.tag != other.tag:
            return False
        return True

class _UniffiConverterTypeLnurlWithdrawData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LnurlWithdrawData(
            uri=_UniffiConverterString.read(buf),
            callback=_UniffiConverterString.read(buf),
            k1=_UniffiConverterString.read(buf),
            default_description=_UniffiConverterString.read(buf),
            min_withdrawable=_UniffiConverterOptionalUInt64.read(buf),
            max_withdrawable=_UniffiConverterUInt64.read(buf),
            tag=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterString.write(value.callback, buf)
        _UniffiConverterString.write(value.k1, buf)
        _UniffiConverterString.write(value.default_description, buf)
        _UniffiConverterOptionalUInt64.write(value.min_withdrawable, buf)
        _UniffiConverterUInt64.write(value.max_withdrawable, buf)
        _UniffiConverterString.write(value.tag, buf)


class OnChainInvoice:
    address: "str";amount_satoshis: "int";label: "typing.Optional[str]";message: "typing.Optional[str]";params: "typing.Optional[dict]";

    @typing.no_type_check
    def __init__(self, address: "str", amount_satoshis: "int", label: "typing.Optional[str]", message: "typing.Optional[str]", params: "typing.Optional[dict]"):
        self.address = address
        self.amount_satoshis = amount_satoshis
        self.label = label
        self.message = message
        self.params = params

    def __str__(self):
        return "OnChainInvoice(address={}, amount_satoshis={}, label={}, message={}, params={})".format(self.address, self.amount_satoshis, self.label, self.message, self.params)

    def __eq__(self, other):
        if self.address != other.address:
            return False
        if self.amount_satoshis != other.amount_satoshis:
            return False
        if self.label != other.label:
            return False
        if self.message != other.message:
            return False
        if self.params != other.params:
            return False
        return True

class _UniffiConverterTypeOnChainInvoice(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return OnChainInvoice(
            address=_UniffiConverterString.read(buf),
            amount_satoshis=_UniffiConverterUInt64.read(buf),
            label=_UniffiConverterOptionalString.read(buf),
            message=_UniffiConverterOptionalString.read(buf),
            params=_UniffiConverterOptionalMapStringString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterUInt64.write(value.amount_satoshis, buf)
        _UniffiConverterOptionalString.write(value.label, buf)
        _UniffiConverterOptionalString.write(value.message, buf)
        _UniffiConverterOptionalMapStringString.write(value.params, buf)


class PubkyAuth:
    data: "str";

    @typing.no_type_check
    def __init__(self, data: "str"):
        self.data = data

    def __str__(self):
        return "PubkyAuth(data={})".format(self.data)

    def __eq__(self, other):
        if self.data != other.data:
            return False
        return True

class _UniffiConverterTypePubkyAuth(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PubkyAuth(
            data=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.data, buf)


class ValidationResult:
    address: "str";network: "NetworkType";address_type: "AddressType";

    @typing.no_type_check
    def __init__(self, address: "str", network: "NetworkType", address_type: "AddressType"):
        self.address = address
        self.network = network
        self.address_type = address_type

    def __str__(self):
        return "ValidationResult(address={}, network={}, address_type={})".format(self.address, self.network, self.address_type)

    def __eq__(self, other):
        if self.address != other.address:
            return False
        if self.network != other.network:
            return False
        if self.address_type != other.address_type:
            return False
        return True

class _UniffiConverterTypeValidationResult(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ValidationResult(
            address=_UniffiConverterString.read(buf),
            network=_UniffiConverterTypeNetworkType.read(buf),
            address_type=_UniffiConverterTypeAddressType.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterTypeNetworkType.write(value.network, buf)
        _UniffiConverterTypeAddressType.write(value.address_type, buf)





class AddressError(enum.Enum):
    INVALID_ADDRESS = 1
    INVALID_NETWORK = 2
    


class _UniffiConverterTypeAddressError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AddressError.INVALID_ADDRESS
        if variant == 2:
            return AddressError.INVALID_NETWORK
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == AddressError.INVALID_ADDRESS:
            buf.write_i32(1)
        if value == AddressError.INVALID_NETWORK:
            buf.write_i32(2)







class AddressType(enum.Enum):
    P2PKH = 1
    P2SH = 2
    P2WPKH = 3
    P2WSH = 4
    P2TR = 5
    UNKNOWN = 6
    


class _UniffiConverterTypeAddressType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AddressType.P2PKH
        if variant == 2:
            return AddressType.P2SH
        if variant == 3:
            return AddressType.P2WPKH
        if variant == 4:
            return AddressType.P2WSH
        if variant == 5:
            return AddressType.P2TR
        if variant == 6:
            return AddressType.UNKNOWN
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == AddressType.P2PKH:
            buf.write_i32(1)
        if value == AddressType.P2SH:
            buf.write_i32(2)
        if value == AddressType.P2WPKH:
            buf.write_i32(3)
        if value == AddressType.P2WSH:
            buf.write_i32(4)
        if value == AddressType.P2TR:
            buf.write_i32(5)
        if value == AddressType.UNKNOWN:
            buf.write_i32(6)







class DecodingError:
    def __init__(self):
        raise RuntimeError("DecodingError cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class INVALID_FORMAT:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.INVALID_FORMAT()".format()

        def __eq__(self, other):
            if not other.is_invalid_format():
                return False
            return True
    class INVALID_NETWORK:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.INVALID_NETWORK()".format()

        def __eq__(self, other):
            if not other.is_invalid_network():
                return False
            return True
    class INVALID_AMOUNT:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.INVALID_AMOUNT()".format()

        def __eq__(self, other):
            if not other.is_invalid_amount():
                return False
            return True
    class INVALID_LNURL_PAY_AMOUNT:
        amount_satoshis: "int";min: "int";max: "int";

        @typing.no_type_check
        def __init__(self,amount_satoshis: "int", min: "int", max: "int"):
            
            self.amount_satoshis = amount_satoshis
            self.min = min
            self.max = max
            

        def __str__(self):
            return "DecodingError.INVALID_LNURL_PAY_AMOUNT(amount_satoshis={}, min={}, max={})".format(self.amount_satoshis, self.min, self.max)

        def __eq__(self, other):
            if not other.is_invalid_lnurl_pay_amount():
                return False
            if self.amount_satoshis != other.amount_satoshis:
                return False
            if self.min != other.min:
                return False
            if self.max != other.max:
                return False
            return True
    class INVALID_TIMESTAMP:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.INVALID_TIMESTAMP()".format()

        def __eq__(self, other):
            if not other.is_invalid_timestamp():
                return False
            return True
    class INVALID_CHECKSUM:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.INVALID_CHECKSUM()".format()

        def __eq__(self, other):
            if not other.is_invalid_checksum():
                return False
            return True
    class INVALID_RESPONSE:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.INVALID_RESPONSE()".format()

        def __eq__(self, other):
            if not other.is_invalid_response():
                return False
            return True
    class UNSUPPORTED_TYPE:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.UNSUPPORTED_TYPE()".format()

        def __eq__(self, other):
            if not other.is_unsupported_type():
                return False
            return True
    class INVALID_ADDRESS:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.INVALID_ADDRESS()".format()

        def __eq__(self, other):
            if not other.is_invalid_address():
                return False
            return True
    class REQUEST_FAILED:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.REQUEST_FAILED()".format()

        def __eq__(self, other):
            if not other.is_request_failed():
                return False
            return True
    class CLIENT_CREATION_FAILED:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "DecodingError.CLIENT_CREATION_FAILED()".format()

        def __eq__(self, other):
            if not other.is_client_creation_failed():
                return False
            return True
    class INVOICE_CREATION_FAILED:
        message: "str";

        @typing.no_type_check
        def __init__(self,message: "str"):
            
            self.message = message
            

        def __str__(self):
            return "DecodingError.INVOICE_CREATION_FAILED(message={})".format(self.message)

        def __eq__(self, other):
            if not other.is_invoice_creation_failed():
                return False
            if self.message != other.message:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_invalid_format(self) -> bool:
        return isinstance(self, DecodingError.INVALID_FORMAT)
    def is_invalid_network(self) -> bool:
        return isinstance(self, DecodingError.INVALID_NETWORK)
    def is_invalid_amount(self) -> bool:
        return isinstance(self, DecodingError.INVALID_AMOUNT)
    def is_invalid_lnurl_pay_amount(self) -> bool:
        return isinstance(self, DecodingError.INVALID_LNURL_PAY_AMOUNT)
    def is_invalid_timestamp(self) -> bool:
        return isinstance(self, DecodingError.INVALID_TIMESTAMP)
    def is_invalid_checksum(self) -> bool:
        return isinstance(self, DecodingError.INVALID_CHECKSUM)
    def is_invalid_response(self) -> bool:
        return isinstance(self, DecodingError.INVALID_RESPONSE)
    def is_unsupported_type(self) -> bool:
        return isinstance(self, DecodingError.UNSUPPORTED_TYPE)
    def is_invalid_address(self) -> bool:
        return isinstance(self, DecodingError.INVALID_ADDRESS)
    def is_request_failed(self) -> bool:
        return isinstance(self, DecodingError.REQUEST_FAILED)
    def is_client_creation_failed(self) -> bool:
        return isinstance(self, DecodingError.CLIENT_CREATION_FAILED)
    def is_invoice_creation_failed(self) -> bool:
        return isinstance(self, DecodingError.INVOICE_CREATION_FAILED)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
DecodingError.INVALID_FORMAT = type("DecodingError.INVALID_FORMAT", (DecodingError.INVALID_FORMAT, DecodingError,), {})  # type: ignore
DecodingError.INVALID_NETWORK = type("DecodingError.INVALID_NETWORK", (DecodingError.INVALID_NETWORK, DecodingError,), {})  # type: ignore
DecodingError.INVALID_AMOUNT = type("DecodingError.INVALID_AMOUNT", (DecodingError.INVALID_AMOUNT, DecodingError,), {})  # type: ignore
DecodingError.INVALID_LNURL_PAY_AMOUNT = type("DecodingError.INVALID_LNURL_PAY_AMOUNT", (DecodingError.INVALID_LNURL_PAY_AMOUNT, DecodingError,), {})  # type: ignore
DecodingError.INVALID_TIMESTAMP = type("DecodingError.INVALID_TIMESTAMP", (DecodingError.INVALID_TIMESTAMP, DecodingError,), {})  # type: ignore
DecodingError.INVALID_CHECKSUM = type("DecodingError.INVALID_CHECKSUM", (DecodingError.INVALID_CHECKSUM, DecodingError,), {})  # type: ignore
DecodingError.INVALID_RESPONSE = type("DecodingError.INVALID_RESPONSE", (DecodingError.INVALID_RESPONSE, DecodingError,), {})  # type: ignore
DecodingError.UNSUPPORTED_TYPE = type("DecodingError.UNSUPPORTED_TYPE", (DecodingError.UNSUPPORTED_TYPE, DecodingError,), {})  # type: ignore
DecodingError.INVALID_ADDRESS = type("DecodingError.INVALID_ADDRESS", (DecodingError.INVALID_ADDRESS, DecodingError,), {})  # type: ignore
DecodingError.REQUEST_FAILED = type("DecodingError.REQUEST_FAILED", (DecodingError.REQUEST_FAILED, DecodingError,), {})  # type: ignore
DecodingError.CLIENT_CREATION_FAILED = type("DecodingError.CLIENT_CREATION_FAILED", (DecodingError.CLIENT_CREATION_FAILED, DecodingError,), {})  # type: ignore
DecodingError.INVOICE_CREATION_FAILED = type("DecodingError.INVOICE_CREATION_FAILED", (DecodingError.INVOICE_CREATION_FAILED, DecodingError,), {})  # type: ignore




class _UniffiConverterTypeDecodingError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return DecodingError.INVALID_FORMAT(
            )
        if variant == 2:
            return DecodingError.INVALID_NETWORK(
            )
        if variant == 3:
            return DecodingError.INVALID_AMOUNT(
            )
        if variant == 4:
            return DecodingError.INVALID_LNURL_PAY_AMOUNT(
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterUInt64.read(buf),
            )
        if variant == 5:
            return DecodingError.INVALID_TIMESTAMP(
            )
        if variant == 6:
            return DecodingError.INVALID_CHECKSUM(
            )
        if variant == 7:
            return DecodingError.INVALID_RESPONSE(
            )
        if variant == 8:
            return DecodingError.UNSUPPORTED_TYPE(
            )
        if variant == 9:
            return DecodingError.INVALID_ADDRESS(
            )
        if variant == 10:
            return DecodingError.REQUEST_FAILED(
            )
        if variant == 11:
            return DecodingError.CLIENT_CREATION_FAILED(
            )
        if variant == 12:
            return DecodingError.INVOICE_CREATION_FAILED(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_invalid_format():
            buf.write_i32(1)
        if value.is_invalid_network():
            buf.write_i32(2)
        if value.is_invalid_amount():
            buf.write_i32(3)
        if value.is_invalid_lnurl_pay_amount():
            buf.write_i32(4)
            _UniffiConverterUInt64.write(value.amount_satoshis, buf)
            _UniffiConverterUInt64.write(value.min, buf)
            _UniffiConverterUInt64.write(value.max, buf)
        if value.is_invalid_timestamp():
            buf.write_i32(5)
        if value.is_invalid_checksum():
            buf.write_i32(6)
        if value.is_invalid_response():
            buf.write_i32(7)
        if value.is_unsupported_type():
            buf.write_i32(8)
        if value.is_invalid_address():
            buf.write_i32(9)
        if value.is_request_failed():
            buf.write_i32(10)
        if value.is_client_creation_failed():
            buf.write_i32(11)
        if value.is_invoice_creation_failed():
            buf.write_i32(12)
            _UniffiConverterString.write(value.message, buf)







class LnurlError:
    def __init__(self):
        raise RuntimeError("LnurlError cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class INVALID_ADDRESS:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LnurlError.INVALID_ADDRESS()".format()

        def __eq__(self, other):
            if not other.is_invalid_address():
                return False
            return True
    class CLIENT_CREATION_FAILED:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LnurlError.CLIENT_CREATION_FAILED()".format()

        def __eq__(self, other):
            if not other.is_client_creation_failed():
                return False
            return True
    class REQUEST_FAILED:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LnurlError.REQUEST_FAILED()".format()

        def __eq__(self, other):
            if not other.is_request_failed():
                return False
            return True
    class INVALID_RESPONSE:
        

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LnurlError.INVALID_RESPONSE()".format()

        def __eq__(self, other):
            if not other.is_invalid_response():
                return False
            return True
    class INVALID_AMOUNT:
        amount_satoshis: "int";min: "int";max: "int";

        @typing.no_type_check
        def __init__(self,amount_satoshis: "int", min: "int", max: "int"):
            
            self.amount_satoshis = amount_satoshis
            self.min = min
            self.max = max
            

        def __str__(self):
            return "LnurlError.INVALID_AMOUNT(amount_satoshis={}, min={}, max={})".format(self.amount_satoshis, self.min, self.max)

        def __eq__(self, other):
            if not other.is_invalid_amount():
                return False
            if self.amount_satoshis != other.amount_satoshis:
                return False
            if self.min != other.min:
                return False
            if self.max != other.max:
                return False
            return True
    class INVOICE_CREATION_FAILED:
        message: "str";

        @typing.no_type_check
        def __init__(self,message: "str"):
            
            self.message = message
            

        def __str__(self):
            return "LnurlError.INVOICE_CREATION_FAILED(message={})".format(self.message)

        def __eq__(self, other):
            if not other.is_invoice_creation_failed():
                return False
            if self.message != other.message:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_invalid_address(self) -> bool:
        return isinstance(self, LnurlError.INVALID_ADDRESS)
    def is_client_creation_failed(self) -> bool:
        return isinstance(self, LnurlError.CLIENT_CREATION_FAILED)
    def is_request_failed(self) -> bool:
        return isinstance(self, LnurlError.REQUEST_FAILED)
    def is_invalid_response(self) -> bool:
        return isinstance(self, LnurlError.INVALID_RESPONSE)
    def is_invalid_amount(self) -> bool:
        return isinstance(self, LnurlError.INVALID_AMOUNT)
    def is_invoice_creation_failed(self) -> bool:
        return isinstance(self, LnurlError.INVOICE_CREATION_FAILED)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
LnurlError.INVALID_ADDRESS = type("LnurlError.INVALID_ADDRESS", (LnurlError.INVALID_ADDRESS, LnurlError,), {})  # type: ignore
LnurlError.CLIENT_CREATION_FAILED = type("LnurlError.CLIENT_CREATION_FAILED", (LnurlError.CLIENT_CREATION_FAILED, LnurlError,), {})  # type: ignore
LnurlError.REQUEST_FAILED = type("LnurlError.REQUEST_FAILED", (LnurlError.REQUEST_FAILED, LnurlError,), {})  # type: ignore
LnurlError.INVALID_RESPONSE = type("LnurlError.INVALID_RESPONSE", (LnurlError.INVALID_RESPONSE, LnurlError,), {})  # type: ignore
LnurlError.INVALID_AMOUNT = type("LnurlError.INVALID_AMOUNT", (LnurlError.INVALID_AMOUNT, LnurlError,), {})  # type: ignore
LnurlError.INVOICE_CREATION_FAILED = type("LnurlError.INVOICE_CREATION_FAILED", (LnurlError.INVOICE_CREATION_FAILED, LnurlError,), {})  # type: ignore




class _UniffiConverterTypeLnurlError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LnurlError.INVALID_ADDRESS(
            )
        if variant == 2:
            return LnurlError.CLIENT_CREATION_FAILED(
            )
        if variant == 3:
            return LnurlError.REQUEST_FAILED(
            )
        if variant == 4:
            return LnurlError.INVALID_RESPONSE(
            )
        if variant == 5:
            return LnurlError.INVALID_AMOUNT(
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterUInt64.read(buf),
                _UniffiConverterUInt64.read(buf),
            )
        if variant == 6:
            return LnurlError.INVOICE_CREATION_FAILED(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_invalid_address():
            buf.write_i32(1)
        if value.is_client_creation_failed():
            buf.write_i32(2)
        if value.is_request_failed():
            buf.write_i32(3)
        if value.is_invalid_response():
            buf.write_i32(4)
        if value.is_invalid_amount():
            buf.write_i32(5)
            _UniffiConverterUInt64.write(value.amount_satoshis, buf)
            _UniffiConverterUInt64.write(value.min, buf)
            _UniffiConverterUInt64.write(value.max, buf)
        if value.is_invoice_creation_failed():
            buf.write_i32(6)
            _UniffiConverterString.write(value.message, buf)







class NetworkType(enum.Enum):
    BITCOIN = 1
    TESTNET = 2
    REGTEST = 3
    SIGNET = 4
    


class _UniffiConverterTypeNetworkType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NetworkType.BITCOIN
        if variant == 2:
            return NetworkType.TESTNET
        if variant == 3:
            return NetworkType.REGTEST
        if variant == 4:
            return NetworkType.SIGNET
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == NetworkType.BITCOIN:
            buf.write_i32(1)
        if value == NetworkType.TESTNET:
            buf.write_i32(2)
        if value == NetworkType.REGTEST:
            buf.write_i32(3)
        if value == NetworkType.SIGNET:
            buf.write_i32(4)







class Scanner:
    def __init__(self):
        raise RuntimeError("Scanner cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class ON_CHAIN:
        invoice: "OnChainInvoice";

        @typing.no_type_check
        def __init__(self,invoice: "OnChainInvoice"):
            
            self.invoice = invoice
            

        def __str__(self):
            return "Scanner.ON_CHAIN(invoice={})".format(self.invoice)

        def __eq__(self, other):
            if not other.is_on_chain():
                return False
            if self.invoice != other.invoice:
                return False
            return True
    class LIGHTNING:
        invoice: "LightningInvoice";

        @typing.no_type_check
        def __init__(self,invoice: "LightningInvoice"):
            
            self.invoice = invoice
            

        def __str__(self):
            return "Scanner.LIGHTNING(invoice={})".format(self.invoice)

        def __eq__(self, other):
            if not other.is_lightning():
                return False
            if self.invoice != other.invoice:
                return False
            return True
    class PUBKY_AUTH:
        auth: "PubkyAuth";

        @typing.no_type_check
        def __init__(self,auth: "PubkyAuth"):
            
            self.auth = auth
            

        def __str__(self):
            return "Scanner.PUBKY_AUTH(auth={})".format(self.auth)

        def __eq__(self, other):
            if not other.is_pubky_auth():
                return False
            if self.auth != other.auth:
                return False
            return True
    class LNURL_CHANNEL:
        data: "LnurlChannelData";

        @typing.no_type_check
        def __init__(self,data: "LnurlChannelData"):
            
            self.data = data
            

        def __str__(self):
            return "Scanner.LNURL_CHANNEL(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_channel():
                return False
            if self.data != other.data:
                return False
            return True
    class LNURL_AUTH:
        data: "LnurlAuthData";

        @typing.no_type_check
        def __init__(self,data: "LnurlAuthData"):
            
            self.data = data
            

        def __str__(self):
            return "Scanner.LNURL_AUTH(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_auth():
                return False
            if self.data != other.data:
                return False
            return True
    class LNURL_WITHDRAW:
        data: "LnurlWithdrawData";

        @typing.no_type_check
        def __init__(self,data: "LnurlWithdrawData"):
            
            self.data = data
            

        def __str__(self):
            return "Scanner.LNURL_WITHDRAW(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_withdraw():
                return False
            if self.data != other.data:
                return False
            return True
    class LNURL_ADDRESS:
        data: "LnurlAddressData";

        @typing.no_type_check
        def __init__(self,data: "LnurlAddressData"):
            
            self.data = data
            

        def __str__(self):
            return "Scanner.LNURL_ADDRESS(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_address():
                return False
            if self.data != other.data:
                return False
            return True
    class LNURL_PAY:
        data: "LnurlPayData";

        @typing.no_type_check
        def __init__(self,data: "LnurlPayData"):
            
            self.data = data
            

        def __str__(self):
            return "Scanner.LNURL_PAY(data={})".format(self.data)

        def __eq__(self, other):
            if not other.is_lnurl_pay():
                return False
            if self.data != other.data:
                return False
            return True
    class NODE_ID:
        url: "str";network: "NetworkType";

        @typing.no_type_check
        def __init__(self,url: "str", network: "NetworkType"):
            
            self.url = url
            self.network = network
            

        def __str__(self):
            return "Scanner.NODE_ID(url={}, network={})".format(self.url, self.network)

        def __eq__(self, other):
            if not other.is_node_id():
                return False
            if self.url != other.url:
                return False
            if self.network != other.network:
                return False
            return True
    class TREASURE_HUNT:
        chest_id: "str";

        @typing.no_type_check
        def __init__(self,chest_id: "str"):
            
            self.chest_id = chest_id
            

        def __str__(self):
            return "Scanner.TREASURE_HUNT(chest_id={})".format(self.chest_id)

        def __eq__(self, other):
            if not other.is_treasure_hunt():
                return False
            if self.chest_id != other.chest_id:
                return False
            return True
    class ORANGE_TICKET:
        ticket_id: "str";

        @typing.no_type_check
        def __init__(self,ticket_id: "str"):
            
            self.ticket_id = ticket_id
            

        def __str__(self):
            return "Scanner.ORANGE_TICKET(ticket_id={})".format(self.ticket_id)

        def __eq__(self, other):
            if not other.is_orange_ticket():
                return False
            if self.ticket_id != other.ticket_id:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_on_chain(self) -> bool:
        return isinstance(self, Scanner.ON_CHAIN)
    def is_lightning(self) -> bool:
        return isinstance(self, Scanner.LIGHTNING)
    def is_pubky_auth(self) -> bool:
        return isinstance(self, Scanner.PUBKY_AUTH)
    def is_lnurl_channel(self) -> bool:
        return isinstance(self, Scanner.LNURL_CHANNEL)
    def is_lnurl_auth(self) -> bool:
        return isinstance(self, Scanner.LNURL_AUTH)
    def is_lnurl_withdraw(self) -> bool:
        return isinstance(self, Scanner.LNURL_WITHDRAW)
    def is_lnurl_address(self) -> bool:
        return isinstance(self, Scanner.LNURL_ADDRESS)
    def is_lnurl_pay(self) -> bool:
        return isinstance(self, Scanner.LNURL_PAY)
    def is_node_id(self) -> bool:
        return isinstance(self, Scanner.NODE_ID)
    def is_treasure_hunt(self) -> bool:
        return isinstance(self, Scanner.TREASURE_HUNT)
    def is_orange_ticket(self) -> bool:
        return isinstance(self, Scanner.ORANGE_TICKET)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
Scanner.ON_CHAIN = type("Scanner.ON_CHAIN", (Scanner.ON_CHAIN, Scanner,), {})  # type: ignore
Scanner.LIGHTNING = type("Scanner.LIGHTNING", (Scanner.LIGHTNING, Scanner,), {})  # type: ignore
Scanner.PUBKY_AUTH = type("Scanner.PUBKY_AUTH", (Scanner.PUBKY_AUTH, Scanner,), {})  # type: ignore
Scanner.LNURL_CHANNEL = type("Scanner.LNURL_CHANNEL", (Scanner.LNURL_CHANNEL, Scanner,), {})  # type: ignore
Scanner.LNURL_AUTH = type("Scanner.LNURL_AUTH", (Scanner.LNURL_AUTH, Scanner,), {})  # type: ignore
Scanner.LNURL_WITHDRAW = type("Scanner.LNURL_WITHDRAW", (Scanner.LNURL_WITHDRAW, Scanner,), {})  # type: ignore
Scanner.LNURL_ADDRESS = type("Scanner.LNURL_ADDRESS", (Scanner.LNURL_ADDRESS, Scanner,), {})  # type: ignore
Scanner.LNURL_PAY = type("Scanner.LNURL_PAY", (Scanner.LNURL_PAY, Scanner,), {})  # type: ignore
Scanner.NODE_ID = type("Scanner.NODE_ID", (Scanner.NODE_ID, Scanner,), {})  # type: ignore
Scanner.TREASURE_HUNT = type("Scanner.TREASURE_HUNT", (Scanner.TREASURE_HUNT, Scanner,), {})  # type: ignore
Scanner.ORANGE_TICKET = type("Scanner.ORANGE_TICKET", (Scanner.ORANGE_TICKET, Scanner,), {})  # type: ignore




class _UniffiConverterTypeScanner(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Scanner.ON_CHAIN(
                _UniffiConverterTypeOnChainInvoice.read(buf),
            )
        if variant == 2:
            return Scanner.LIGHTNING(
                _UniffiConverterTypeLightningInvoice.read(buf),
            )
        if variant == 3:
            return Scanner.PUBKY_AUTH(
                _UniffiConverterTypePubkyAuth.read(buf),
            )
        if variant == 4:
            return Scanner.LNURL_CHANNEL(
                _UniffiConverterTypeLnurlChannelData.read(buf),
            )
        if variant == 5:
            return Scanner.LNURL_AUTH(
                _UniffiConverterTypeLnurlAuthData.read(buf),
            )
        if variant == 6:
            return Scanner.LNURL_WITHDRAW(
                _UniffiConverterTypeLnurlWithdrawData.read(buf),
            )
        if variant == 7:
            return Scanner.LNURL_ADDRESS(
                _UniffiConverterTypeLnurlAddressData.read(buf),
            )
        if variant == 8:
            return Scanner.LNURL_PAY(
                _UniffiConverterTypeLnurlPayData.read(buf),
            )
        if variant == 9:
            return Scanner.NODE_ID(
                _UniffiConverterString.read(buf),
                _UniffiConverterTypeNetworkType.read(buf),
            )
        if variant == 10:
            return Scanner.TREASURE_HUNT(
                _UniffiConverterString.read(buf),
            )
        if variant == 11:
            return Scanner.ORANGE_TICKET(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_on_chain():
            buf.write_i32(1)
            _UniffiConverterTypeOnChainInvoice.write(value.invoice, buf)
        if value.is_lightning():
            buf.write_i32(2)
            _UniffiConverterTypeLightningInvoice.write(value.invoice, buf)
        if value.is_pubky_auth():
            buf.write_i32(3)
            _UniffiConverterTypePubkyAuth.write(value.auth, buf)
        if value.is_lnurl_channel():
            buf.write_i32(4)
            _UniffiConverterTypeLnurlChannelData.write(value.data, buf)
        if value.is_lnurl_auth():
            buf.write_i32(5)
            _UniffiConverterTypeLnurlAuthData.write(value.data, buf)
        if value.is_lnurl_withdraw():
            buf.write_i32(6)
            _UniffiConverterTypeLnurlWithdrawData.write(value.data, buf)
        if value.is_lnurl_address():
            buf.write_i32(7)
            _UniffiConverterTypeLnurlAddressData.write(value.data, buf)
        if value.is_lnurl_pay():
            buf.write_i32(8)
            _UniffiConverterTypeLnurlPayData.write(value.data, buf)
        if value.is_node_id():
            buf.write_i32(9)
            _UniffiConverterString.write(value.url, buf)
            _UniffiConverterTypeNetworkType.write(value.network, buf)
        if value.is_treasure_hunt():
            buf.write_i32(10)
            _UniffiConverterString.write(value.chest_id, buf)
        if value.is_orange_ticket():
            buf.write_i32(11)
            _UniffiConverterString.write(value.ticket_id, buf)







class Unit(enum.Enum):
    BITCOIN = 1
    SATOSHI = 2
    MILLI_SATOSHI = 3
    


class _UniffiConverterTypeUnit(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Unit.BITCOIN
        if variant == 2:
            return Unit.SATOSHI
        if variant == 3:
            return Unit.MILLI_SATOSHI
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == Unit.BITCOIN:
            buf.write_i32(1)
        if value == Unit.SATOSHI:
            buf.write_i32(2)
        if value == Unit.MILLI_SATOSHI:
            buf.write_i32(3)





class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBytes(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBytes.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBytes.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterMapStringString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterMapStringString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterMapStringString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterString.read(buf)
            d[key] = val
        return d

def decode(invoice: "str"):
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_decode(
        _UniffiConverterString.lower(invoice)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypeScanner.lift,
        # Error FFI converter
        _UniffiConverterTypeDecodingError,
    )

def get_lnurl_invoice(address: "str",amount_satoshis: "int"):
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_bitkitcore_fn_func_get_lnurl_invoice(
        _UniffiConverterString.lower(address),
        _UniffiConverterUInt64.lower(amount_satoshis)),
        _UniffiLib.ffi_bitkitcore_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_bitkitcore_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterString.lift,
        # Error FFI converter
        _UniffiConverterTypeLnurlError,
    )

def validate_bitcoin_address(address: "str") -> "ValidationResult":
    
    return _UniffiConverterTypeValidationResult.lift(_rust_call_with_error(_UniffiConverterTypeAddressError,_UniffiLib.uniffi_bitkitcore_fn_func_validate_bitcoin_address,
        _UniffiConverterString.lower(address)))


__all__ = [
    "InternalError",
    "AddressError",
    "AddressType",
    "DecodingError",
    "LnurlError",
    "NetworkType",
    "Scanner",
    "Unit",
    "LightningInvoice",
    "LnurlAddressData",
    "LnurlAuthData",
    "LnurlChannelData",
    "LnurlPayData",
    "LnurlWithdrawData",
    "OnChainInvoice",
    "PubkyAuth",
    "ValidationResult",
    "decode",
    "get_lnurl_invoice",
    "validate_bitcoin_address",
]

